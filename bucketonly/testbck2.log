scala> testbck.filter("ziw_row_id = '91c36e90096e5b5b6d5dehihi85077018406'").take(10)
17/11/03 15:20:17 INFO SparkSqlParser: Parsing command: ziw_row_id = '91c36e90096e5b5b6d5dehihi85077018406'
17/11/03 15:20:17 DEBUG Analyzer$ResolveReferences: Resolving 'ziw_row_id to ziw_row_id#378
17/11/03 15:20:17 DEBUG HiveSessionStateBuilder$$anon$1:
=== Result of Batch Resolution ===
!'Filter ('ziw_row_id = 91c36e90096e5b5b6d5dehihiilter (ziw_row_id#378 = 91c36e90096e5b5b6d5dehihi85077018406)
 +- Project [c_customer_sk#307, c_customer_id#308, c_current_cdemo_sk#309, c_current_hdemo_sk#310, c_current_addr_sk#311, c_first_shipto_date_sk#312, c_first_sales_date_sk#313, c_first_name#314, c_last_name#315, c_preferred_cust_flag#316, c_birth_day#317, c_birth_month#318, c_birth_year#319, c_birth_country#320, c_login#321, c_email_address#322, c_last_review_date#323, c_customer_sk__customer#324, c_customer_id__customer#325, c_current_cdemo_sk__customer#326, c_current_hdemo_sk__customer#327, c_current_addr_sk__customer#328, c_first_shipto_date_sk__customer#329, c_first_sales_date_sk__customer#330, ... 52 more fields]   +- Project [c_customer_sk#307, c_customer_id#308, c_current_cdemo_sk#309, c_current_hdemo_sk#310, c_current_addr_sk#311, c_first_shipto_date_sk#312, c_first_sales_date_sk#313, c_first_name#314, c_last_name#315, c_preferred_cust_flag#316, c_birth_day#317, c_birth_month#318, c_birth_year#319, c_birth_country#320, c_login#321, c_email_address#322, c_last_review_date#323, c_customer_sk__customer#324, c_customer_id__customer#325, c_current_cdemo_sk__customer#326, c_current_hdemo_sk__customer#327, c_current_addr_sk__customer#328, c_first_shipto_date_sk__customer#329, c_first_sales_date_sk__customer#330, ... 52 more fields]
    +- SubqueryAlias testbckubqueryAlias testbck
       +- Relation[c_customer_sk#307,c_customer_id#308,c_current_cdemo_sk#309,c_current_hdemo_sk#310,c_current_addr_sk#311,c_first_shipto_date_sk#312,c_first_sales_date_sk#313,c_first_name#314,c_last_name#315,c_preferred_cust_flag#316,c_birth_day#317,c_birth_month#318,c_birth_year#319,c_birth_country#320,c_login#321,c_email_address#322,c_last_review_date#323,c_customer_sk__customer#324,c_customer_id__customer#325,c_current_cdemo_sk__customer#326,c_current_hdemo_sk__customer#327,c_current_addr_sk__customer#328,c_first_shipto_date_sk__customer#329,c_first_sales_date_sk__customer#330,... 52 more fields] orc                       +- Relation[c_customer_sk#307,c_customer_id#308,c_current_cdemo_sk#309,c_current_hdemo_sk#310,c_current_addr_sk#311,c_first_shipto_date_sk#312,c_first_sales_date_sk#313,c_first_name#314,c_last_name#315,c_preferred_cust_flag#316,c_birth_day#317,c_birth_month#318,c_birth_year#319,c_birth_country#320,c_login#321,c_email_address#322,c_last_review_date#323,c_customer_sk__customer#324,c_customer_id__customer#325,c_current_cdemo_sk__customer#326,c_current_hdemo_sk__customer#327,c_current_addr_sk__customer#328,c_first_shipto_date_sk__customer#329,c_first_sales_date_sk__customer#330,... 52 more fields] orc

17/11/03 15:20:17 DEBUG HiveSessionStateBuilder$$anon$1:
=== Result of Batch Resolution ===
!'DeserializeToObject unresolveddeserializer(createexternalrow(getcolumnbyordinal(0, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(1, StringType).toString, getcolumnbyordinal(2, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(3, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(4, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(5, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(6, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(7, StringType).toString, getcolumnbyordinal(8, StringType).toString, getcolumnbyordinal(9, StringType).toString, getcolumnbyordinal(10, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(11, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(12, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(13, StringType).toString, getcolumnbyordinal(14, StringType).toString, getcolumnbyordinal(15, StringType).toString, getcolumnbyordinal(16, StringType).toString, getcolumnbyordinal(17, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(18, StringType).toString, getcolumnbyordinal(19, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(20, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(21, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(22, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(23, DecimalType(38,0)).toJavaBigDecimal, ... 128 more fields)), obj#536: org.apache.spark.sql.Row   DeserializeToObject createexternalrow(c_customer_sk#307.toJavaBigDecimal, c_customer_id#308.toString, c_current_cdemo_sk#309.toJavaBigDecimal, c_current_hdemo_sk#310.toJavaBigDecimal, c_current_addr_sk#311.toJavaBigDecimal, c_first_shipto_date_sk#312.toJavaBigDecimal, c_first_sales_date_sk#313.toJavaBigDecimal, c_first_name#314.toString, c_last_name#315.toString, c_preferred_cust_flag#316.toString, c_birth_day#317.toJavaBigDecimal, c_birth_month#318.toJavaBigDecimal, c_birth_year#319.toJavaBigDecimal, c_birth_country#320.toString, c_login#321.toString, c_email_address#322.toString, c_last_review_date#323.toString, c_customer_sk__customer#324.toJavaBigDecimal, c_customer_id__customer#325.toString, c_current_cdemo_sk__customer#326.toJavaBigDecimal, c_current_hdemo_sk__customer#327.toJavaBigDecimal, c_current_addr_sk__customer#328.toJavaBigDecimal, c_first_shipto_date_sk__customer#329.toJavaBigDecimal, c_first_sales_date_sk__customer#330.toJavaBigDecimal, ... 128 more fields), obj#536: org.apache.spark.sql.Row
 +- LocalRelation <empty>, [c_customer_sk#307, c_customer_id#308, c_current_cdemo_sk#309, c_current_hdemo_sk#310, c_current_addr_sk#311, c_first_shipto_date_sk#312, c_first_sales_date_sk#313, c_first_name#314, c_last_name#315, c_preferred_cust_flag#316, c_birth_day#317, c_birth_month#318, c_birth_year#319, c_birth_country#320, c_login#321, c_email_address#322, c_last_review_date#323, c_customer_sk__customer#324, c_customer_id__customer#325, c_current_cdemo_sk__customer#326, c_current_hdemo_sk__customer#327, c_current_addr_sk__customer#328, c_first_shipto_date_sk__customer#329, c_first_sales_date_sk__customer#330, ... 52 more fieldsocalRelation <empty>, [c_customer_sk#307, c_customer_id#308, c_current_cdemo_sk#309, c_current_hdemo_sk#310, c_current_addr_sk#311, c_first_shipto_date_sk#312, c_first_sales_date_sk#313, c_first_name#314, c_last_name#315, c_preferred_cust_flag#316, c_birth_day#317, c_birth_month#318, c_birth_year#319, c_birth_country#320, c_login#321, c_email_address#322, c_last_review_date#323, c_customer_sk__customer#324, c_customer_id__customer#325, c_current_cdemo_sk__customer#326, c_current_hdemo_sk__customer#327, c_current_addr_sk__customer#328, c_first_shipto_date_sk__customer#329, c_first_sales_date_sk__customer#330, ... 52 more fields]

17/11/03 15:20:17 DEBUG HiveSessionStateBuilder$$anon$1:
=== Result of Batch Resolution ===
!'DeserializeToObject unresolveddeserializer(createexternalrow(getcolumnbyordinal(0, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(1, StringType).toString, getcolumnbyordinal(2, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(3, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(4, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(5, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(6, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(7, StringType).toString, getcolumnbyordinal(8, StringType).toString, getcolumnbyordinal(9, StringType).toString, getcolumnbyordinal(10, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(11, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(12, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(13, StringType).toString, getcolumnbyordinal(14, StringType).toString, getcolumnbyordinal(15, StringType).toString, getcolumnbyordinal(16, StringType).toString, getcolumnbyordinal(17, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(18, StringType).toString, getcolumnbyordinal(19, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(20, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(21, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(22, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(23, DecimalType(38,0)).toJavaBigDecimal, ... 128 more fields)), obj#537: org.apache.spark.sql.Row   DeserializeToObject createexternalrow(c_customer_sk#307.toJavaBigDecimal, c_customer_id#308.toString, c_current_cdemo_sk#309.toJavaBigDecimal, c_current_hdemo_sk#310.toJavaBigDecimal, c_current_addr_sk#311.toJavaBigDecimal, c_first_shipto_date_sk#312.toJavaBigDecimal, c_first_sales_date_sk#313.toJavaBigDecimal, c_first_name#314.toString, c_last_name#315.toString, c_preferred_cust_flag#316.toString, c_birth_day#317.toJavaBigDecimal, c_birth_month#318.toJavaBigDecimal, c_birth_year#319.toJavaBigDecimal, c_birth_country#320.toString, c_login#321.toString, c_email_address#322.toString, c_last_review_date#323.toString, c_customer_sk__customer#324.toJavaBigDecimal, c_customer_id__customer#325.toString, c_current_cdemo_sk__customer#326.toJavaBigDecimal, c_current_hdemo_sk__customer#327.toJavaBigDecimal, c_current_addr_sk__customer#328.toJavaBigDecimal, c_first_shipto_date_sk__customer#329.toJavaBigDecimal, c_first_sales_date_sk__customer#330.toJavaBigDecimal, ... 128 more fields), obj#537: org.apache.spark.sql.Row
 +- LocalRelation <empty>, [c_customer_sk#307, c_customer_id#308, c_current_cdemo_sk#309, c_current_hdemo_sk#310, c_current_addr_sk#311, c_first_shipto_date_sk#312, c_first_sales_date_sk#313, c_first_name#314, c_last_name#315, c_preferred_cust_flag#316, c_birth_day#317, c_birth_month#318, c_birth_year#319, c_birth_country#320, c_login#321, c_email_address#322, c_last_review_date#323, c_customer_sk__customer#324, c_customer_id__customer#325, c_current_cdemo_sk__customer#326, c_current_hdemo_sk__customer#327, c_current_addr_sk__customer#328, c_first_shipto_date_sk__customer#329, c_first_sales_date_sk__customer#330, ... 52 more fieldsocalRelation <empty>, [c_customer_sk#307, c_customer_id#308, c_current_cdemo_sk#309, c_current_hdemo_sk#310, c_current_addr_sk#311, c_first_shipto_date_sk#312, c_first_sales_date_sk#313, c_first_name#314, c_last_name#315, c_preferred_cust_flag#316, c_birth_day#317, c_birth_month#318, c_birth_year#319, c_birth_country#320, c_login#321, c_email_address#322, c_last_review_date#323, c_customer_sk__customer#324, c_customer_id__customer#325, c_current_cdemo_sk__customer#326, c_current_hdemo_sk__customer#327, c_current_addr_sk__customer#328, c_first_shipto_date_sk__customer#329, c_first_sales_date_sk__customer#330, ... 52 more fields]

17/11/03 15:20:17 DEBUG BaseSessionStateBuilder$$anon$2:
=== Result of Batch Finish Analysis ===
 GlobalLimitlobalLimit 10
 +- LocalLimitocalLimit 10
    +- Filter (ziw_row_id#378 = 91c36e90096e5b5b6d5dehihiilter (ziw_row_id#378 = 91c36e90096e5b5b6d5dehihi85077018406)
       +- Project [c_customer_sk#307, c_customer_id#308, c_current_cdemo_sk#309, c_current_hdemo_sk#310, c_current_addr_sk#311, c_first_shipto_date_sk#312, c_first_sales_date_sk#313, c_first_name#314, c_last_name#315, c_preferred_cust_flag#316, c_birth_day#317, c_birth_month#318, c_birth_year#319, c_birth_country#320, c_login#321, c_email_address#322, c_last_review_date#323, c_customer_sk__customer#324, c_customer_id__customer#325, c_current_cdemo_sk__customer#326, c_current_hdemo_sk__customer#327, c_current_addr_sk__customer#328, c_first_shipto_date_sk__customer#329, c_first_sales_date_sk__customer#330, ... 52 more fields]         +- Project [c_customer_sk#307, c_customer_id#308, c_current_cdemo_sk#309, c_current_hdemo_sk#310, c_current_addr_sk#311, c_first_shipto_date_sk#312, c_first_sales_date_sk#313, c_first_name#314, c_last_name#315, c_preferred_cust_flag#316, c_birth_day#317, c_birth_month#318, c_birth_year#319, c_birth_country#320, c_login#321, c_email_address#322, c_last_review_date#323, c_customer_sk__customer#324, c_customer_id__customer#325, c_current_cdemo_sk__customer#326, c_current_hdemo_sk__customer#327, c_current_addr_sk__customer#328, c_first_shipto_date_sk__customer#329, c_first_sales_date_sk__customer#330, ... 52 more fields]
!         +- SubqueryAlias testbckelation[c_customer_sk#307,c_customer_id#308,c_current_cdemo_sk#309,c_current_hdemo_sk#310,c_current_addr_sk#311,c_first_shipto_date_sk#312,c_first_sales_date_sk#313,c_first_name#314,c_last_name#315,c_preferred_cust_flag#316,c_birth_day#317,c_birth_month#318,c_birth_year#319,c_birth_country#320,c_login#321,c_email_address#322,c_last_review_date#323,c_customer_sk__customer#324,c_customer_id__customer#325,c_current_cdemo_sk__customer#326,c_current_hdemo_sk__customer#327,c_current_addr_sk__customer#328,c_first_shipto_date_sk__customer#329,c_first_sales_date_sk__customer#330,... 52 more fields] orc
!            +- Relation[c_customer_sk#307,c_customer_id#308,c_current_cdemo_sk#309,c_current_hdemo_sk#310,c_current_addr_sk#311,c_first_shipto_date_sk#312,c_first_sales_date_sk#313,c_first_name#314,c_last_name#315,c_preferred_cust_flag#316,c_birth_day#317,c_birth_month#318,c_birth_year#319,c_birth_country#320,c_login#321,c_email_address#322,c_last_review_date#323,c_customer_sk__customer#324,c_customer_id__customer#325,c_current_cdemo_sk__customer#326,c_current_hdemo_sk__customer#327,c_current_addr_sk__customer#328,c_first_shipto_date_sk__customer#329,c_first_sales_date_sk__customer#330,... 52 more fields] orc

17/11/03 15:20:17 DEBUG BaseSessionStateBuilder$$anon$2:
=== Result of Batch Operator Optimizations ===
 GlobalLimitlobalLimit 10
 +- LocalLimit 10                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         +- LocalLimit 10
!   +- Filter (ziw_row_id#378 = 91c36e90096e5b5b6d5dehihi85077018406)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        +- Filter (isnotnull(ziw_row_id#378) && (ziw_row_id#378 = 91c36e90096e5b5b6d5dehihi85077018406))
!      +- Project [c_customer_sk#307, c_customer_id#308, c_current_cdemo_sk#309, c_current_hdemo_sk#310, c_current_addr_sk#311, c_first_shipto_date_sk#312, c_first_sales_date_sk#313, c_first_name#314, c_last_name#315, c_preferred_cust_flag#316, c_birth_day#317, c_birth_month#318, c_birth_year#319, c_birth_country#320, c_login#321, c_email_address#322, c_last_review_date#323, c_customer_sk__customer#324, c_customer_id__customer#325, c_current_cdemo_sk__customer#326, c_current_hdemo_sk__customer#327, c_current_addr_sk__customer#328, c_first_shipto_date_sk__customer#329, c_first_sales_date_sk__customer#330, ... 52 more fields]         +- Relation[c_customer_sk#307,c_customer_id#308,c_current_cdemo_sk#309,c_current_hdemo_sk#310,c_current_addr_sk#311,c_first_shipto_date_sk#312,c_first_sales_date_sk#313,c_first_name#314,c_last_name#315,c_preferred_cust_flag#316,c_birth_day#317,c_birth_month#318,c_birth_year#319,c_birth_country#320,c_login#321,c_email_address#322,c_last_review_date#323,c_customer_sk__customer#324,c_customer_id__customer#325,c_current_cdemo_sk__customer#326,c_current_hdemo_sk__customer#327,c_current_addr_sk__customer#328,c_first_shipto_date_sk__customer#329,c_first_sales_date_sk__customer#330,... 52 more fields] orc
!         +- Relation[c_customer_sk#307,c_customer_id#308,c_current_cdemo_sk#309,c_current_hdemo_sk#310,c_current_addr_sk#311,c_first_shipto_date_sk#312,c_first_sales_date_sk#313,c_first_name#314,c_last_name#315,c_preferred_cust_flag#316,c_birth_day#317,c_birth_month#318,c_birth_year#319,c_birth_country#320,c_login#321,c_email_address#322,c_last_review_date#323,c_customer_sk__customer#324,c_customer_id__customer#325,c_current_cdemo_sk__customer#326,c_current_hdemo_sk__customer#327,c_current_addr_sk__customer#328,c_first_shipto_date_sk__customer#329,c_first_sales_date_sk__customer#330,... 52 more fields] orc

17/11/03 15:20:17 INFO FileSourceStrategy: Pruning directories with:
17/11/03 15:20:17 INFO FileSourceStrategy: Post-Scan Filters: isnotnull(ziw_row_id#378),(ziw_row_id#378 = 91c36e90096e5b5b6d5dehihi85077018406)
17/11/03 15:20:17 INFO FileSourceStrategy: Output Data Schema: struct<c_customer_sk: decimal(38,0), c_customer_id: string, c_current_cdemo_sk: decimal(38,0), c_current_hdemo_sk: decimal(38,0), c_current_addr_sk: decimal(38,0) ... 74 more fields>
17/11/03 15:20:17 INFO FileSourceScanExec: Pushed Filters: IsNotNull(ziw_row_id),EqualTo(ziw_row_id,91c36e90096e5b5b6d5dehihi85077018406)
17/11/03 15:20:17 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=11, src=/spark2-history/local-1509722002203.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=62976
17/11/03 15:20:17 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=76015 lastFlushOffset=63061 createNewBlock=false
17/11/03 15:20:17 DEBUG DFSClient: Queued packet 11
17/11/03 15:20:17 DEBUG DFSClient: Waiting for ack for: 11
17/11/03 15:20:17 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: 11 offsetInBlock: 62976 lastPacketInBlock: false lastByteOffsetInBlock: 76015
17/11/03 15:20:17 DEBUG DFSClient: DFSClient seqno: 11 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 1046467 flag: 0 flag: 0 flag: 0
17/11/03 15:20:17 DEBUG WholeStageCodegenExec:
/* 001 */ public Object generate(Object[] references) {
/* 002 */   return new GeneratedIterator(references);
/* 003 */ }
/* 004 */
/* 005 */ final class GeneratedIterator extends org.apache.spark.sql.execution.BufferedRowIterator {
/* 006 */   private Object[] references;
/* 007 */   private scala.collection.Iterator[] inputs;
/* 008 */   private org.apache.spark.sql.execution.metric.SQLMetric scan_numOutputRows;
/* 009 */   private scala.collection.Iterator scan_input;
/* 010 */   private org.apache.spark.sql.execution.metric.SQLMetric filter_numOutputRows;
/* 011 */   private UnsafeRow filter_result;
/* 012 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder filter_holder;
/* 013 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter filter_rowWriter;
/* 014 */   private UnsafeRow project_result;
/* 015 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder project_holder;
/* 016 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter project_rowWriter;
/* 017 */
/* 018 */   public GeneratedIterator(Object[] references) {
/* 019 */     this.references = references;
/* 020 */   }
/* 021 */
/* 022 */   public void init(int index, scala.collection.Iterator[] inputs) {
/* 023 */     partitionIndex = index;
/* 024 */     this.inputs = inputs;
/* 025 */     this.scan_numOutputRows = (org.apache.spark.sql.execution.metric.SQLMetric) references[0];
/* 026 */     scan_input = inputs[0];
/* 027 */     this.filter_numOutputRows = (org.apache.spark.sql.execution.metric.SQLMetric) references[1];
/* 028 */     filter_result = new UnsafeRow(76);
/* 029 */     this.filter_holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(filter_result, 2368);
/* 030 */     this.filter_rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(filter_holder, 76);
/* 031 */     project_result = new UnsafeRow(76);
/* 032 */     this.project_holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(project_result, 2368);
/* 033 */     this.project_rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(project_holder, 76);
/* 034 */
/* 035 */   }
/* 036 */
/* 037 */   protected void processNext() throws java.io.IOException {
/* 038 */     while (scan_input.hasNext()) {
/* 039 */       InternalRow scan_row = (InternalRow) scan_input.next();
/* 040 */       scan_numOutputRows.add(1);
/* 041 */       boolean scan_isNull147 = scan_row.isNullAt(71);
/* 042 */       UTF8String scan_value147 = scan_isNull147 ? null : (scan_row.getUTF8String(71));
/* 043 */
/* 044 */       if (!(!(scan_isNull147))) continue;
/* 045 */
/* 046 */       boolean filter_isNull2 = false;
/* 047 */
/* 048 */       boolean filter_value2 = false;
/* 049 */       filter_value2 = scan_value147.equals(((UTF8String) references[2]));
/* 050 */       if (!filter_value2) continue;
/* 051 */
/* 052 */       filter_numOutputRows.add(1);
/* 053 */
/* 054 */       boolean scan_isNull76 = scan_row.isNullAt(0);
/* 055 */       Decimal scan_value76 = scan_isNull76 ? null : (scan_row.getDecimal(0, 38, 0));
/* 056 */       boolean scan_isNull77 = scan_row.isNullAt(1);
/* 057 */       UTF8String scan_value77 = scan_isNull77 ? null : (scan_row.getUTF8String(1));
/* 058 */       boolean scan_isNull78 = scan_row.isNullAt(2);
/* 059 */       Decimal scan_value78 = scan_isNull78 ? null : (scan_row.getDecimal(2, 38, 0));
/* 060 */       boolean scan_isNull79 = scan_row.isNullAt(3);
/* 061 */       Decimal scan_value79 = scan_isNull79 ? null : (scan_row.getDecimal(3, 38, 0));
/* 062 */       boolean scan_isNull80 = scan_row.isNullAt(4);
/* 063 */       Decimal scan_value80 = scan_isNull80 ? null : (scan_row.getDecimal(4, 38, 0));
/* 064 */       boolean scan_isNull81 = scan_row.isNullAt(5);
/* 065 */       Decimal scan_value81 = scan_isNull81 ? null : (scan_row.getDecimal(5, 38, 0));
/* 066 */       boolean scan_isNull82 = scan_row.isNullAt(6);
/* 067 */       Decimal scan_value82 = scan_isNull82 ? null : (scan_row.getDecimal(6, 38, 0));
/* 068 */       boolean scan_isNull83 = scan_row.isNullAt(7);
/* 069 */       UTF8String scan_value83 = scan_isNull83 ? null : (scan_row.getUTF8String(7));
/* 070 */       boolean scan_isNull84 = scan_row.isNullAt(8);
/* 071 */       UTF8String scan_value84 = scan_isNull84 ? null : (scan_row.getUTF8String(8));
/* 072 */       boolean scan_isNull85 = scan_row.isNullAt(9);
/* 073 */       UTF8String scan_value85 = scan_isNull85 ? null : (scan_row.getUTF8String(9));
/* 074 */       boolean scan_isNull86 = scan_row.isNullAt(10);
/* 075 */       Decimal scan_value86 = scan_isNull86 ? null : (scan_row.getDecimal(10, 38, 0));
/* 076 */       boolean scan_isNull87 = scan_row.isNullAt(11);
/* 077 */       Decimal scan_value87 = scan_isNull87 ? null : (scan_row.getDecimal(11, 38, 0));
/* 078 */       boolean scan_isNull88 = scan_row.isNullAt(12);
/* 079 */       Decimal scan_value88 = scan_isNull88 ? null : (scan_row.getDecimal(12, 38, 0));
/* 080 */       boolean scan_isNull89 = scan_row.isNullAt(13);
/* 081 */       UTF8String scan_value89 = scan_isNull89 ? null : (scan_row.getUTF8String(13));
/* 082 */       boolean scan_isNull90 = scan_row.isNullAt(14);
/* 083 */       UTF8String scan_value90 = scan_isNull90 ? null : (scan_row.getUTF8String(14));
/* 084 */       boolean scan_isNull91 = scan_row.isNullAt(15);
/* 085 */       UTF8String scan_value91 = scan_isNull91 ? null : (scan_row.getUTF8String(15));
/* 086 */       boolean scan_isNull92 = scan_row.isNullAt(16);
/* 087 */       UTF8String scan_value92 = scan_isNull92 ? null : (scan_row.getUTF8String(16));
/* 088 */       boolean scan_isNull93 = scan_row.isNullAt(17);
/* 089 */       Decimal scan_value93 = scan_isNull93 ? null : (scan_row.getDecimal(17, 38, 0));
/* 090 */       boolean scan_isNull94 = scan_row.isNullAt(18);
/* 091 */       UTF8String scan_value94 = scan_isNull94 ? null : (scan_row.getUTF8String(18));
/* 092 */       boolean scan_isNull95 = scan_row.isNullAt(19);
/* 093 */       Decimal scan_value95 = scan_isNull95 ? null : (scan_row.getDecimal(19, 38, 0));
/* 094 */       boolean scan_isNull96 = scan_row.isNullAt(20);
/* 095 */       Decimal scan_value96 = scan_isNull96 ? null : (scan_row.getDecimal(20, 38, 0));
/* 096 */       boolean scan_isNull97 = scan_row.isNullAt(21);
/* 097 */       Decimal scan_value97 = scan_isNull97 ? null : (scan_row.getDecimal(21, 38, 0));
/* 098 */       boolean scan_isNull98 = scan_row.isNullAt(22);
/* 099 */       Decimal scan_value98 = scan_isNull98 ? null : (scan_row.getDecimal(22, 38, 0));
/* 100 */       boolean scan_isNull99 = scan_row.isNullAt(23);
/* 101 */       Decimal scan_value99 = scan_isNull99 ? null : (scan_row.getDecimal(23, 38, 0));
/* 102 */       boolean scan_isNull100 = scan_row.isNullAt(24);
/* 103 */       UTF8String scan_value100 = scan_isNull100 ? null : (scan_row.getUTF8String(24));
/* 104 */       boolean scan_isNull101 = scan_row.isNullAt(25);
/* 105 */       UTF8String scan_value101 = scan_isNull101 ? null : (scan_row.getUTF8String(25));
/* 106 */       boolean scan_isNull102 = scan_row.isNullAt(26);
/* 107 */       UTF8String scan_value102 = scan_isNull102 ? null : (scan_row.getUTF8String(26));
/* 108 */       boolean scan_isNull103 = scan_row.isNullAt(27);
/* 109 */       UTF8String scan_value103 = scan_isNull103 ? null : (scan_row.getUTF8String(27));
/* 110 */       boolean scan_isNull104 = scan_row.isNullAt(28);
/* 111 */       Decimal scan_value104 = scan_isNull104 ? null : (scan_row.getDecimal(28, 38, 0));
/* 112 */       boolean scan_isNull105 = scan_row.isNullAt(29);
/* 113 */       Decimal scan_value105 = scan_isNull105 ? null : (scan_row.getDecimal(29, 38, 0));
/* 114 */       boolean scan_isNull106 = scan_row.isNullAt(30);
/* 115 */       Decimal scan_value106 = scan_isNull106 ? null : (scan_row.getDecimal(30, 38, 0));
/* 116 */       boolean scan_isNull107 = scan_row.isNullAt(31);
/* 117 */       UTF8String scan_value107 = scan_isNull107 ? null : (scan_row.getUTF8String(31));
/* 118 */       boolean scan_isNull108 = scan_row.isNullAt(32);
/* 119 */       UTF8String scan_value108 = scan_isNull108 ? null : (scan_row.getUTF8String(32));
/* 120 */       boolean scan_isNull109 = scan_row.isNullAt(33);
/* 121 */       UTF8String scan_value109 = scan_isNull109 ? null : (scan_row.getUTF8String(33));
/* 122 */       boolean scan_isNull110 = scan_row.isNullAt(34);
/* 123 */       UTF8String scan_value110 = scan_isNull110 ? null : (scan_row.getUTF8String(34));
/* 124 */       boolean scan_isNull111 = scan_row.isNullAt(35);
/* 125 */       Decimal scan_value111 = scan_isNull111 ? null : (scan_row.getDecimal(35, 38, 0));
/* 126 */       boolean scan_isNull112 = scan_row.isNullAt(36);
/* 127 */       UTF8String scan_value112 = scan_isNull112 ? null : (scan_row.getUTF8String(36));
/* 128 */       boolean scan_isNull113 = scan_row.isNullAt(37);
/* 129 */       Decimal scan_value113 = scan_isNull113 ? null : (scan_row.getDecimal(37, 38, 0));
/* 130 */       boolean scan_isNull114 = scan_row.isNullAt(38);
/* 131 */       Decimal scan_value114 = scan_isNull114 ? null : (scan_row.getDecimal(38, 38, 0));
/* 132 */       boolean scan_isNull115 = scan_row.isNullAt(39);
/* 133 */       Decimal scan_value115 = scan_isNull115 ? null : (scan_row.getDecimal(39, 38, 0));
/* 134 */       boolean scan_isNull116 = scan_row.isNullAt(40);
/* 135 */       Decimal scan_value116 = scan_isNull116 ? null : (scan_row.getDecimal(40, 38, 0));
/* 136 */       boolean scan_isNull117 = scan_row.isNullAt(41);
/* 137 */       Decimal scan_value117 = scan_isNull117 ? null : (scan_row.getDecimal(41, 38, 0));
/* 138 */       boolean scan_isNull118 = scan_row.isNullAt(42);
/* 139 */       UTF8String scan_value118 = scan_isNull118 ? null : (scan_row.getUTF8String(42));
/* 140 */       boolean scan_isNull119 = scan_row.isNullAt(43);
/* 141 */       UTF8String scan_value119 = scan_isNull119 ? null : (scan_row.getUTF8String(43));
/* 142 */       boolean scan_isNull120 = scan_row.isNullAt(44);
/* 143 */       UTF8String scan_value120 = scan_isNull120 ? null : (scan_row.getUTF8String(44));
/* 144 */       boolean scan_isNull121 = scan_row.isNullAt(45);
/* 145 */       UTF8String scan_value121 = scan_isNull121 ? null : (scan_row.getUTF8String(45));
/* 146 */       boolean scan_isNull122 = scan_row.isNullAt(46);
/* 147 */       Decimal scan_value122 = scan_isNull122 ? null : (scan_row.getDecimal(46, 38, 0));
/* 148 */       boolean scan_isNull123 = scan_row.isNullAt(47);
/* 149 */       Decimal scan_value123 = scan_isNull123 ? null : (scan_row.getDecimal(47, 38, 0));
/* 150 */       boolean scan_isNull124 = scan_row.isNullAt(48);
/* 151 */       Decimal scan_value124 = scan_isNull124 ? null : (scan_row.getDecimal(48, 38, 0));
/* 152 */       boolean scan_isNull125 = scan_row.isNullAt(49);
/* 153 */       UTF8String scan_value125 = scan_isNull125 ? null : (scan_row.getUTF8String(49));
/* 154 */       boolean scan_isNull126 = scan_row.isNullAt(50);
/* 155 */       UTF8String scan_value126 = scan_isNull126 ? null : (scan_row.getUTF8String(50));
/* 156 */       boolean scan_isNull127 = scan_row.isNullAt(51);
/* 157 */       UTF8String scan_value127 = scan_isNull127 ? null : (scan_row.getUTF8String(51));
/* 158 */       boolean scan_isNull128 = scan_row.isNullAt(52);
/* 159 */       UTF8String scan_value128 = scan_isNull128 ? null : (scan_row.getUTF8String(52));
/* 160 */       boolean scan_isNull129 = scan_row.isNullAt(53);
/* 161 */       Decimal scan_value129 = scan_isNull129 ? null : (scan_row.getDecimal(53, 38, 0));
/* 162 */       boolean scan_isNull130 = scan_row.isNullAt(54);
/* 163 */       UTF8String scan_value130 = scan_isNull130 ? null : (scan_row.getUTF8String(54));
/* 164 */       boolean scan_isNull131 = scan_row.isNullAt(55);
/* 165 */       Decimal scan_value131 = scan_isNull131 ? null : (scan_row.getDecimal(55, 38, 0));
/* 166 */       boolean scan_isNull132 = scan_row.isNullAt(56);
/* 167 */       Decimal scan_value132 = scan_isNull132 ? null : (scan_row.getDecimal(56, 38, 0));
/* 168 */       boolean scan_isNull133 = scan_row.isNullAt(57);
/* 169 */       Decimal scan_value133 = scan_isNull133 ? null : (scan_row.getDecimal(57, 38, 0));
/* 170 */       boolean scan_isNull134 = scan_row.isNullAt(58);
/* 171 */       Decimal scan_value134 = scan_isNull134 ? null : (scan_row.getDecimal(58, 38, 0));
/* 172 */       boolean scan_isNull135 = scan_row.isNullAt(59);
/* 173 */       Decimal scan_value135 = scan_isNull135 ? null : (scan_row.getDecimal(59, 38, 0));
/* 174 */       boolean scan_isNull136 = scan_row.isNullAt(60);
/* 175 */       UTF8String scan_value136 = scan_isNull136 ? null : (scan_row.getUTF8String(60));
/* 176 */       boolean scan_isNull137 = scan_row.isNullAt(61);
/* 177 */       UTF8String scan_value137 = scan_isNull137 ? null : (scan_row.getUTF8String(61));
/* 178 */       boolean scan_isNull138 = scan_row.isNullAt(62);
/* 179 */       UTF8String scan_value138 = scan_isNull138 ? null : (scan_row.getUTF8String(62));
/* 180 */       boolean scan_isNull139 = scan_row.isNullAt(63);
/* 181 */       UTF8String scan_value139 = scan_isNull139 ? null : (scan_row.getUTF8String(63));
/* 182 */       boolean scan_isNull140 = scan_row.isNullAt(64);
/* 183 */       Decimal scan_value140 = scan_isNull140 ? null : (scan_row.getDecimal(64, 38, 0));
/* 184 */       boolean scan_isNull141 = scan_row.isNullAt(65);
/* 185 */       Decimal scan_value141 = scan_isNull141 ? null : (scan_row.getDecimal(65, 38, 0));
/* 186 */       boolean scan_isNull142 = scan_row.isNullAt(66);
/* 187 */       Decimal scan_value142 = scan_isNull142 ? null : (scan_row.getDecimal(66, 38, 0));
/* 188 */       boolean scan_isNull143 = scan_row.isNullAt(67);
/* 189 */       UTF8String scan_value143 = scan_isNull143 ? null : (scan_row.getUTF8String(67));
/* 190 */       boolean scan_isNull144 = scan_row.isNullAt(68);
/* 191 */       UTF8String scan_value144 = scan_isNull144 ? null : (scan_row.getUTF8String(68));
/* 192 */       boolean scan_isNull145 = scan_row.isNullAt(69);
/* 193 */       UTF8String scan_value145 = scan_isNull145 ? null : (scan_row.getUTF8String(69));
/* 194 */       boolean scan_isNull146 = scan_row.isNullAt(70);
/* 195 */       UTF8String scan_value146 = scan_isNull146 ? null : (scan_row.getUTF8String(70));
/* 196 */       boolean scan_isNull148 = scan_row.isNullAt(72);
/* 197 */       long scan_value148 = scan_isNull148 ? -1L : (scan_row.getLong(72));
/* 198 */       boolean scan_isNull149 = scan_row.isNullAt(73);
/* 199 */       long scan_value149 = scan_isNull149 ? -1L : (scan_row.getLong(73));
/* 200 */       boolean scan_isNull150 = scan_row.isNullAt(74);
/* 201 */       UTF8String scan_value150 = scan_isNull150 ? null : (scan_row.getUTF8String(74));
/* 202 */       boolean scan_isNull151 = scan_row.isNullAt(75);
/* 203 */       UTF8String scan_value151 = scan_isNull151 ? null : (scan_row.getUTF8String(75));
/* 204 */       project_holder.reset();
/* 205 */
/* 206 */       project_rowWriter.zeroOutNullBytes();
/* 207 */
/* 208 */       if (scan_isNull76) {
/* 209 */         project_rowWriter.write(0, (Decimal) null, 38, 0);
/* 210 */       } else {
/* 211 */         project_rowWriter.write(0, scan_value76, 38, 0);
/* 212 */       }
/* 213 */
/* 214 */       if (scan_isNull77) {
/* 215 */         project_rowWriter.setNullAt(1);
/* 216 */       } else {
/* 217 */         project_rowWriter.write(1, scan_value77);
/* 218 */       }
/* 219 */
/* 220 */       if (scan_isNull78) {
/* 221 */         project_rowWriter.write(2, (Decimal) null, 38, 0);
/* 222 */       } else {
/* 223 */         project_rowWriter.write(2, scan_value78, 38, 0);
/* 224 */       }
/* 225 */
/* 226 */       if (scan_isNull79) {
/* 227 */         project_rowWriter.write(3, (Decimal) null, 38, 0);
/* 228 */       } else {
/* 229 */         project_rowWriter.write(3, scan_value79, 38, 0);
/* 230 */       }
/* 231 */
/* 232 */       if (scan_isNull80) {
/* 233 */         project_rowWriter.write(4, (Decimal) null, 38, 0);
/* 234 */       } else {
/* 235 */         project_rowWriter.write(4, scan_value80, 38, 0);
/* 236 */       }
/* 237 */
/* 238 */       if (scan_isNull81) {
/* 239 */         project_rowWriter.write(5, (Decimal) null, 38, 0);
/* 240 */       } else {
/* 241 */         project_rowWriter.write(5, scan_value81, 38, 0);
/* 242 */       }
/* 243 */
/* 244 */       if (scan_isNull82) {
/* 245 */         project_rowWriter.write(6, (Decimal) null, 38, 0);
/* 246 */       } else {
/* 247 */         project_rowWriter.write(6, scan_value82, 38, 0);
/* 248 */       }
/* 249 */
/* 250 */       if (scan_isNull83) {
/* 251 */         project_rowWriter.setNullAt(7);
/* 252 */       } else {
/* 253 */         project_rowWriter.write(7, scan_value83);
/* 254 */       }
/* 255 */
/* 256 */       if (scan_isNull84) {
/* 257 */         project_rowWriter.setNullAt(8);
/* 258 */       } else {
/* 259 */         project_rowWriter.write(8, scan_value84);
/* 260 */       }
/* 261 */
/* 262 */       if (scan_isNull85) {
/* 263 */         project_rowWriter.setNullAt(9);
/* 264 */       } else {
/* 265 */         project_rowWriter.write(9, scan_value85);
/* 266 */       }
/* 267 */
/* 268 */       if (scan_isNull86) {
/* 269 */         project_rowWriter.write(10, (Decimal) null, 38, 0);
/* 270 */       } else {
/* 271 */         project_rowWriter.write(10, scan_value86, 38, 0);
/* 272 */       }
/* 273 */
/* 274 */       if (scan_isNull87) {
/* 275 */         project_rowWriter.write(11, (Decimal) null, 38, 0);
/* 276 */       } else {
/* 277 */         project_rowWriter.write(11, scan_value87, 38, 0);
/* 278 */       }
/* 279 */
/* 280 */       if (scan_isNull88) {
/* 281 */         project_rowWriter.write(12, (Decimal) null, 38, 0);
/* 282 */       } else {
/* 283 */         project_rowWriter.write(12, scan_value88, 38, 0);
/* 284 */       }
/* 285 */
/* 286 */       if (scan_isNull89) {
/* 287 */         project_rowWriter.setNullAt(13);
/* 288 */       } else {
/* 289 */         project_rowWriter.write(13, scan_value89);
/* 290 */       }
/* 291 */
/* 292 */       if (scan_isNull90) {
/* 293 */         project_rowWriter.setNullAt(14);
/* 294 */       } else {
/* 295 */         project_rowWriter.write(14, scan_value90);
/* 296 */       }
/* 297 */
/* 298 */       if (scan_isNull91) {
/* 299 */         project_rowWriter.setNullAt(15);
/* 300 */       } else {
/* 301 */         project_rowWriter.write(15, scan_value91);
/* 302 */       }
/* 303 */
/* 304 */       if (scan_isNull92) {
/* 305 */         project_rowWriter.setNullAt(16);
/* 306 */       } else {
/* 307 */         project_rowWriter.write(16, scan_value92);
/* 308 */       }
/* 309 */
/* 310 */       if (scan_isNull93) {
/* 311 */         project_rowWriter.write(17, (Decimal) null, 38, 0);
/* 312 */       } else {
/* 313 */         project_rowWriter.write(17, scan_value93, 38, 0);
/* 314 */       }
/* 315 */
/* 316 */       if (scan_isNull94) {
/* 317 */         project_rowWriter.setNullAt(18);
/* 318 */       } else {
/* 319 */         project_rowWriter.write(18, scan_value94);
/* 320 */       }
/* 321 */
/* 322 */       if (scan_isNull95) {
/* 323 */         project_rowWriter.write(19, (Decimal) null, 38, 0);
/* 324 */       } else {
/* 325 */         project_rowWriter.write(19, scan_value95, 38, 0);
/* 326 */       }
/* 327 */
/* 328 */       if (scan_isNull96) {
/* 329 */         project_rowWriter.write(20, (Decimal) null, 38, 0);
/* 330 */       } else {
/* 331 */         project_rowWriter.write(20, scan_value96, 38, 0);
/* 332 */       }
/* 333 */
/* 334 */       if (scan_isNull97) {
/* 335 */         project_rowWriter.write(21, (Decimal) null, 38, 0);
/* 336 */       } else {
/* 337 */         project_rowWriter.write(21, scan_value97, 38, 0);
/* 338 */       }
/* 339 */
/* 340 */       if (scan_isNull98) {
/* 341 */         project_rowWriter.write(22, (Decimal) null, 38, 0);
/* 342 */       } else {
/* 343 */         project_rowWriter.write(22, scan_value98, 38, 0);
/* 344 */       }
/* 345 */
/* 346 */       if (scan_isNull99) {
/* 347 */         project_rowWriter.write(23, (Decimal) null, 38, 0);
/* 348 */       } else {
/* 349 */         project_rowWriter.write(23, scan_value99, 38, 0);
/* 350 */       }
/* 351 */
/* 352 */       if (scan_isNull100) {
/* 353 */         project_rowWriter.setNullAt(24);
/* 354 */       } else {
/* 355 */         project_rowWriter.write(24, scan_value100);
/* 356 */       }
/* 357 */
/* 358 */       if (scan_isNull101) {
/* 359 */         project_rowWriter.setNullAt(25);
/* 360 */       } else {
/* 361 */         project_rowWriter.write(25, scan_value101);
/* 362 */       }
/* 363 */
/* 364 */       if (scan_isNull102) {
/* 365 */         project_rowWriter.setNullAt(26);
/* 366 */       } else {
/* 367 */         project_rowWriter.write(26, scan_value102);
/* 368 */       }
/* 369 */
/* 370 */       if (scan_isNull103) {
/* 371 */         project_rowWriter.setNullAt(27);
/* 372 */       } else {
/* 373 */         project_rowWriter.write(27, scan_value103);
/* 374 */       }
/* 375 */
/* 376 */       if (scan_isNull104) {
/* 377 */         project_rowWriter.write(28, (Decimal) null, 38, 0);
/* 378 */       } else {
/* 379 */         project_rowWriter.write(28, scan_value104, 38, 0);
/* 380 */       }
/* 381 */
/* 382 */       if (scan_isNull105) {
/* 383 */         project_rowWriter.write(29, (Decimal) null, 38, 0);
/* 384 */       } else {
/* 385 */         project_rowWriter.write(29, scan_value105, 38, 0);
/* 386 */       }
/* 387 */
/* 388 */       if (scan_isNull106) {
/* 389 */         project_rowWriter.write(30, (Decimal) null, 38, 0);
/* 390 */       } else {
/* 391 */         project_rowWriter.write(30, scan_value106, 38, 0);
/* 392 */       }
/* 393 */
/* 394 */       if (scan_isNull107) {
/* 395 */         project_rowWriter.setNullAt(31);
/* 396 */       } else {
/* 397 */         project_rowWriter.write(31, scan_value107);
/* 398 */       }
/* 399 */
/* 400 */       if (scan_isNull108) {
/* 401 */         project_rowWriter.setNullAt(32);
/* 402 */       } else {
/* 403 */         project_rowWriter.write(32, scan_value108);
/* 404 */       }
/* 405 */
/* 406 */       if (scan_isNull109) {
/* 407 */         project_rowWriter.setNullAt(33);
/* 408 */       } else {
/* 409 */         project_rowWriter.write(33, scan_value109);
/* 410 */       }
/* 411 */
/* 412 */       if (scan_isNull110) {
/* 413 */         project_rowWriter.setNullAt(34);
/* 414 */       } else {
/* 415 */         project_rowWriter.write(34, scan_value110);
/* 416 */       }
/* 417 */
/* 418 */       if (scan_isNull111) {
/* 419 */         project_rowWriter.write(35, (Decimal) null, 38, 0);
/* 420 */       } else {
/* 421 */         project_rowWriter.write(35, scan_value111, 38, 0);
/* 422 */       }
/* 423 */
/* 424 */       if (scan_isNull112) {
/* 425 */         project_rowWriter.setNullAt(36);
/* 426 */       } else {
/* 427 */         project_rowWriter.write(36, scan_value112);
/* 428 */       }
/* 429 */
/* 430 */       if (scan_isNull113) {
/* 431 */         project_rowWriter.write(37, (Decimal) null, 38, 0);
/* 432 */       } else {
/* 433 */         project_rowWriter.write(37, scan_value113, 38, 0);
/* 434 */       }
/* 435 */
/* 436 */       if (scan_isNull114) {
/* 437 */         project_rowWriter.write(38, (Decimal) null, 38, 0);
/* 438 */       } else {
/* 439 */         project_rowWriter.write(38, scan_value114, 38, 0);
/* 440 */       }
/* 441 */
/* 442 */       if (scan_isNull115) {
/* 443 */         project_rowWriter.write(39, (Decimal) null, 38, 0);
/* 444 */       } else {
/* 445 */         project_rowWriter.write(39, scan_value115, 38, 0);
/* 446 */       }
/* 447 */
/* 448 */       if (scan_isNull116) {
/* 449 */         project_rowWriter.write(40, (Decimal) null, 38, 0);
/* 450 */       } else {
/* 451 */         project_rowWriter.write(40, scan_value116, 38, 0);
/* 452 */       }
/* 453 */
/* 454 */       if (scan_isNull117) {
/* 455 */         project_rowWriter.write(41, (Decimal) null, 38, 0);
/* 456 */       } else {
/* 457 */         project_rowWriter.write(41, scan_value117, 38, 0);
/* 458 */       }
/* 459 */
/* 460 */       if (scan_isNull118) {
/* 461 */         project_rowWriter.setNullAt(42);
/* 462 */       } else {
/* 463 */         project_rowWriter.write(42, scan_value118);
/* 464 */       }
/* 465 */
/* 466 */       if (scan_isNull119) {
/* 467 */         project_rowWriter.setNullAt(43);
/* 468 */       } else {
/* 469 */         project_rowWriter.write(43, scan_value119);
/* 470 */       }
/* 471 */
/* 472 */       if (scan_isNull120) {
/* 473 */         project_rowWriter.setNullAt(44);
/* 474 */       } else {
/* 475 */         project_rowWriter.write(44, scan_value120);
/* 476 */       }
/* 477 */
/* 478 */       if (scan_isNull121) {
/* 479 */         project_rowWriter.setNullAt(45);
/* 480 */       } else {
/* 481 */         project_rowWriter.write(45, scan_value121);
/* 482 */       }
/* 483 */
/* 484 */       if (scan_isNull122) {
/* 485 */         project_rowWriter.write(46, (Decimal) null, 38, 0);
/* 486 */       } else {
/* 487 */         project_rowWriter.write(46, scan_value122, 38, 0);
/* 488 */       }
/* 489 */
/* 490 */       if (scan_isNull123) {
/* 491 */         project_rowWriter.write(47, (Decimal) null, 38, 0);
/* 492 */       } else {
/* 493 */         project_rowWriter.write(47, scan_value123, 38, 0);
/* 494 */       }
/* 495 */
/* 496 */       if (scan_isNull124) {
/* 497 */         project_rowWriter.write(48, (Decimal) null, 38, 0);
/* 498 */       } else {
/* 499 */         project_rowWriter.write(48, scan_value124, 38, 0);
/* 500 */       }
/* 501 */
/* 502 */       if (scan_isNull125) {
/* 503 */         project_rowWriter.setNullAt(49);
/* 504 */       } else {
/* 505 */         project_rowWriter.write(49, scan_value125);
/* 506 */       }
/* 507 */
/* 508 */       if (scan_isNull126) {
/* 509 */         project_rowWriter.setNullAt(50);
/* 510 */       } else {
/* 511 */         project_rowWriter.write(50, scan_value126);
/* 512 */       }
/* 513 */
/* 514 */       if (scan_isNull127) {
/* 515 */         project_rowWriter.setNullAt(51);
/* 516 */       } else {
/* 517 */         project_rowWriter.write(51, scan_value127);
/* 518 */       }
/* 519 */
/* 520 */       if (scan_isNull128) {
/* 521 */         project_rowWriter.setNullAt(52);
/* 522 */       } else {
/* 523 */         project_rowWriter.write(52, scan_value128);
/* 524 */       }
/* 525 */
/* 526 */       if (scan_isNull129) {
/* 527 */         project_rowWriter.write(53, (Decimal) null, 38, 0);
/* 528 */       } else {
/* 529 */         project_rowWriter.write(53, scan_value129, 38, 0);
/* 530 */       }
/* 531 */
/* 532 */       if (scan_isNull130) {
/* 533 */         project_rowWriter.setNullAt(54);
/* 534 */       } else {
/* 535 */         project_rowWriter.write(54, scan_value130);
/* 536 */       }
/* 537 */
/* 538 */       if (scan_isNull131) {
/* 539 */         project_rowWriter.write(55, (Decimal) null, 38, 0);
/* 540 */       } else {
/* 541 */         project_rowWriter.write(55, scan_value131, 38, 0);
/* 542 */       }
/* 543 */
/* 544 */       if (scan_isNull132) {
/* 545 */         project_rowWriter.write(56, (Decimal) null, 38, 0);
/* 546 */       } else {
/* 547 */         project_rowWriter.write(56, scan_value132, 38, 0);
/* 548 */       }
/* 549 */
/* 550 */       if (scan_isNull133) {
/* 551 */         project_rowWriter.write(57, (Decimal) null, 38, 0);
/* 552 */       } else {
/* 553 */         project_rowWriter.write(57, scan_value133, 38, 0);
/* 554 */       }
/* 555 */
/* 556 */       if (scan_isNull134) {
/* 557 */         project_rowWriter.write(58, (Decimal) null, 38, 0);
/* 558 */       } else {
/* 559 */         project_rowWriter.write(58, scan_value134, 38, 0);
/* 560 */       }
/* 561 */
/* 562 */       if (scan_isNull135) {
/* 563 */         project_rowWriter.write(59, (Decimal) null, 38, 0);
/* 564 */       } else {
/* 565 */         project_rowWriter.write(59, scan_value135, 38, 0);
/* 566 */       }
/* 567 */
/* 568 */       if (scan_isNull136) {
/* 569 */         project_rowWriter.setNullAt(60);
/* 570 */       } else {
/* 571 */         project_rowWriter.write(60, scan_value136);
/* 572 */       }
/* 573 */
/* 574 */       if (scan_isNull137) {
/* 575 */         project_rowWriter.setNullAt(61);
/* 576 */       } else {
/* 577 */         project_rowWriter.write(61, scan_value137);
/* 578 */       }
/* 579 */
/* 580 */       if (scan_isNull138) {
/* 581 */         project_rowWriter.setNullAt(62);
/* 582 */       } else {
/* 583 */         project_rowWriter.write(62, scan_value138);
/* 584 */       }
/* 585 */
/* 586 */       if (scan_isNull139) {
/* 587 */         project_rowWriter.setNullAt(63);
/* 588 */       } else {
/* 589 */         project_rowWriter.write(63, scan_value139);
/* 590 */       }
/* 591 */
/* 592 */       if (scan_isNull140) {
/* 593 */         project_rowWriter.write(64, (Decimal) null, 38, 0);
/* 594 */       } else {
/* 595 */         project_rowWriter.write(64, scan_value140, 38, 0);
/* 596 */       }
/* 597 */
/* 598 */       if (scan_isNull141) {
/* 599 */         project_rowWriter.write(65, (Decimal) null, 38, 0);
/* 600 */       } else {
/* 601 */         project_rowWriter.write(65, scan_value141, 38, 0);
/* 602 */       }
/* 603 */
/* 604 */       if (scan_isNull142) {
/* 605 */         project_rowWriter.write(66, (Decimal) null, 38, 0);
/* 606 */       } else {
/* 607 */         project_rowWriter.write(66, scan_value142, 38, 0);
/* 608 */       }
/* 609 */
/* 610 */       if (scan_isNull143) {
/* 611 */         project_rowWriter.setNullAt(67);
/* 612 */       } else {
/* 613 */         project_rowWriter.write(67, scan_value143);
/* 614 */       }
/* 615 */
/* 616 */       if (scan_isNull144) {
/* 617 */         project_rowWriter.setNullAt(68);
/* 618 */       } else {
/* 619 */         project_rowWriter.write(68, scan_value144);
/* 620 */       }
/* 621 */
/* 622 */       if (scan_isNull145) {
/* 623 */         project_rowWriter.setNullAt(69);
/* 624 */       } else {
/* 625 */         project_rowWriter.write(69, scan_value145);
/* 626 */       }
/* 627 */
/* 628 */       if (scan_isNull146) {
/* 629 */         project_rowWriter.setNullAt(70);
/* 630 */       } else {
/* 631 */         project_rowWriter.write(70, scan_value146);
/* 632 */       }
/* 633 */
/* 634 */       project_rowWriter.write(71, scan_value147);
/* 635 */
/* 636 */       if (scan_isNull148) {
/* 637 */         project_rowWriter.setNullAt(72);
/* 638 */       } else {
/* 639 */         project_rowWriter.write(72, scan_value148);
/* 640 */       }
/* 641 */
/* 642 */       if (scan_isNull149) {
/* 643 */         project_rowWriter.setNullAt(73);
/* 644 */       } else {
/* 645 */         project_rowWriter.write(73, scan_value149);
/* 646 */       }
/* 647 */
/* 648 */       if (scan_isNull150) {
/* 649 */         project_rowWriter.setNullAt(74);
/* 650 */       } else {
/* 651 */         project_rowWriter.write(74, scan_value150);
/* 652 */       }
/* 653 */
/* 654 */       if (scan_isNull151) {
/* 655 */         project_rowWriter.setNullAt(75);
/* 656 */       } else {
/* 657 */         project_rowWriter.write(75, scan_value151);
/* 658 */       }
/* 659 */       project_result.setTotalSize(project_holder.totalSize());
/* 660 */       append(project_result);
/* 661 */       if (shouldStop()) return;
/* 662 */     }
/* 663 */   }
/* 664 */ }

17/11/03 15:20:17 INFO MemoryStore: Block broadcast_3 stored as values in memory (estimated size 339.4 KB, free 365.6 MB)
17/11/03 15:20:17 DEBUG BlockManager: Put block broadcast_3 locally took  6 ms
17/11/03 15:20:17 DEBUG BlockManager: Putting block broadcast_3 without replication took  6 ms
17/11/03 15:20:17 INFO MemoryStore: Block broadcast_3_piece0 stored as bytes in memory (estimated size 29.5 KB, free 365.5 MB)
17/11/03 15:20:17 INFO BlockManagerInfo: Added broadcast_3_piece0 in memory on 172.30.1.247:44297 (size: 29.5 KB, free: 366.2 MB)
17/11/03 15:20:17 DEBUG BlockManagerMaster: Updated info of block broadcast_3_piece0
17/11/03 15:20:17 DEBUG BlockManager: Told master about block broadcast_3_piece0
17/11/03 15:20:17 DEBUG BlockManager: Put block broadcast_3_piece0 locally took  1 ms
17/11/03 15:20:17 DEBUG BlockManager: Putting block broadcast_3_piece0 without replication took  1 ms
17/11/03 15:20:17 INFO SparkContext: Created broadcast 3 from take at <console>:26
17/11/03 15:20:17 INFO FileSourceScanExec: Planning with 3 buckets
17/11/03 15:20:17 DEBUG ClosureCleaner: +++ Cleaning closure <function2> (org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8) +++
17/11/03 15:20:17 DEBUG ClosureCleaner:  + declared fields: 4
17/11/03 15:20:17 DEBUG ClosureCleaner:      public static final long org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.serialVersionUID
17/11/03 15:20:17 DEBUG ClosureCleaner:      private final org.apache.spark.sql.catalyst.expressions.codegen.CodeAndComment org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.cleanedSource$2
17/11/03 15:20:17 DEBUG ClosureCleaner:      private final java.lang.Object[] org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.references$1
17/11/03 15:20:17 DEBUG ClosureCleaner:      public final org.apache.spark.sql.execution.metric.SQLMetric org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.durationMs$1
17/11/03 15:20:17 DEBUG ClosureCleaner:  + declared methods: 2
17/11/03 15:20:17 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.apply(java.lang.Object,java.lang.Object)
17/11/03 15:20:17 DEBUG ClosureCleaner:      public final scala.collection.Iterator org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.apply(int,scala.collection.Iterator)
17/11/03 15:20:17 DEBUG ClosureCleaner:  + inner classes: 1
17/11/03 15:20:17 DEBUG ClosureCleaner:      org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1
17/11/03 15:20:17 DEBUG ClosureCleaner:  + outer classes: 0
17/11/03 15:20:17 DEBUG ClosureCleaner:  + outer objects: 0
17/11/03 15:20:17 DEBUG ClosureCleaner:  + populating accessed fields because this is the starting closure
17/11/03 15:20:17 DEBUG ClosureCleaner:  + fields accessed by starting closure: 0
17/11/03 15:20:17 DEBUG ClosureCleaner:  + there are no enclosing objects!
17/11/03 15:20:17 DEBUG ClosureCleaner:  +++ closure <function2> (org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8) is now cleaned +++
17/11/03 15:20:17 DEBUG ClosureCleaner: +++ Cleaning closure <function1> (org.apache.spark.sql.execution.SparkPlan$$anonfun$3) +++
17/11/03 15:20:17 DEBUG ClosureCleaner:  + declared fields: 1
17/11/03 15:20:17 DEBUG ClosureCleaner:      public static final long org.apache.spark.sql.execution.SparkPlan$$anonfun$3.serialVersionUID
17/11/03 15:20:17 DEBUG ClosureCleaner:  + declared methods: 2
17/11/03 15:20:17 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.sql.execution.SparkPlan$$anonfun$3.apply(java.lang.Object)
17/11/03 15:20:17 DEBUG ClosureCleaner:      public final byte[] org.apache.spark.sql.execution.SparkPlan$$anonfun$3.apply(scala.collection.Iterator)
17/11/03 15:20:17 DEBUG ClosureCleaner:  + inner classes: 0
17/11/03 15:20:17 DEBUG ClosureCleaner:  + outer classes: 0
17/11/03 15:20:17 DEBUG ClosureCleaner:  + outer objects: 0
17/11/03 15:20:17 DEBUG ClosureCleaner:  + populating accessed fields because this is the starting closure
17/11/03 15:20:17 DEBUG ClosureCleaner:  + fields accessed by starting closure: 0
17/11/03 15:20:17 DEBUG ClosureCleaner:  + there are no enclosing objects!
17/11/03 15:20:17 DEBUG ClosureCleaner:  +++ closure <function1> (org.apache.spark.sql.execution.SparkPlan$$anonfun$3) is now cleaned +++
17/11/03 15:20:17 DEBUG ClosureCleaner: +++ Cleaning closure <function2> (org.apache.spark.SparkContext$$anonfun$runJob$5) +++
17/11/03 15:20:17 DEBUG ClosureCleaner:  + declared fields: 2
17/11/03 15:20:17 DEBUG ClosureCleaner:      public static final long org.apache.spark.SparkContext$$anonfun$runJob$5.serialVersionUID
17/11/03 15:20:17 DEBUG ClosureCleaner:      private final scala.Function1 org.apache.spark.SparkContext$$anonfun$runJob$5.cleanedFunc$1
17/11/03 15:20:17 DEBUG ClosureCleaner:  + declared methods: 2
17/11/03 15:20:17 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.SparkContext$$anonfun$runJob$5.apply(java.lang.Object,java.lang.Object)
17/11/03 15:20:17 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.SparkContext$$anonfun$runJob$5.apply(org.apache.spark.TaskContext,scala.collection.Iterator)
17/11/03 15:20:17 DEBUG ClosureCleaner:  + inner classes: 0
17/11/03 15:20:17 DEBUG ClosureCleaner:  + outer classes: 0
17/11/03 15:20:17 DEBUG ClosureCleaner:  + outer objects: 0
17/11/03 15:20:17 DEBUG ClosureCleaner:  + populating accessed fields because this is the starting closure
17/11/03 15:20:17 DEBUG ClosureCleaner:  + fields accessed by starting closure: 0
17/11/03 15:20:17 DEBUG ClosureCleaner:  + there are no enclosing objects!
17/11/03 15:20:17 DEBUG ClosureCleaner:  +++ closure <function2> (org.apache.spark.SparkContext$$anonfun$runJob$5) is now cleaned +++
17/11/03 15:20:17 INFO SparkContext: Starting job: take at <console>:26
17/11/03 15:20:17 INFO DAGScheduler: Got job 2 (take at <console>:26) with 1 output partitions
17/11/03 15:20:17 INFO DAGScheduler: Final stage: ResultStage 2 (take at <console>:26)
17/11/03 15:20:17 INFO DAGScheduler: Parents of final stage: List()
17/11/03 15:20:17 INFO DAGScheduler: Missing parents: List()
17/11/03 15:20:17 DEBUG DAGScheduler: submitStage(ResultStage 2)
17/11/03 15:20:17 DEBUG DAGScheduler: missing: List()
17/11/03 15:20:17 INFO DAGScheduler: Submitting ResultStage 2 (MapPartitionsRDD[5] at take at <console>:26), which has no missing parents
17/11/03 15:20:17 DEBUG DAGScheduler: submitMissingTasks(ResultStage 2)
17/11/03 15:20:17 INFO MemoryStore: Block broadcast_4 stored as values in memory (estimated size 37.3 KB, free 365.5 MB)
17/11/03 15:20:17 DEBUG BlockManager: Put block broadcast_4 locally took  1 ms
17/11/03 15:20:17 DEBUG BlockManager: Putting block broadcast_4 without replication took  1 ms
17/11/03 15:20:17 INFO MemoryStore: Block broadcast_4_piece0 stored as bytes in memory (estimated size 11.1 KB, free 365.5 MB)
17/11/03 15:20:17 INFO BlockManagerInfo: Added broadcast_4_piece0 in memory on 172.30.1.247:44297 (size: 11.1 KB, free: 366.2 MB)
17/11/03 15:20:17 DEBUG BlockManagerMaster: Updated info of block broadcast_4_piece0
17/11/03 15:20:17 DEBUG BlockManager: Told master about block broadcast_4_piece0
17/11/03 15:20:17 DEBUG BlockManager: Put block broadcast_4_piece0 locally took  1 ms
17/11/03 15:20:17 DEBUG BlockManager: Putting block broadcast_4_piece0 without replication took  1 ms
17/11/03 15:20:17 INFO SparkContext: Created broadcast 4 from broadcast at DAGScheduler.scala:1006
17/11/03 15:20:17 INFO DAGScheduler: Submitting 1 missing tasks from ResultStage 2 (MapPartitionsRDD[5] at take at <console>:26) (first 15 tasks are for partitions Vector(0))
17/11/03 15:20:17 INFO TaskSchedulerImpl: Adding task set 2.0 with 1 tasks
17/11/03 15:20:17 DEBUG TaskSetManager: Epoch for TaskSet 2.0: 0
17/11/03 15:20:17 DEBUG TaskSetManager: Valid locality levels for TaskSet 2.0: ANY
17/11/03 15:20:17 DEBUG TaskSchedulerImpl: parentName: , name: TaskSet_2.0, runningTasks: 0
17/11/03 15:20:17 INFO TaskSetManager: Starting task 0.0 in stage 2.0 (TID 3, localhost, executor driver, partition 0, ANY, 7169 bytes)
17/11/03 15:20:17 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=12, src=/spark2-history/local-1509722002203.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=75776
17/11/03 15:20:17 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=76141 lastFlushOffset=76015 createNewBlock=false
17/11/03 15:20:17 DEBUG DFSClient: Queued packet 12
17/11/03 15:20:17 DEBUG DFSClient: Waiting for ack for: 12
17/11/03 15:20:17 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: 12 offsetInBlock: 75776 lastPacketInBlock: false lastByteOffsetInBlock: 76141
17/11/03 15:20:17 INFO Executor: Running task 0.0 in stage 2.0 (TID 3)
17/11/03 15:20:17 DEBUG DFSClient: DFSClient seqno: 12 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 855133 flag: 0 flag: 0 flag: 0
17/11/03 15:20:17 DEBUG Executor: Task 3's epoch is 0
17/11/03 15:20:17 DEBUG BlockManager: Getting local block broadcast_4
17/11/03 15:20:17 DEBUG BlockManager: Level for block broadcast_4 is StorageLevel(disk, memory, deserialized, 1 replicas)
17/11/03 15:20:17 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=13, src=/spark2-history/local-1509722002203.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=75776
17/11/03 15:20:17 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=78475 lastFlushOffset=76141 createNewBlock=false
17/11/03 15:20:17 DEBUG DFSClient: Queued packet 13
17/11/03 15:20:17 DEBUG DFSClient: Waiting for ack for: 13
17/11/03 15:20:17 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: 13 offsetInBlock: 75776 lastPacketInBlock: false lastByteOffsetInBlock: 78475
17/11/03 15:20:17 DEBUG DFSClient: DFSClient seqno: 13 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 1312276 flag: 0 flag: 0 flag: 0
17/11/03 15:20:17 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, range: 0-1947011, partition values: [empty row]
17/11/03 15:20:17 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:20:17 DEBUG BlockManager: Getting local block broadcast_3
17/11/03 15:20:17 DEBUG BlockManager: Level for block broadcast_3 is StorageLevel(disk, memory, deserialized, 1 replicas)
17/11/03 15:20:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #265
17/11/03 15:20:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #265
17/11/03 15:20:17 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:20:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #266
17/11/03 15:20:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #266
17/11/03 15:20:17 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:20:17 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1947011
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043356_302585; getBlockSize()=1947011; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043356_302585; getBlockSize()=1947011; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:20:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #267
17/11/03 15:20:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #267
17/11/03 15:20:17 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:20:17 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:20:17 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043356_302585): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:17 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:20:17 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:20:17 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:20:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #268
17/11/03 15:20:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #268
17/11/03 15:20:17 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:20:17 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1947011
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043356_302585; getBlockSize()=1947011; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043356_302585; getBlockSize()=1947011; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:20:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #269
17/11/03 15:20:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #269
17/11/03 15:20:17 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:20:17 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:20:17 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043356_302585): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:17 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:20:17 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 1947011}
17/11/03 15:20:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #270
17/11/03 15:20:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #270
17/11/03 15:20:17 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:20:17 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1947011
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043356_302585; getBlockSize()=1947011; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043356_302585; getBlockSize()=1947011; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:20:17 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:20:17 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:20:17 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043356_302585): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:17 DEBUG RecordReaderImpl: chunks = [range start: 19991 end: 1063704]
17/11/03 15:20:17 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:20:17 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043356_302585): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:17 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:20:18 DEBUG RecordReaderImpl: merge = [data range [19991, 1063704), size: 1043713 type: array-backed]
17/11/03 15:20:18 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:20:23 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #271
17/11/03 15:20:23 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #271
17/11/03 15:20:23 DEBUG ProtobufRpcEngine: Call: renewLease took 2ms
17/11/03 15:20:23 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-775905044_1
17/11/03 15:20:23 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-775905044_1] with renew id 1 executed
17/11/03 15:20:24 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:20:24 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043356_302585): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:24 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:20:24 DEBUG RecordReaderImpl: chunks = [range start: 12321 end: 529761]
17/11/03 15:20:24 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:20:24 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043356_302585): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:24 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:20:24 DEBUG RecordReaderImpl: merge = [data range [12321, 529761), size: 517440 type: array-backed]
17/11/03 15:20:28 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:20:28 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043356_302585): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:28 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:20:28 DEBUG RecordReaderImpl: chunks = [range start: 10049 end: 343418]
17/11/03 15:20:28 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:20:28 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043356_302585): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:28 DEBUG RecordReaderImpl: merge = [data range [10049, 343418), size: 333369 type: array-backed]
17/11/03 15:20:30 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, range: 0-3852449, partition values: [empty row]
17/11/03 15:20:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #272
17/11/03 15:20:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #272
17/11/03 15:20:30 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:20:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #273
17/11/03 15:20:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #273
17/11/03 15:20:30 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:20:30 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3852449
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596; getBlockSize()=3852449; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596; getBlockSize()=3852449; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:20:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #274
17/11/03 15:20:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #274
17/11/03 15:20:30 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:20:30 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:20:30 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:30 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:20:30 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:20:30 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:20:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #275
17/11/03 15:20:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #275
17/11/03 15:20:30 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:20:30 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3852449
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596; getBlockSize()=3852449; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596; getBlockSize()=3852449; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:20:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #276
17/11/03 15:20:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #276
17/11/03 15:20:30 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:20:30 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:20:30 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:30 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:20:30 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:20:30 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 3852449}
17/11/03 15:20:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #277
17/11/03 15:20:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #277
17/11/03 15:20:30 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:20:30 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3852449
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596; getBlockSize()=3852449; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596; getBlockSize()=3852449; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:20:30 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:20:30 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:30 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:30 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:20:30 DEBUG RecordReaderImpl: chunks = [range start: 20290 end: 986323]
17/11/03 15:20:30 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:30 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:30 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:20:30 DEBUG RecordReaderImpl: merge = [data range [20290, 986323), size: 966033 type: array-backed]
17/11/03 15:20:30 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:20:36 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:36 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:36 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:20:36 DEBUG RecordReaderImpl: chunks = [range start: 12438 end: 522863]
17/11/03 15:20:36 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:36 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:36 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:20:36 DEBUG RecordReaderImpl: merge = [data range [12438, 522863), size: 510425 type: array-backed]
17/11/03 15:20:40 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:40 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:40 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:20:40 DEBUG RecordReaderImpl: chunks = [range start: 11583 end: 573085]
17/11/03 15:20:40 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:40 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:40 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:20:40 DEBUG RecordReaderImpl: merge = [data range [11583, 573085), size: 561502 type: array-backed]
17/11/03 15:20:43 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:43 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:43 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:20:43 DEBUG RecordReaderImpl: chunks = [range start: 11329 end: 542699]
17/11/03 15:20:43 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:43 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:43 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:20:43 DEBUG RecordReaderImpl: merge = [data range [11329, 542699), size: 531370 type: array-backed]
17/11/03 15:20:46 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:46 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:46 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:20:46 DEBUG RecordReaderImpl: chunks = [range start: 12983 end: 519174]
17/11/03 15:20:46 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:46 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:46 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:20:46 DEBUG RecordReaderImpl: merge = [data range [12983, 519174), size: 506191 type: array-backed]
17/11/03 15:20:47 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 15:20:47 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 687049 flag: 0 flag: 0 flag: 0
17/11/03 15:20:50 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:50 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:50 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:20:50 DEBUG RecordReaderImpl: chunks = [range start: 14003 end: 536989]
17/11/03 15:20:50 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:50 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:50 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:20:50 DEBUG RecordReaderImpl: merge = [data range [14003, 536989), size: 522986 type: array-backed]
17/11/03 15:20:53 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #278
17/11/03 15:20:53 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #278
17/11/03 15:20:53 DEBUG ProtobufRpcEngine: Call: renewLease took 1ms
17/11/03 15:20:53 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-775905044_1
17/11/03 15:20:53 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-775905044_1] with renew id 1 executed
17/11/03 15:20:53 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:53 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:53 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:20:53 DEBUG RecordReaderImpl: chunks = [range start: 7043 end: 150670]
17/11/03 15:20:53 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:53 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043367_302596): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:53 DEBUG RecordReaderImpl: merge = [data range [7043, 150670), size: 143627 type: array-backed]
17/11/03 15:20:54 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00003-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, range: 0-1877231, partition values: [empty row]
17/11/03 15:20:54 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #279
17/11/03 15:20:54 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #279
17/11/03 15:20:54 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:20:54 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #280
17/11/03 15:20:54 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #280
17/11/03 15:20:54 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:20:54 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1877231
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043346_302575; getBlockSize()=1877231; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043346_302575; getBlockSize()=1877231; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:20:54 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #281
17/11/03 15:20:54 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #281
17/11/03 15:20:54 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:20:54 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:54 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00003-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043346_302575): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:54 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00003-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:20:54 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:20:54 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #282
17/11/03 15:20:54 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #282
17/11/03 15:20:54 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:20:54 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1877231
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043346_302575; getBlockSize()=1877231; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043346_302575; getBlockSize()=1877231; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:20:54 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #283
17/11/03 15:20:54 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #283
17/11/03 15:20:54 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:20:54 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:20:54 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00003-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043346_302575): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:54 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:20:54 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:20:54 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00003-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 1877231}
17/11/03 15:20:54 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #284
17/11/03 15:20:54 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #284
17/11/03 15:20:54 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:20:54 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1877231
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043346_302575; getBlockSize()=1877231; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043346_302575; getBlockSize()=1877231; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:20:54 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:20:54 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:54 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00003-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043346_302575): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:54 DEBUG RecordReaderImpl: chunks = [range start: 20209 end: 997768]
17/11/03 15:20:54 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:20:54 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00003-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043346_302575): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:20:54 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:20:54 DEBUG RecordReaderImpl: merge = [data range [20209, 997768), size: 977559 type: array-backed]
17/11/03 15:20:54 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:21:00 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00003-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043346_302575): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:00 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:21:00 DEBUG RecordReaderImpl: chunks = [range start: 11859 end: 507659]
17/11/03 15:21:00 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00003-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043346_302575): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:00 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:21:00 DEBUG RecordReaderImpl: merge = [data range [11859, 507659), size: 495800 type: array-backed]
17/11/03 15:21:03 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:03 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00003-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043346_302575): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:03 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:21:03 DEBUG RecordReaderImpl: chunks = [range start: 11482 end: 361491]
17/11/03 15:21:03 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:03 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00003-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043346_302575): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:03 DEBUG RecordReaderImpl: merge = [data range [11482, 361491), size: 350009 type: array-backed]
17/11/03 15:21:06 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, range: 0-1982074, partition values: [empty row]
17/11/03 15:21:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #285
17/11/03 15:21:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #285
17/11/03 15:21:06 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:21:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #286
17/11/03 15:21:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #286
17/11/03 15:21:06 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:21:06 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1982074
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043402_302631; getBlockSize()=1982074; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043402_302631; getBlockSize()=1982074; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #287
17/11/03 15:21:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #287
17/11/03 15:21:06 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:21:06 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:06 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043402_302631): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:06 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:21:06 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:21:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #288
17/11/03 15:21:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #288
17/11/03 15:21:06 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 5ms
17/11/03 15:21:06 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1982074
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043402_302631; getBlockSize()=1982074; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043402_302631; getBlockSize()=1982074; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #289
17/11/03 15:21:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #289
17/11/03 15:21:06 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:21:06 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:21:06 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043402_302631): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:06 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:21:06 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:21:06 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 1982074}
17/11/03 15:21:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #290
17/11/03 15:21:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #290
17/11/03 15:21:06 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:21:06 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1982074
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043402_302631; getBlockSize()=1982074; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043402_302631; getBlockSize()=1982074; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:06 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:21:06 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:21:06 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043402_302631): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:06 DEBUG RecordReaderImpl: chunks = [range start: 20349 end: 1012954]
17/11/03 15:21:06 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:21:06 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043402_302631): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:06 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:21:06 DEBUG RecordReaderImpl: merge = [data range [20349, 1012954), size: 992605 type: array-backed]
17/11/03 15:21:06 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:21:12 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:21:12 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043402_302631): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:12 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:21:12 DEBUG RecordReaderImpl: chunks = [range start: 12270 end: 543626]
17/11/03 15:21:12 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:21:12 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043402_302631): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:12 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:21:12 DEBUG RecordReaderImpl: merge = [data range [12270, 543626), size: 531356 type: array-backed]
17/11/03 15:21:15 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:21:15 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043402_302631): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:15 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:21:15 DEBUG RecordReaderImpl: chunks = [range start: 11789 end: 415251]
17/11/03 15:21:15 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:21:15 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043402_302631): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:15 DEBUG RecordReaderImpl: merge = [data range [11789, 415251), size: 403462 type: array-backed]
17/11/03 15:21:17 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 15:21:17 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 643619 flag: 0 flag: 0 flag: 0
17/11/03 15:21:18 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, range: 0-898460, partition values: [empty row]
17/11/03 15:21:18 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #291
17/11/03 15:21:18 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #291
17/11/03 15:21:18 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:21:18 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #292
17/11/03 15:21:18 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #292
17/11/03 15:21:18 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:21:18 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=898460
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043399_302628; getBlockSize()=898460; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043399_302628; getBlockSize()=898460; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:18 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #293
17/11/03 15:21:18 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #293
17/11/03 15:21:18 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:21:18 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:21:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043399_302628): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:18 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:21:18 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:21:18 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:21:18 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #294
17/11/03 15:21:18 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #294
17/11/03 15:21:18 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:21:18 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=898460
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043399_302628; getBlockSize()=898460; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043399_302628; getBlockSize()=898460; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:18 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #295
17/11/03 15:21:18 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #295
17/11/03 15:21:18 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:21:18 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043399_302628): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:18 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:21:18 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:21:18 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 898460}
17/11/03 15:21:18 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #296
17/11/03 15:21:18 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #296
17/11/03 15:21:18 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:21:18 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=898460
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043399_302628; getBlockSize()=898460; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043399_302628; getBlockSize()=898460; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:18 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:21:18 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:21:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043399_302628): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:18 DEBUG RecordReaderImpl: chunks = [range start: 18044 end: 893820]
17/11/03 15:21:18 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:21:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043399_302628): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:18 DEBUG RecordReaderImpl: merge = [data range [18044, 893820), size: 875776 type: array-backed]
17/11/03 15:21:18 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:21:22 DEBUG ContextCleaner: Got cleaning task CleanAccum(3)
17/11/03 15:21:22 DEBUG ContextCleaner: Cleaning accumulator 3
17/11/03 15:21:22 INFO ContextCleaner: Cleaned accumulator 3
17/11/03 15:21:22 DEBUG ContextCleaner: Got cleaning task CleanAccum(1)
17/11/03 15:21:22 DEBUG ContextCleaner: Cleaning accumulator 1
17/11/03 15:21:22 INFO ContextCleaner: Cleaned accumulator 1
17/11/03 15:21:22 DEBUG ContextCleaner: Got cleaning task CleanBroadcast(2)
17/11/03 15:21:22 DEBUG ContextCleaner: Cleaning broadcast 2
17/11/03 15:21:22 DEBUG TorrentBroadcast: Unpersisting TorrentBroadcast 2
17/11/03 15:21:22 DEBUG BlockManagerSlaveEndpoint: removing broadcast 2
17/11/03 15:21:22 DEBUG BlockManager: Removing broadcast 2
17/11/03 15:21:22 DEBUG BlockManager: Removing block broadcast_2_piece0
17/11/03 15:21:22 DEBUG MemoryStore: Block broadcast_2_piece0 of size 11421 dropped from memory (free 383250036)
17/11/03 15:21:22 INFO BlockManagerInfo: Removed broadcast_2_piece0 on 172.30.1.247:44297 in memory (size: 11.2 KB, free: 366.2 MB)
17/11/03 15:21:22 DEBUG BlockManagerMaster: Updated info of block broadcast_2_piece0
17/11/03 15:21:22 DEBUG BlockManager: Told master about block broadcast_2_piece0
17/11/03 15:21:22 DEBUG BlockManager: Removing block broadcast_2
17/11/03 15:21:22 DEBUG MemoryStore: Block broadcast_2 of size 38184 dropped from memory (free 383288220)
17/11/03 15:21:22 DEBUG BlockManagerSlaveEndpoint: Done removing broadcast 2, response is 0
17/11/03 15:21:22 DEBUG BlockManagerSlaveEndpoint: Sent response: 0 to 172.30.1.247:54343
17/11/03 15:21:22 DEBUG ContextCleaner: Cleaned broadcast 2
17/11/03 15:21:22 DEBUG ContextCleaner: Got cleaning task CleanAccum(5)
17/11/03 15:21:22 DEBUG ContextCleaner: Cleaning accumulator 5
17/11/03 15:21:22 INFO ContextCleaner: Cleaned accumulator 5
17/11/03 15:21:22 DEBUG ContextCleaner: Got cleaning task CleanAccum(2)
17/11/03 15:21:22 DEBUG ContextCleaner: Cleaning accumulator 2
17/11/03 15:21:22 INFO ContextCleaner: Cleaned accumulator 2
17/11/03 15:21:22 DEBUG ContextCleaner: Got cleaning task CleanBroadcast(0)
17/11/03 15:21:22 DEBUG ContextCleaner: Cleaning broadcast 0
17/11/03 15:21:22 DEBUG TorrentBroadcast: Unpersisting TorrentBroadcast 0
17/11/03 15:21:22 DEBUG BlockManagerSlaveEndpoint: removing broadcast 0
17/11/03 15:21:22 DEBUG BlockManager: Removing broadcast 0
17/11/03 15:21:22 DEBUG BlockManager: Removing block broadcast_0_piece0
17/11/03 15:21:22 DEBUG MemoryStore: Block broadcast_0_piece0 of size 30212 dropped from memory (free 383318432)
17/11/03 15:21:22 INFO BlockManagerInfo: Removed broadcast_0_piece0 on 172.30.1.247:44297 in memory (size: 29.5 KB, free: 366.3 MB)
17/11/03 15:21:22 DEBUG BlockManagerMaster: Updated info of block broadcast_0_piece0
17/11/03 15:21:22 DEBUG BlockManager: Told master about block broadcast_0_piece0
17/11/03 15:21:22 DEBUG BlockManager: Removing block broadcast_0
17/11/03 15:21:22 DEBUG MemoryStore: Block broadcast_0 of size 347576 dropped from memory (free 383666008)
17/11/03 15:21:22 DEBUG BlockManagerSlaveEndpoint: Done removing broadcast 0, response is 0
17/11/03 15:21:22 DEBUG BlockManagerSlaveEndpoint: Sent response: 0 to 172.30.1.247:54343
17/11/03 15:21:22 DEBUG ContextCleaner: Cleaned broadcast 0
17/11/03 15:21:22 DEBUG ContextCleaner: Got cleaning task CleanAccum(4)
17/11/03 15:21:22 DEBUG ContextCleaner: Cleaning accumulator 4
17/11/03 15:21:22 INFO ContextCleaner: Cleaned accumulator 4
17/11/03 15:21:22 DEBUG ContextCleaner: Got cleaning task CleanAccum(0)
17/11/03 15:21:22 DEBUG ContextCleaner: Cleaning accumulator 0
17/11/03 15:21:22 INFO ContextCleaner: Cleaned accumulator 0
17/11/03 15:21:23 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #297
17/11/03 15:21:23 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #297
17/11/03 15:21:23 DEBUG ProtobufRpcEngine: Call: renewLease took 0ms
17/11/03 15:21:23 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-775905044_1
17/11/03 15:21:23 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-775905044_1] with renew id 1 executed
17/11/03 15:21:24 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00007-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, range: 0-946697, partition values: [empty row]
17/11/03 15:21:24 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #298
17/11/03 15:21:24 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #298
17/11/03 15:21:24 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:21:24 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #299
17/11/03 15:21:24 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #299
17/11/03 15:21:24 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:21:24 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=946697
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043393_302622; getBlockSize()=946697; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043393_302622; getBlockSize()=946697; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:24 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #300
17/11/03 15:21:24 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #300
17/11/03 15:21:24 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:21:24 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:24 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00007-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043393_302622): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:24 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:21:24 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00007-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:21:24 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:21:24 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #301
17/11/03 15:21:24 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #301
17/11/03 15:21:24 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:21:24 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=946697
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043393_302622; getBlockSize()=946697; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043393_302622; getBlockSize()=946697; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:24 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #302
17/11/03 15:21:24 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #302
17/11/03 15:21:24 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:21:24 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:21:24 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00007-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043393_302622): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:24 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:21:24 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:21:24 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00007-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 946697}
17/11/03 15:21:24 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #303
17/11/03 15:21:24 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #303
17/11/03 15:21:24 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:21:24 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=946697
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043393_302622; getBlockSize()=946697; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043393_302622; getBlockSize()=946697; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:24 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:21:24 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:24 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00007-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043393_302622): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:24 DEBUG RecordReaderImpl: chunks = [range start: 18537 end: 942086]
17/11/03 15:21:24 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:24 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00007-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043393_302622): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:24 DEBUG RecordReaderImpl: merge = [data range [18537, 942086), size: 923549 type: array-backed]
17/11/03 15:21:24 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:21:30 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00009-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, range: 0-942406, partition values: [empty row]
17/11/03 15:21:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #304
17/11/03 15:21:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #304
17/11/03 15:21:30 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:21:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #305
17/11/03 15:21:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #305
17/11/03 15:21:30 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:21:30 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=942406
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043416_302645; getBlockSize()=942406; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043416_302645; getBlockSize()=942406; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #306
17/11/03 15:21:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #306
17/11/03 15:21:30 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:21:30 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:21:30 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00009-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043416_302645): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:30 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:21:30 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00009-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:21:30 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:21:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #307
17/11/03 15:21:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #307
17/11/03 15:21:30 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:21:30 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=942406
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043416_302645; getBlockSize()=942406; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043416_302645; getBlockSize()=942406; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #308
17/11/03 15:21:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #308
17/11/03 15:21:30 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:21:30 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:21:30 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00009-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043416_302645): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:30 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:21:30 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:21:30 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00009-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 942406}
17/11/03 15:21:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #309
17/11/03 15:21:30 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #309
17/11/03 15:21:30 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:21:30 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=942406
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043416_302645; getBlockSize()=942406; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043416_302645; getBlockSize()=942406; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:30 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:21:30 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:21:30 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00009-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043416_302645): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:30 DEBUG RecordReaderImpl: chunks = [range start: 18644 end: 937790]
17/11/03 15:21:30 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:21:30 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00009-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043416_302645): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:30 DEBUG RecordReaderImpl: merge = [data range [18644, 937790), size: 919146 type: array-backed]
17/11/03 15:21:30 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:21:36 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, range: 0-1921428, partition values: [empty row]
17/11/03 15:21:36 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #310
17/11/03 15:21:36 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #310
17/11/03 15:21:36 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:21:36 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #311
17/11/03 15:21:36 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #311
17/11/03 15:21:36 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:21:36 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1921428
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043421_302650; getBlockSize()=1921428; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043421_302650; getBlockSize()=1921428; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:36 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #312
17/11/03 15:21:36 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #312
17/11/03 15:21:36 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:21:36 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:21:36 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043421_302650): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:36 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:21:36 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:21:36 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:21:36 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #313
17/11/03 15:21:36 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #313
17/11/03 15:21:36 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 6ms
17/11/03 15:21:36 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1921428
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043421_302650; getBlockSize()=1921428; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043421_302650; getBlockSize()=1921428; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:36 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #314
17/11/03 15:21:36 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #314
17/11/03 15:21:36 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:21:36 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:21:36 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043421_302650): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:36 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:21:36 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:21:36 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 1921428}
17/11/03 15:21:36 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #315
17/11/03 15:21:36 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #315
17/11/03 15:21:36 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:21:36 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1921428
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043421_302650; getBlockSize()=1921428; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043421_302650; getBlockSize()=1921428; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:36 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:21:36 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:21:36 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043421_302650): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:36 DEBUG RecordReaderImpl: chunks = [range start: 20225 end: 980030]
17/11/03 15:21:36 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:21:36 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043421_302650): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:36 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:21:36 DEBUG RecordReaderImpl: merge = [data range [20225, 980030), size: 959805 type: array-backed]
17/11/03 15:21:36 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:21:42 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:21:42 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043421_302650): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:42 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:21:42 DEBUG RecordReaderImpl: chunks = [range start: 12671 end: 532198]
17/11/03 15:21:42 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:21:42 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043421_302650): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:42 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:21:42 DEBUG RecordReaderImpl: merge = [data range [12671, 532198), size: 519527 type: array-backed]
17/11/03 15:21:45 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:21:45 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043421_302650): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:45 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:21:45 DEBUG RecordReaderImpl: chunks = [range start: 11553 end: 398933]
17/11/03 15:21:45 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:21:45 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043421_302650): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:45 DEBUG RecordReaderImpl: merge = [data range [11553, 398933), size: 387380 type: array-backed]
17/11/03 15:21:47 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 15:21:47 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 909550 flag: 0 flag: 0 flag: 0
17/11/03 15:21:48 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, range: 0-3199673, partition values: [empty row]
17/11/03 15:21:48 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #316
17/11/03 15:21:48 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #316
17/11/03 15:21:48 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:21:48 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #317
17/11/03 15:21:48 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #317
17/11/03 15:21:48 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:21:48 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3199673
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652; getBlockSize()=3199673; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652; getBlockSize()=3199673; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:48 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #318
17/11/03 15:21:48 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #318
17/11/03 15:21:48 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:21:48 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:48 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:48 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:21:48 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:21:48 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:21:48 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #319
17/11/03 15:21:48 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #319
17/11/03 15:21:48 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:21:48 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3199673
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652; getBlockSize()=3199673; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652; getBlockSize()=3199673; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:48 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #320
17/11/03 15:21:48 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #320
17/11/03 15:21:48 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:21:48 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:21:48 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:48 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:21:48 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:21:48 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 3199673}
17/11/03 15:21:48 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #321
17/11/03 15:21:48 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #321
17/11/03 15:21:48 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:21:48 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3199673
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652; getBlockSize()=3199673; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652; getBlockSize()=3199673; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:21:48 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:21:48 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:48 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:48 DEBUG RecordReaderImpl: chunks = [range start: 19244 end: 1093367]
17/11/03 15:21:48 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:48 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:48 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:21:48 DEBUG RecordReaderImpl: merge = [data range [19244, 1093367), size: 1074123 type: array-backed]
17/11/03 15:21:48 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:21:53 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #322
17/11/03 15:21:53 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #322
17/11/03 15:21:53 DEBUG ProtobufRpcEngine: Call: renewLease took 0ms
17/11/03 15:21:53 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-775905044_1
17/11/03 15:21:53 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-775905044_1] with renew id 1 executed
17/11/03 15:21:54 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:54 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:54 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:21:54 DEBUG RecordReaderImpl: chunks = [range start: 12250 end: 552011]
17/11/03 15:21:54 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:54 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:54 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:21:54 DEBUG RecordReaderImpl: merge = [data range [12250, 552011), size: 539761 type: array-backed]
17/11/03 15:21:57 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:57 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:57 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:21:57 DEBUG RecordReaderImpl: chunks = [range start: 12199 end: 513985]
17/11/03 15:21:57 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:21:57 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:21:57 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:21:57 DEBUG RecordReaderImpl: merge = [data range [12199, 513985), size: 501786 type: array-backed]
17/11/03 15:22:00 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:22:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:00 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:22:00 DEBUG RecordReaderImpl: chunks = [range start: 12390 end: 634156]
17/11/03 15:22:00 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:22:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:00 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:22:00 DEBUG RecordReaderImpl: merge = [data range [12390, 634156), size: 621766 type: array-backed]
17/11/03 15:22:04 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:22:04 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:04 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:22:04 DEBUG RecordReaderImpl: chunks = [range start: 10408 end: 390554]
17/11/03 15:22:04 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:22:04 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043423_302652): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:04 DEBUG RecordReaderImpl: merge = [data range [10408, 390554), size: 380146 type: array-backed]
17/11/03 15:22:06 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00012-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, range: 0-907887, partition values: [empty row]
17/11/03 15:22:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #323
17/11/03 15:22:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #323
17/11/03 15:22:06 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:22:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #324
17/11/03 15:22:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #324
17/11/03 15:22:06 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:22:06 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=907887
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043419_302648; getBlockSize()=907887; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043419_302648; getBlockSize()=907887; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #325
17/11/03 15:22:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #325
17/11/03 15:22:06 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:22:06 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:22:06 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00012-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043419_302648): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:06 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00012-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:22:06 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:22:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #326
17/11/03 15:22:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #326
17/11/03 15:22:06 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:22:06 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=907887
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043419_302648; getBlockSize()=907887; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043419_302648; getBlockSize()=907887; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #327
17/11/03 15:22:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #327
17/11/03 15:22:06 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:22:06 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:22:06 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00012-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043419_302648): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:06 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:22:06 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00012-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 907887}
17/11/03 15:22:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #328
17/11/03 15:22:06 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #328
17/11/03 15:22:06 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:22:06 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=907887
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043419_302648; getBlockSize()=907887; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043419_302648; getBlockSize()=907887; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:06 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:22:06 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:22:06 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00012-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043419_302648): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:06 DEBUG RecordReaderImpl: chunks = [range start: 18784 end: 903224]
17/11/03 15:22:06 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:22:06 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00012-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043419_302648): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:06 DEBUG RecordReaderImpl: merge = [data range [18784, 903224), size: 884440 type: array-backed]
17/11/03 15:22:06 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:22:11 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, range: 0-993328, partition values: [empty row]
17/11/03 15:22:11 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #329
17/11/03 15:22:11 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #329
17/11/03 15:22:11 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:22:11 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #330
17/11/03 15:22:11 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #330
17/11/03 15:22:11 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:22:11 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=993328
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043426_302655; getBlockSize()=993328; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043426_302655; getBlockSize()=993328; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:11 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #331
17/11/03 15:22:11 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #331
17/11/03 15:22:11 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:22:11 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:22:11 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043426_302655): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:11 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:22:12 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:22:12 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:22:12 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #332
17/11/03 15:22:12 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #332
17/11/03 15:22:12 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:22:12 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=993328
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043426_302655; getBlockSize()=993328; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043426_302655; getBlockSize()=993328; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:12 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #333
17/11/03 15:22:12 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #333
17/11/03 15:22:12 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:22:12 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:12 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043426_302655): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:12 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:22:12 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:22:12 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 993328}
17/11/03 15:22:12 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #334
17/11/03 15:22:12 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #334
17/11/03 15:22:12 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:22:12 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=993328
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043426_302655; getBlockSize()=993328; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043426_302655; getBlockSize()=993328; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:12 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:22:12 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:22:12 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043426_302655): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:12 DEBUG BlockReaderFactory: Closed potentially stale remote peer NioInetPeer(Socket[addr=/172.30.1.136,port=50010,localport=44110])
java.io.EOFException: Premature EOF: no length prefix available
	at org.apache.hadoop.hdfs.protocolPB.PBHelper.vintPrefixed(PBHelper.java:2282)
	at org.apache.hadoop.hdfs.RemoteBlockReader2.newBlockReader(RemoteBlockReader2.java:423)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReader(BlockReaderFactory.java:818)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReaderFromTcp(BlockReaderFactory.java:697)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:673)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:882)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:934)
	at java.io.DataInputStream.readFully(DataInputStream.java:195)
	at org.apache.hadoop.hive.ql.io.orc.MetadataReader.readStripeFooter(MetadataReader.java:112)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.readStripeFooter(RecordReaderImpl.java:228)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.beginReadStripe(RecordReaderImpl.java:805)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.readStripe(RecordReaderImpl.java:776)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.advanceStripe(RecordReaderImpl.java:986)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.advanceToNextRow(RecordReaderImpl.java:1019)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.<init>(RecordReaderImpl.java:205)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.rowsOptions(ReaderImpl.java:539)
	at org.apache.hadoop.hive.ql.io.orc.OrcInputFormat.createReaderFromFile(OrcInputFormat.java:230)
	at org.apache.hadoop.hive.ql.io.orc.SparkOrcNewRecordReader.<init>(SparkOrcNewRecordReader.java:48)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:157)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:131)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(FileFormat.scala:136)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(FileFormat.scala:120)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.org$apache$spark$sql$execution$datasources$FileScanRDD$$anon$$readCurrentFile(FileScanRDD.scala:124)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.nextIterator(FileScanRDD.scala:174)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:105)
	at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIterator.processNext(generated.java:38)
	at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)
	at org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1.hasNext(WholeStageCodegenExec.scala:395)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:234)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:228)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:827)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:827)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87)
	at org.apache.spark.scheduler.Task.run(Task.scala:108)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:335)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
17/11/03 15:22:12 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:22:12 DEBUG RecordReaderImpl: chunks = [range start: 18951 end: 988745]
17/11/03 15:22:12 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:22:12 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043426_302655): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:12 DEBUG RecordReaderImpl: merge = [data range [18951, 988745), size: 969794 type: array-backed]
17/11/03 15:22:12 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:22:17 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 15:22:17 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 714549 flag: 0 flag: 0 flag: 0
17/11/03 15:22:17 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, range: 0-3829642, partition values: [empty row]
17/11/03 15:22:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #335
17/11/03 15:22:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #335
17/11/03 15:22:17 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:22:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #336
17/11/03 15:22:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #336
17/11/03 15:22:17 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:22:17 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3829642
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659; getBlockSize()=3829642; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659; getBlockSize()=3829642; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #337
17/11/03 15:22:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #337
17/11/03 15:22:17 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:22:17 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:17 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:17 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:22:17 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:22:17 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:22:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #338
17/11/03 15:22:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #338
17/11/03 15:22:17 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:22:17 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3829642
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659; getBlockSize()=3829642; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659; getBlockSize()=3829642; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #339
17/11/03 15:22:17 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #339
17/11/03 15:22:17 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:22:17 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:22:17 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:17 DEBUG BlockReaderFactory: Closed potentially stale remote peer NioInetPeer(Socket[addr=/172.30.1.136,port=50010,localport=44119])
java.io.EOFException: Premature EOF: no length prefix available
	at org.apache.hadoop.hdfs.protocolPB.PBHelper.vintPrefixed(PBHelper.java:2282)
	at org.apache.hadoop.hdfs.RemoteBlockReader2.newBlockReader(RemoteBlockReader2.java:423)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReader(BlockReaderFactory.java:818)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReaderFromTcp(BlockReaderFactory.java:697)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:673)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:882)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:934)
	at java.io.DataInputStream.readFully(DataInputStream.java:195)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.extractMetaInfoFromFooter(ReaderImpl.java:369)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.<init>(ReaderImpl.java:316)
	at org.apache.hadoop.hive.ql.io.orc.OrcFile.createReader(OrcFile.java:237)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:155)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:131)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(FileFormat.scala:136)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(FileFormat.scala:120)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.org$apache$spark$sql$execution$datasources$FileScanRDD$$anon$$readCurrentFile(FileScanRDD.scala:124)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.nextIterator(FileScanRDD.scala:174)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:105)
	at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIterator.processNext(generated.java:38)
	at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)
	at org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1.hasNext(WholeStageCodegenExec.scala:395)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:234)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:228)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:827)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:827)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87)
	at org.apache.spark.scheduler.Task.run(Task.scala:108)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:335)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
17/11/03 15:22:17 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:22:18 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:22:18 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 3829642}
17/11/03 15:22:18 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #340
17/11/03 15:22:18 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #340
17/11/03 15:22:18 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:22:18 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3829642
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659; getBlockSize()=3829642; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659; getBlockSize()=3829642; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:18 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:22:18 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:18 DEBUG RecordReaderImpl: chunks = [range start: 20666 end: 981514]
17/11/03 15:22:18 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:18 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:22:18 DEBUG RecordReaderImpl: merge = [data range [20666, 981514), size: 960848 type: array-backed]
17/11/03 15:22:18 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:22:23 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #341
17/11/03 15:22:23 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #341
17/11/03 15:22:23 DEBUG ProtobufRpcEngine: Call: renewLease took 0ms
17/11/03 15:22:23 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-775905044_1
17/11/03 15:22:23 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-775905044_1] with renew id 1 executed
17/11/03 15:22:24 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:24 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:24 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:22:24 DEBUG RecordReaderImpl: chunks = [range start: 12080 end: 503287]
17/11/03 15:22:24 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:24 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:24 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:22:24 DEBUG RecordReaderImpl: merge = [data range [12080, 503287), size: 491207 type: array-backed]
17/11/03 15:22:27 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:27 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:27 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:22:27 DEBUG RecordReaderImpl: chunks = [range start: 12693 end: 526312]
17/11/03 15:22:27 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:27 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:27 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:22:27 DEBUG RecordReaderImpl: merge = [data range [12693, 526312), size: 513619 type: array-backed]
17/11/03 15:22:30 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:30 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:30 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:22:30 DEBUG RecordReaderImpl: chunks = [range start: 12152 end: 511563]
17/11/03 15:22:30 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:30 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:30 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:22:30 DEBUG RecordReaderImpl: merge = [data range [12152, 511563), size: 499411 type: array-backed]
17/11/03 15:22:33 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:33 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:33 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:22:33 DEBUG RecordReaderImpl: chunks = [range start: 11975 end: 548139]
17/11/03 15:22:33 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:33 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:33 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:22:33 DEBUG RecordReaderImpl: merge = [data range [11975, 548139), size: 536164 type: array-backed]
17/11/03 15:22:37 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:37 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:37 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:22:37 DEBUG RecordReaderImpl: chunks = [range start: 11406 end: 538581]
17/11/03 15:22:37 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:37 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:37 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:22:37 DEBUG RecordReaderImpl: merge = [data range [11406, 538581), size: 527175 type: array-backed]
17/11/03 15:22:40 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:40 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:40 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:22:40 DEBUG RecordReaderImpl: chunks = [range start: 6172 end: 199622]
17/11/03 15:22:40 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:40 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00015-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00000.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043430_302659): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:40 DEBUG RecordReaderImpl: merge = [data range [6172, 199622), size: 193450 type: array-backed]
17/11/03 15:22:42 INFO Executor: Finished task 0.0 in stage 2.0 (TID 3). 1284 bytes result sent to driver
17/11/03 15:22:42 DEBUG TaskSchedulerImpl: parentName: , name: TaskSet_2.0, runningTasks: 0
17/11/03 15:22:42 INFO TaskSetManager: Finished task 0.0 in stage 2.0 (TID 3) in 144101 ms on localhost (executor driver) (1/1)
17/11/03 15:22:42 INFO TaskSchedulerImpl: Removed TaskSet 2.0, whose tasks have all completed, from pool
17/11/03 15:22:42 INFO DAGScheduler: ResultStage 2 (take at <console>:26) finished in 144.102 s
17/11/03 15:22:42 DEBUG DAGScheduler: After removal of stage 2, remaining stages = 0
17/11/03 15:22:42 INFO DAGScheduler: Job 2 finished: take at <console>:26, took 144.117034 s
17/11/03 15:22:42 DEBUG ClosureCleaner: +++ Cleaning closure <function1> (org.apache.spark.sql.execution.SparkPlan$$anonfun$3) +++
17/11/03 15:22:42 DEBUG ClosureCleaner:  + declared fields: 1
17/11/03 15:22:42 DEBUG ClosureCleaner:      public static final long org.apache.spark.sql.execution.SparkPlan$$anonfun$3.serialVersionUID
17/11/03 15:22:42 DEBUG ClosureCleaner:  + declared methods: 2
17/11/03 15:22:42 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.sql.execution.SparkPlan$$anonfun$3.apply(java.lang.Object)
17/11/03 15:22:42 DEBUG ClosureCleaner:      public final byte[] org.apache.spark.sql.execution.SparkPlan$$anonfun$3.apply(scala.collection.Iterator)
17/11/03 15:22:42 DEBUG ClosureCleaner:  + inner classes: 0
17/11/03 15:22:42 DEBUG ClosureCleaner:  + outer classes: 0
17/11/03 15:22:42 DEBUG ClosureCleaner:  + outer objects: 0
17/11/03 15:22:42 DEBUG ClosureCleaner:  + populating accessed fields because this is the starting closure
17/11/03 15:22:42 DEBUG ClosureCleaner:  + fields accessed by starting closure: 0
17/11/03 15:22:42 DEBUG ClosureCleaner:  + there are no enclosing objects!
17/11/03 15:22:42 DEBUG ClosureCleaner:  +++ closure <function1> (org.apache.spark.sql.execution.SparkPlan$$anonfun$3) is now cleaned +++
17/11/03 15:22:42 DEBUG ClosureCleaner: +++ Cleaning closure <function2> (org.apache.spark.SparkContext$$anonfun$runJob$5) +++
17/11/03 15:22:42 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=14, src=/spark2-history/local-1509722002203.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=78336
17/11/03 15:22:42 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=86891 lastFlushOffset=78475 createNewBlock=false
17/11/03 15:22:42 DEBUG ClosureCleaner:  + declared fields: 2
17/11/03 15:22:42 DEBUG DFSClient: Queued packet 14
17/11/03 15:22:42 DEBUG ClosureCleaner:      public static final long org.apache.spark.SparkContext$$anonfun$runJob$5.serialVersionUID
17/11/03 15:22:42 DEBUG ClosureCleaner:      private final scala.Function1 org.apache.spark.SparkContext$$anonfun$runJob$5.cleanedFunc$1
17/11/03 15:22:42 DEBUG ClosureCleaner:  + declared methods: 2
17/11/03 15:22:42 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.SparkContext$$anonfun$runJob$5.apply(java.lang.Object,java.lang.Object)
17/11/03 15:22:42 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.SparkContext$$anonfun$runJob$5.apply(org.apache.spark.TaskContext,scala.collection.Iterator)
17/11/03 15:22:42 DEBUG ClosureCleaner:  + inner classes: 0
17/11/03 15:22:42 DEBUG ClosureCleaner:  + outer classes: 0
17/11/03 15:22:42 DEBUG ClosureCleaner:  + outer objects: 0
17/11/03 15:22:42 DEBUG DFSClient: Waiting for ack for: 14
17/11/03 15:22:42 DEBUG ClosureCleaner:  + populating accessed fields because this is the starting closure
17/11/03 15:22:42 DEBUG ClosureCleaner:  + fields accessed by starting closure: 0
17/11/03 15:22:42 DEBUG ClosureCleaner:  + there are no enclosing objects!
17/11/03 15:22:42 DEBUG ClosureCleaner:  +++ closure <function2> (org.apache.spark.SparkContext$$anonfun$runJob$5) is now cleaned +++
17/11/03 15:22:42 INFO SparkContext: Starting job: take at <console>:26
17/11/03 15:22:42 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: 14 offsetInBlock: 78336 lastPacketInBlock: false lastByteOffsetInBlock: 86891
17/11/03 15:22:42 INFO DAGScheduler: Got job 3 (take at <console>:26) with 2 output partitions
17/11/03 15:22:42 INFO DAGScheduler: Final stage: ResultStage 3 (take at <console>:26)
17/11/03 15:22:42 INFO DAGScheduler: Parents of final stage: List()
17/11/03 15:22:42 INFO DAGScheduler: Missing parents: List()
17/11/03 15:22:42 DEBUG DAGScheduler: submitStage(ResultStage 3)
17/11/03 15:22:42 DEBUG DAGScheduler: missing: List()
17/11/03 15:22:42 INFO DAGScheduler: Submitting ResultStage 3 (MapPartitionsRDD[5] at take at <console>:26), which has no missing parents
17/11/03 15:22:42 DEBUG DAGScheduler: submitMissingTasks(ResultStage 3)
17/11/03 15:22:42 DEBUG DFSClient: DFSClient seqno: 14 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 3405066 flag: 0 flag: 0 flag: 0
17/11/03 15:22:42 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=15, src=/spark2-history/local-1509722002203.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=86528
17/11/03 15:22:42 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=87005 lastFlushOffset=86891 createNewBlock=false
17/11/03 15:22:42 DEBUG DFSClient: Queued packet 15
17/11/03 15:22:42 DEBUG DFSClient: Waiting for ack for: 15
17/11/03 15:22:42 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: 15 offsetInBlock: 86528 lastPacketInBlock: false lastByteOffsetInBlock: 87005
17/11/03 15:22:42 INFO MemoryStore: Block broadcast_5 stored as values in memory (estimated size 37.3 KB, free 365.9 MB)
17/11/03 15:22:42 DEBUG BlockManager: Put block broadcast_5 locally took  0 ms
17/11/03 15:22:42 DEBUG BlockManager: Putting block broadcast_5 without replication took  0 ms
17/11/03 15:22:42 INFO MemoryStore: Block broadcast_5_piece0 stored as bytes in memory (estimated size 11.1 KB, free 365.8 MB)
17/11/03 15:22:42 INFO BlockManagerInfo: Added broadcast_5_piece0 in memory on 172.30.1.247:44297 (size: 11.1 KB, free: 366.2 MB)
17/11/03 15:22:42 DEBUG BlockManagerMaster: Updated info of block broadcast_5_piece0
17/11/03 15:22:42 DEBUG BlockManager: Told master about block broadcast_5_piece0
17/11/03 15:22:42 DEBUG BlockManager: Put block broadcast_5_piece0 locally took  1 ms
17/11/03 15:22:42 DEBUG BlockManager: Putting block broadcast_5_piece0 without replication took  1 ms
17/11/03 15:22:42 INFO SparkContext: Created broadcast 5 from broadcast at DAGScheduler.scala:1006
17/11/03 15:22:42 INFO DAGScheduler: Submitting 2 missing tasks from ResultStage 3 (MapPartitionsRDD[5] at take at <console>:26) (first 15 tasks are for partitions Vector(1, 2))
17/11/03 15:22:42 INFO TaskSchedulerImpl: Adding task set 3.0 with 2 tasks
17/11/03 15:22:42 DEBUG TaskSetManager: Epoch for TaskSet 3.0: 0
17/11/03 15:22:42 DEBUG TaskSetManager: Valid locality levels for TaskSet 3.0: ANY
17/11/03 15:22:42 DEBUG TaskSchedulerImpl: parentName: , name: TaskSet_3.0, runningTasks: 0
17/11/03 15:22:42 DEBUG DFSClient: DFSClient seqno: 15 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 3335771 flag: 0 flag: 0 flag: 0
17/11/03 15:22:42 INFO TaskSetManager: Starting task 0.0 in stage 3.0 (TID 4, localhost, executor driver, partition 1, ANY, 6497 bytes)
17/11/03 15:22:42 INFO TaskSetManager: Starting task 1.0 in stage 3.0 (TID 5, localhost, executor driver, partition 2, ANY, 6497 bytes)
17/11/03 15:22:42 INFO Executor: Running task 0.0 in stage 3.0 (TID 4)
17/11/03 15:22:42 DEBUG Executor: Task 4's epoch is 0
17/11/03 15:22:42 DEBUG BlockManager: Getting local block broadcast_5
17/11/03 15:22:42 DEBUG BlockManager: Level for block broadcast_5 is StorageLevel(disk, memory, deserialized, 1 replicas)
17/11/03 15:22:42 INFO Executor: Running task 1.0 in stage 3.0 (TID 5)
17/11/03 15:22:42 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=16, src=/spark2-history/local-1509722002203.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=86528
17/11/03 15:22:42 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=89339 lastFlushOffset=87005 createNewBlock=false
17/11/03 15:22:42 DEBUG DFSClient: Queued packet 16
17/11/03 15:22:42 DEBUG DFSClient: Waiting for ack for: 16
17/11/03 15:22:42 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: 16 offsetInBlock: 86528 lastPacketInBlock: false lastByteOffsetInBlock: 89339
17/11/03 15:22:42 DEBUG Executor: Task 5's epoch is 0
17/11/03 15:22:42 DEBUG BlockManager: Getting local block broadcast_5
17/11/03 15:22:42 DEBUG BlockManager: Level for block broadcast_5 is StorageLevel(disk, memory, deserialized, 1 replicas)
17/11/03 15:22:42 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, range: 0-897017, partition values: [empty row]
17/11/03 15:22:42 DEBUG DFSClient: DFSClient seqno: 16 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 788211 flag: 0 flag: 0 flag: 0
17/11/03 15:22:42 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00002-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, range: 0-1856694, partition values: [empty row]
17/11/03 15:22:42 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:22:42 DEBUG BlockManager: Getting local block broadcast_3
17/11/03 15:22:42 DEBUG BlockManager: Level for block broadcast_3 is StorageLevel(disk, memory, deserialized, 1 replicas)
17/11/03 15:22:42 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #342
17/11/03 15:22:42 DEBUG BlockManager: Getting local block broadcast_3
17/11/03 15:22:42 DEBUG BlockManager: Level for block broadcast_3 is StorageLevel(disk, memory, deserialized, 1 replicas)
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #342
17/11/03 15:22:42 DEBUG ProtobufRpcEngine: Call: getFileInfo took 4ms
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #343
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #343
17/11/03 15:22:42 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #344
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #344
17/11/03 15:22:42 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #345
17/11/03 15:22:42 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=897017
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043373_302602; getBlockSize()=897017; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043373_302602; getBlockSize()=897017; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #345
17/11/03 15:22:42 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #346
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #346
17/11/03 15:22:42 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:22:42 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1856694
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043345_302574; getBlockSize()=1856694; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043345_302574; getBlockSize()=1856694; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:42 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:22:42 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043373_302602): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #347
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #347
17/11/03 15:22:42 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:22:42 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:22:42 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:22:42 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00002-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043345_302574): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:42 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:22:42 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:22:42 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #348
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #348
17/11/03 15:22:42 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:22:42 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=897017
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043373_302602; getBlockSize()=897017; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043373_302602; getBlockSize()=897017; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #349
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #349
17/11/03 15:22:42 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:22:42 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:22:42 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043373_302602): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:42 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:22:42 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00002-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:22:42 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #350
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #350
17/11/03 15:22:42 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:22:42 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1856694
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043345_302574; getBlockSize()=1856694; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043345_302574; getBlockSize()=1856694; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #351
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #351
17/11/03 15:22:42 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:22:42 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:22:42 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00002-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043345_302574): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:42 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:22:42 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00002-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 1856694}
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #352
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #352
17/11/03 15:22:42 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:22:42 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1856694
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043345_302574; getBlockSize()=1856694; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043345_302574; getBlockSize()=1856694; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:42 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:22:42 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:22:42 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00002-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043345_302574): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:42 DEBUG RecordReaderImpl: chunks = [range start: 19985 end: 981444]
17/11/03 15:22:42 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:22:42 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00002-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043345_302574): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:42 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:22:42 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:22:42 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 897017}
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #353
17/11/03 15:22:42 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #353
17/11/03 15:22:42 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:22:42 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=897017
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043373_302602; getBlockSize()=897017; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043373_302602; getBlockSize()=897017; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:42 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:22:42 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:42 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043373_302602): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:42 DEBUG RecordReaderImpl: chunks = [range start: 18526 end: 892397]
17/11/03 15:22:42 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:22:42 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00000-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043373_302602): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:42 DEBUG RecordReaderImpl: merge = [data range [19985, 981444), size: 961459 type: array-backed]
17/11/03 15:22:42 DEBUG RecordReaderImpl: merge = [data range [18526, 892397), size: 873871 type: array-backed]
17/11/03 15:22:42 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:22:42 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

[Stage 3:>                                                          (0 + 2) / 2]17/11/03 15:22:51 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, range: 0-950379, partition values: [empty row]
17/11/03 15:22:51 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #354
17/11/03 15:22:51 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #354
17/11/03 15:22:51 DEBUG ProtobufRpcEngine: Call: getFileInfo took 5ms
17/11/03 15:22:51 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #355
17/11/03 15:22:51 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #355
17/11/03 15:22:51 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:22:51 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=950379
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043405_302634; getBlockSize()=950379; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043405_302634; getBlockSize()=950379; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:51 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #356
17/11/03 15:22:51 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #356
17/11/03 15:22:51 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:22:51 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:22:51 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043405_302634): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:51 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:22:51 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:22:51 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:22:51 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #357
17/11/03 15:22:51 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #357
17/11/03 15:22:51 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:22:51 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=950379
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043405_302634; getBlockSize()=950379; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043405_302634; getBlockSize()=950379; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:51 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #358
17/11/03 15:22:51 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #358
17/11/03 15:22:51 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:22:51 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:22:51 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043405_302634): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:51 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:22:51 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 950379}
17/11/03 15:22:51 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #359
17/11/03 15:22:51 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #359
17/11/03 15:22:51 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:22:51 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=950379
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043405_302634; getBlockSize()=950379; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043405_302634; getBlockSize()=950379; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:22:51 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:22:51 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:22:51 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043405_302634): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:51 DEBUG RecordReaderImpl: chunks = [range start: 18870 end: 945756]
17/11/03 15:22:51 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:22:51 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00001-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043405_302634): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:51 DEBUG RecordReaderImpl: merge = [data range [18870, 945756), size: 926886 type: array-backed]
17/11/03 15:22:51 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:22:52 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:22:52 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00002-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043345_302574): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:52 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:22:52 DEBUG RecordReaderImpl: chunks = [range start: 11873 end: 505873]
17/11/03 15:22:52 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:22:52 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00002-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043345_302574): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:52 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:22:52 DEBUG RecordReaderImpl: merge = [data range [11873, 505873), size: 494000 type: array-backed]
17/11/03 15:22:52 DEBUG ContextCleaner: Got cleaning task CleanBroadcast(4)
17/11/03 15:22:52 DEBUG ContextCleaner: Cleaning broadcast 4
17/11/03 15:22:52 DEBUG TorrentBroadcast: Unpersisting TorrentBroadcast 4
17/11/03 15:22:52 DEBUG BlockManagerSlaveEndpoint: removing broadcast 4
17/11/03 15:22:52 DEBUG BlockManager: Removing broadcast 4
17/11/03 15:22:52 DEBUG BlockManager: Removing block broadcast_4
17/11/03 15:22:52 DEBUG MemoryStore: Block broadcast_4 of size 38208 dropped from memory (free 383654614)
17/11/03 15:22:52 DEBUG BlockManager: Removing block broadcast_4_piece0
17/11/03 15:22:52 DEBUG MemoryStore: Block broadcast_4_piece0 of size 11384 dropped from memory (free 383665998)
17/11/03 15:22:52 INFO BlockManagerInfo: Removed broadcast_4_piece0 on 172.30.1.247:44297 in memory (size: 11.1 KB, free: 366.3 MB)
17/11/03 15:22:52 DEBUG BlockManagerMaster: Updated info of block broadcast_4_piece0
17/11/03 15:22:52 DEBUG BlockManager: Told master about block broadcast_4_piece0
17/11/03 15:22:52 DEBUG BlockManagerSlaveEndpoint: Done removing broadcast 4, response is 0
17/11/03 15:22:52 DEBUG ContextCleaner: Cleaned broadcast 4
17/11/03 15:22:52 DEBUG BlockManagerSlaveEndpoint: Sent response: 0 to 172.30.1.247:54343
17/11/03 15:22:53 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #360
17/11/03 15:22:53 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #360
17/11/03 15:22:53 DEBUG ProtobufRpcEngine: Call: renewLease took 1ms
17/11/03 15:22:53 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-775905044_1
17/11/03 15:22:53 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-775905044_1] with renew id 1 executed
17/11/03 15:22:57 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:22:57 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00002-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043345_302574): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:57 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:22:57 DEBUG RecordReaderImpl: chunks = [range start: 11263 end: 359055]
17/11/03 15:22:57 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:22:57 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00002-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043345_302574): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:22:57 DEBUG RecordReaderImpl: merge = [data range [11263, 359055), size: 347792 type: array-backed]
17/11/03 15:22:59 DEBUG ManagedSelector: Queued change org.spark_project.jetty.io.ManagedSelector$Accept@3ccec082 on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=0 selected=0
17/11/03 15:22:59 DEBUG ManagedSelector: Selector loop woken up from select, 0/0 selected
17/11/03 15:22:59 DEBUG ManagedSelector: Running change org.spark_project.jetty.io.ManagedSelector$Accept@3ccec082
17/11/03 15:22:59 DEBUG ManagedSelector: Queued change org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@4d8e2395 on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@4d8e2395
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:22:59 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@4d8e2395
17/11/03 15:22:59 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:22:59 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:22:59 DEBUG AbstractEndPoint: onOpen SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0}
17/11/03 15:22:59 DEBUG IdleTimeout: SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0} idle timeout check, elapsed: 0 ms, remaining: 30000 ms
17/11/03 15:22:59 DEBUG HttpChannel: new HttpChannelOverHttp@cb329ae{r=0,c=false,a=IDLE,uri=null} -> SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0},null,HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false}
17/11/03 15:22:59 DEBUG HttpConnection: New HTTP Connection HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=0,c=false,a=IDLE,uri=null}]
17/11/03 15:22:59 DEBUG AbstractConnection: onOpen HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=0,c=false,a=IDLE,uri=null}]
17/11/03 15:22:59 DEBUG AbstractConnection: fillInterested HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=0,c=false,a=IDLE,uri=null}]
17/11/03 15:22:59 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=0,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=0,c=false,a=IDLE,uri=null}]}
17/11/03 15:22:59 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=0,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=0,c=false,a=IDLE,uri=null}]}
17/11/03 15:22:59 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=0}
17/11/03 15:22:59 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=0}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:22:59 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:22:59 DEBUG ManagedSelector: Created SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=0}
17/11/03 15:22:59 DEBUG ManagedSelector: Running change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=0}:runUpdateKey
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@4d8e2395
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:22:59 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=0}
17/11/03 15:22:59 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:22:59 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:22:59 DEBUG ManagedSelector: Selector loop woken up from select, 1/1 selected
17/11/03 15:22:59 DEBUG SelectChannelEndPoint: onSelected 1->0 r=true w=false for SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:22:59 DEBUG SelectChannelEndPoint: task SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:22:59 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:22:59 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:22:59 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=0,c=false,a=IDLE,uri=null}]}} fillable AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=0,c=false,a=IDLE,uri=null}]}
17/11/03 15:22:59 DEBUG SelectChannelEndPoint: Key interests updated 1 -> 0 on SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:22:59 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:22:59 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=0,c=false,a=IDLE,uri=null}] onFillable enter HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:22:59 DEBUG ChannelEndPoint: filled 447 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:22:59 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=0,c=false,a=IDLE,uri=null}] filled 447 HeapByteBuffer@5b77d36c[p=0,l=447,c=8192,r=447]={<<<GET /SQL/ HTTP/1.....8,en;q=0.6\r\n\r\n>>>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:22:59 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=0,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=447,c=8192,r=447]={<<<GET /SQL/ HTTP/1.....8,en;q=0.6\r\n\r\n>>>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:22:59 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=447,c=8192,r=447]={<<<GET /SQL/ HTTP/1.....8,en;q=0.6\r\n\r\n>>>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:22:59 DEBUG HttpParser: START --> SPACE1
17/11/03 15:22:59 DEBUG HttpParser: SPACE1 --> URI
17/11/03 15:22:59 DEBUG HttpParser: URI --> SPACE2
17/11/03 15:22:59 DEBUG HttpParser: SPACE2 --> REQUEST_VERSION
17/11/03 15:22:59 DEBUG HttpParser: REQUEST_VERSION --> HEADER
17/11/03 15:22:59 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:22:59 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:22:59 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:22:59 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:22:59 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:22:59 DEBUG HttpParser: HEADER --> HEADER_IN_NAME
17/11/03 15:22:59 DEBUG HttpParser: HEADER_IN_NAME --> HEADER_VALUE
17/11/03 15:22:59 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:22:59 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:22:59 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:22:59 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:22:59 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:22:59 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:22:59 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:22:59 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:22:59 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:22:59 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:22:59 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:22:59 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:22:59 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:22:59 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:22:59 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:22:59 DEBUG HttpParser: HEADER --> END
17/11/03 15:22:59 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=//dev2:4040/SQL/} onRequestComplete
17/11/03 15:22:59 DEBUG HttpInput: HttpInputOverHTTP@16b9b8b2[c=0,q=1,[0]=EOF,s=STREAM] addContent EOF
17/11/03 15:22:59 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of 0},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=//dev2:4040/SQL/}] parsed true HttpParser{s=END,0 of 0}
17/11/03 15:22:59 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of 0},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=//dev2:4040/SQL/}]
17/11/03 15:22:59 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=//dev2:4040/SQL/} handle //dev2:4040/SQL/
17/11/03 15:22:59 DEBUG HttpChannelState: HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} handling IDLE
17/11/03 15:22:59 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=1,c=false,a=DISPATCHED,uri=//dev2:4040/SQL/} action DISPATCH
17/11/03 15:22:59 DEBUG Server: REQUEST on HttpChannelOverHttp@cb329ae{r=1,c=false,a=DISPATCHED,uri=//dev2:4040/SQL/}
GET /SQL/ HTTP/1.1
Host: dev2:4040
Connection: keep-alive
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Referer: http://dev2:4040/SQL/execution/?id=0
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6


17/11/03 15:22:59 DEBUG ContextHandler: scope null||/SQL/ @ o.s.j.s.ServletContextHandler@3feebf9c{/SQL,null,AVAILABLE,@Spark}
17/11/03 15:22:59 DEBUG ContextHandler: context=/SQL||/ @ o.s.j.s.ServletContextHandler@3feebf9c{/SQL,null,AVAILABLE,@Spark}
17/11/03 15:22:59 DEBUG ServletHandler: servlet /SQL|/|null -> org.apache.spark.ui.JettyUtils$$anon$3-a4df251@4487270d==org.apache.spark.ui.JettyUtils$$anon$3,-1,true
17/11/03 15:22:59 DEBUG ServletHandler: chain=null
17/11/03 15:22:59 DEBUG SecurityManager: user=null aclsEnabled=false viewAcls=ec2-user viewAclsGroups=
17/11/03 15:22:59 DEBUG Server: RESPONSE for /SQL/ h=true
200 null
Date: Fri, 03 Nov 2017 15:22:59 GMT
Content-Type: text/html;charset=utf-8
Cache-Control: no-cache, no-store, must-revalidate
X-Frame-Options: SAMEORIGIN


17/11/03 15:22:59 DEBUG HttpChannelState: HttpChannelState@15b6801{s=DISPATCHED a=NOT_ASYNC i=true r=!P!U w=false} unhandle DISPATCHED
17/11/03 15:22:59 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=1,c=false,a=COMPLETING,uri=//dev2:4040/SQL/} action COMPLETE
17/11/03 15:22:59 DEBUG HttpChannel: sendResponse info=null content=DirectByteBuffer@1d7a0772[p=0,l=6866,c=32768,r=6866]={<<<<!DOCTYPE html><h...dy>\n    </html>>>>c_customer_sk__cu...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} complete=true committing=true callback=Blocker@7cf2c4b7{null}
17/11/03 15:22:59 DEBUG HttpChannel: Commit HTTP/1.1{s=200,h=4} to HttpChannelOverHttp@cb329ae{r=1,c=true,a=COMPLETING,uri=//dev2:4040/SQL/}
17/11/03 15:22:59 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=200,h=4},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@5e4db5a6] generate: NEED_HEADER (null,[p=0,l=6866,c=32768,r=6866],true)@START
17/11/03 15:22:59 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=200,h=4},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@5e4db5a6] generate: FLUSH ([p=0,l=229,c=8192,r=229],[p=0,l=6866,c=32768,r=6866],true)@COMPLETING
17/11/03 15:22:59 DEBUG WriteFlusher: write: WriteFlusher@33e516d4{IDLE} [HeapByteBuffer@5b77d36c[p=0,l=229,c=8192,r=229]={<<<HTTP/1.1 200 OK\r\n...z-SNAPSHOT)\r\n\r\n>>>ept: text/html,ap...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00},DirectByteBuffer@1d7a0772[p=0,l=6866,c=32768,r=6866]={<<<<!DOCTYPE html><h...dy>\n    </html>>>>c_customer_sk__cu...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}]
17/11/03 15:22:59 DEBUG WriteFlusher: update WriteFlusher@33e516d4{WRITING}:IDLE-->WRITING
17/11/03 15:22:59 DEBUG ChannelEndPoint: flushed 7095 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,W,21/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:22:59 DEBUG WriteFlusher: Flushed=true 229/229+1 WriteFlusher@33e516d4{WRITING}
17/11/03 15:22:59 DEBUG WriteFlusher: update WriteFlusher@33e516d4{IDLE}:WRITING-->IDLE
17/11/03 15:22:59 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=200,h=4},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@5e4db5a6] generate: DONE ([p=229,l=229,c=8192,r=0],[p=6866,l=6866,c=32768,r=0],true)@END
17/11/03 15:22:59 DEBUG HttpParser: reset HttpParser{s=END,0 of 0}
17/11/03 15:22:59 DEBUG HttpParser: END --> START
17/11/03 15:22:59 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null} handle exit, result COMPLETE
17/11/03 15:22:59 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,3/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:22:59 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,3/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:22:59 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,3/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null}] filled 0 HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:22:59 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,3/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:22:59 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:22:59 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,3/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null}] parsed false HttpParser{s=START,0 of -1}
17/11/03 15:22:59 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,3/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null}]
17/11/03 15:22:59 DEBUG AbstractConnection: fillInterested HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,3/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null}]
17/11/03 15:22:59 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null}]}
17/11/03 15:22:59 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null}]}
17/11/03 15:22:59 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}
17/11/03 15:22:59 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:22:59 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null}] onFillable exit HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}:runFillable
17/11/03 15:22:59 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:22:59 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:22:59 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:22:59 DEBUG ManagedSelector: Running change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}:runUpdateKey
17/11/03 15:22:59 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,2/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}
17/11/03 15:22:59 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:00 DEBUG ManagedSelector: Queued change org.spark_project.jetty.io.ManagedSelector$Accept@1ebfc8c5 on org.spark_project.jetty.io.ManagedSelector@38335c12 id=1 keys=0 selected=0
17/11/03 15:23:00 DEBUG ManagedSelector: Selector loop woken up from select, 0/0 selected
17/11/03 15:23:00 DEBUG ManagedSelector: Running change org.spark_project.jetty.io.ManagedSelector$Accept@1ebfc8c5
17/11/03 15:23:00 DEBUG ManagedSelector: Queued change org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@1a31fae2 on org.spark_project.jetty.io.ManagedSelector@38335c12 id=1 keys=1 selected=0
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 produced org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@1a31fae2
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 dispatch
17/11/03 15:23:00 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 run org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@1a31fae2
17/11/03 15:23:00 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 run
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 produce enter
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 producing
17/11/03 15:23:00 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:00 DEBUG AbstractEndPoint: onOpen SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0}
17/11/03 15:23:00 DEBUG IdleTimeout: SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0} idle timeout check, elapsed: 0 ms, remaining: 30000 ms
17/11/03 15:23:00 DEBUG HttpChannel: new HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null} -> SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0},null,HttpChannelState@bc529c0{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false}
17/11/03 15:23:00 DEBUG HttpConnection: New HTTP Connection HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}]
17/11/03 15:23:00 DEBUG AbstractConnection: onOpen HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,-,-,0/30000,HttpConnection@1eb634b0}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}]
17/11/03 15:23:00 DEBUG AbstractConnection: fillInterested HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,-,-,0/30000,HttpConnection@1eb634b0}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}]
17/11/03 15:23:00 DEBUG FillInterest: FillInterest@66eacf45{true,AC.ReadCB@1eb634b0{HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,0/30000,HttpConnection@1eb634b0}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@1eb634b0{HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,0/30000,HttpConnection@1eb634b0}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:00 DEBUG FillInterest: FillInterest@66eacf45{true,AC.ReadCB@1eb634b0{HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,0/30000,HttpConnection@1eb634b0}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@1eb634b0{HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,1/30000,HttpConnection@1eb634b0}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:00 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,1/30000,HttpConnection@1eb634b0}{io=0/1,kio=0,kro=0}
17/11/03 15:23:00 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,1/30000,HttpConnection@1eb634b0}{io=0/1,kio=0,kro=0}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@38335c12 id=1 keys=1 selected=0
17/11/03 15:23:00 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:23:00 DEBUG ManagedSelector: Running change SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,1/30000,HttpConnection@1eb634b0}{io=0/1,kio=0,kro=0}:runUpdateKey
17/11/03 15:23:00 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,1/30000,HttpConnection@1eb634b0}{io=1/1,kio=1,kro=0}
17/11/03 15:23:00 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:00 DEBUG ManagedSelector: Created SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,1/30000,HttpConnection@1eb634b0}{io=0/1,kio=0,kro=0}
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 ran org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@1a31fae2
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 produce exit
17/11/03 15:23:00 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9
17/11/03 15:23:00 DEBUG ManagedSelector: Selector loop woken up from select, 1/1 selected
17/11/03 15:23:00 DEBUG SelectChannelEndPoint: onSelected 1->0 r=true w=false for SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,570/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:23:00 DEBUG SelectChannelEndPoint: task SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,571/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,571/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:23:00 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,571/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:00 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,571/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null}]}} fillable AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,571/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,571/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null}] onFillable enter HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:23:00 DEBUG ChannelEndPoint: filled 363 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,571/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null}] filled 363 HeapByteBuffer@5b77d36c[p=0,l=363,c=8192,r=363]={<<<GET /favicon.ico ....8,en;q=0.6\r\n\r\n>>>d=0\r\nAccept-Encod...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=1,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=363,c=8192,r=363]={<<<GET /favicon.ico ....8,en;q=0.6\r\n\r\n>>>d=0\r\nAccept-Encod...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:23:00 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=363,c=8192,r=363]={<<<GET /favicon.ico ....8,en;q=0.6\r\n\r\n>>>d=0\r\nAccept-Encod...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:00 DEBUG HttpParser: START --> SPACE1
17/11/03 15:23:00 DEBUG HttpParser: SPACE1 --> URI
17/11/03 15:23:00 DEBUG HttpParser: URI --> SPACE2
17/11/03 15:23:00 DEBUG HttpParser: SPACE2 --> REQUEST_VERSION
17/11/03 15:23:00 DEBUG HttpParser: REQUEST_VERSION --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> END
17/11/03 15:23:00 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=//dev2:4040/favicon.ico} onRequestComplete
17/11/03 15:23:00 DEBUG HttpInput: HttpInputOverHTTP@16b9b8b2[c=0,q=1,[0]=EOF,s=STREAM] addContent EOF
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=//dev2:4040/favicon.ico}] parsed true HttpParser{s=END,0 of -1}
17/11/03 15:23:00 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=//dev2:4040/favicon.ico}]
17/11/03 15:23:00 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=//dev2:4040/favicon.ico} handle //dev2:4040/favicon.ico
17/11/03 15:23:00 DEBUG HttpChannelState: HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} handling IDLE
17/11/03 15:23:00 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=2,c=false,a=DISPATCHED,uri=//dev2:4040/favicon.ico} action DISPATCH
17/11/03 15:23:00 DEBUG Server: REQUEST on HttpChannelOverHttp@cb329ae{r=2,c=false,a=DISPATCHED,uri=//dev2:4040/favicon.ico}
GET /favicon.ico HTTP/1.1
Host: dev2:4040
Connection: keep-alive
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36
Accept: image/webp,image/apng,image/*,*/*;q=0.8
Referer: http://dev2:4040/SQL/
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6


17/11/03 15:23:00 DEBUG GzipHandler: org.spark_project.jetty.server.handler.gzip.GzipHandler@7c8cea75 handle Request(GET //dev2:4040/favicon.ico)@3b28f11c in null
17/11/03 15:23:00 DEBUG ContextHandler: scope null||/favicon.ico @ o.s.j.s.ServletContextHandler@6f731759{/,null,AVAILABLE,@Spark}
17/11/03 15:23:00 DEBUG ContextHandler: context=||/favicon.ico @ o.s.j.s.ServletContextHandler@6f731759{/,null,AVAILABLE,@Spark}
17/11/03 15:23:00 DEBUG ServletHandler: servlet |/favicon.ico|null -> org.apache.spark.ui.JettyUtils$$anon$4-310a7859@9e7e45df==org.apache.spark.ui.JettyUtils$$anon$4,-1,true
17/11/03 15:23:00 DEBUG ServletHandler: chain=null
17/11/03 15:23:00 DEBUG GzipHttpOutputInterceptor: org.spark_project.jetty.server.handler.gzip.GzipHttpOutputInterceptor@2f079d74 exclude by status 302
17/11/03 15:23:00 DEBUG HttpChannel: sendResponse info=null content=HeapByteBuffer@14eaec23[p=0,l=0,c=0,r=0]={<<<>>>} complete=true committing=true callback=Blocker@7cf2c4b7{null}
17/11/03 15:23:00 DEBUG HttpChannel: Commit HTTP/1.1{s=302,h=2} to HttpChannelOverHttp@cb329ae{r=2,c=true,a=DISPATCHED,uri=//dev2:4040/favicon.ico}
17/11/03 15:23:00 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=302,h=2},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@7007a4ca] generate: NEED_HEADER (null,[p=0,l=0,c=0,r=0],true)@START
17/11/03 15:23:00 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=302,h=2},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@7007a4ca] generate: FLUSH ([p=0,l=143,c=8192,r=143],[p=0,l=0,c=0,r=0],true)@COMPLETING
17/11/03 15:23:00 DEBUG WriteFlusher: write: WriteFlusher@33e516d4{IDLE} [HeapByteBuffer@5b77d36c[p=0,l=143,c=8192,r=143]={<<<HTTP/1.1 302 Foun...z-SNAPSHOT)\r\n\r\n>>>.36 (KHTML, like ...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}]
17/11/03 15:23:00 DEBUG WriteFlusher: update WriteFlusher@33e516d4{WRITING}:IDLE-->WRITING
17/11/03 15:23:00 DEBUG ChannelEndPoint: flushed 143 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,W,2/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:23:00 DEBUG WriteFlusher: Flushed=true 143/143+0 WriteFlusher@33e516d4{WRITING}
17/11/03 15:23:00 DEBUG WriteFlusher: update WriteFlusher@33e516d4{IDLE}:WRITING-->IDLE
17/11/03 15:23:00 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=302,h=2},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@7007a4ca] generate: DONE ([p=143,l=143,c=8192,r=0],[p=0,l=0,c=0,r=0],true)@END
17/11/03 15:23:00 DEBUG Server: RESPONSE for /favicon.ico h=true
302 null
Date: Fri, 03 Nov 2017 15:23:00 GMT
Location: http://dev2:4040/jobs/


17/11/03 15:23:00 DEBUG HttpChannelState: HttpChannelState@15b6801{s=DISPATCHED a=NOT_ASYNC i=true r=!P!U w=false} unhandle DISPATCHED
17/11/03 15:23:00 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=2,c=true,a=COMPLETING,uri=//dev2:4040/favicon.ico} action COMPLETE
17/11/03 15:23:00 DEBUG HttpParser: reset HttpParser{s=END,0 of -1}
17/11/03 15:23:00 DEBUG HttpParser: END --> START
17/11/03 15:23:00 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null} handle exit, result COMPLETE
17/11/03 15:23:00 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:23:00 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null}] filled 0 HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 302 Foun...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 302 Foun...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:23:00 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 302 Foun...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null}] parsed false HttpParser{s=START,0 of -1}
17/11/03 15:23:00 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null}]
17/11/03 15:23:00 DEBUG AbstractConnection: fillInterested HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null}]
17/11/03 15:23:00 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:23:00 DEBUG SelectChannelEndPoint: Key interests updated 1 -> 0 on SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:23:00 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:00 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:00 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:00 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}
17/11/03 15:23:00 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:23:00 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:23:00 DEBUG ManagedSelector: Running change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}:runUpdateKey
17/11/03 15:23:00 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}
17/11/03 15:23:00 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null}] onFillable exit HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}:runFillable
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:23:00 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:23:00 DEBUG ManagedSelector: Selector loop woken up from select, 1/1 selected
17/11/03 15:23:00 DEBUG SelectChannelEndPoint: onSelected 1->0 r=true w=false for SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,337/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:23:00 DEBUG SelectChannelEndPoint: task SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,337/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,337/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:23:00 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,337/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:00 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,337/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null}]}} fillable AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,337/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,337/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null}] onFillable enter HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:23:00 DEBUG ChannelEndPoint: filled 357 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,338/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null}] filled 357 HeapByteBuffer@5b77d36c[p=0,l=357,c=8192,r=357]={<<<GET /jobs/ HTTP/1....8,en;q=0.6\r\n\r\n>>>.6\r\n\r\nd=0\r\nAccept...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=2,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=357,c=8192,r=357]={<<<GET /jobs/ HTTP/1....8,en;q=0.6\r\n\r\n>>>.6\r\n\r\nd=0\r\nAccept...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:23:00 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=357,c=8192,r=357]={<<<GET /jobs/ HTTP/1....8,en;q=0.6\r\n\r\n>>>.6\r\n\r\nd=0\r\nAccept...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:00 DEBUG HttpParser: START --> SPACE1
17/11/03 15:23:00 DEBUG HttpParser: SPACE1 --> URI
17/11/03 15:23:00 DEBUG HttpParser: URI --> SPACE2
17/11/03 15:23:00 DEBUG HttpParser: SPACE2 --> REQUEST_VERSION
17/11/03 15:23:00 DEBUG HttpParser: REQUEST_VERSION --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:00 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:00 DEBUG HttpParser: HEADER --> END
17/11/03 15:23:00 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=//dev2:4040/jobs/} onRequestComplete
17/11/03 15:23:00 DEBUG HttpInput: HttpInputOverHTTP@16b9b8b2[c=0,q=1,[0]=EOF,s=STREAM] addContent EOF
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=//dev2:4040/jobs/}] parsed true HttpParser{s=END,0 of -1}
17/11/03 15:23:00 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=//dev2:4040/jobs/}]
17/11/03 15:23:00 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=//dev2:4040/jobs/} handle //dev2:4040/jobs/
17/11/03 15:23:00 DEBUG HttpChannelState: HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} handling IDLE
17/11/03 15:23:00 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=3,c=false,a=DISPATCHED,uri=//dev2:4040/jobs/} action DISPATCH
17/11/03 15:23:00 DEBUG Server: REQUEST on HttpChannelOverHttp@cb329ae{r=3,c=false,a=DISPATCHED,uri=//dev2:4040/jobs/}
GET /jobs/ HTTP/1.1
Host: dev2:4040
Connection: keep-alive
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36
Accept: image/webp,image/apng,image/*,*/*;q=0.8
Referer: http://dev2:4040/SQL/
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6


17/11/03 15:23:00 DEBUG GzipHandler: org.spark_project.jetty.server.handler.gzip.GzipHandler@4173905f handle Request(GET //dev2:4040/jobs/)@3b28f11c in null
17/11/03 15:23:00 DEBUG ContextHandler: scope null||/jobs/ @ o.s.j.s.ServletContextHandler@1f10fec6{/jobs,null,AVAILABLE,@Spark}
17/11/03 15:23:00 DEBUG ContextHandler: context=/jobs||/ @ o.s.j.s.ServletContextHandler@1f10fec6{/jobs,null,AVAILABLE,@Spark}
17/11/03 15:23:00 DEBUG ServletHandler: servlet /jobs|/|null -> org.apache.spark.ui.JettyUtils$$anon$3-1283ca23@1a8bdbe7==org.apache.spark.ui.JettyUtils$$anon$3,-1,true
17/11/03 15:23:00 DEBUG ServletHandler: chain=null
17/11/03 15:23:00 DEBUG SecurityManager: user=null aclsEnabled=false viewAcls=ec2-user viewAclsGroups=
17/11/03 15:23:00 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:23:00 DEBUG SelectChannelEndPoint: Key interests updated 1 -> 0 on SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,3/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:23:00 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:00 DEBUG Server: RESPONSE for /jobs/ h=true
200 null
Date: Fri, 03 Nov 2017 15:23:00 GMT
Content-Type: text/html;charset=utf-8
Cache-Control: no-cache, no-store, must-revalidate
X-Frame-Options: SAMEORIGIN


17/11/03 15:23:00 DEBUG HttpChannelState: HttpChannelState@15b6801{s=DISPATCHED a=NOT_ASYNC i=true r=!P!U w=false} unhandle DISPATCHED
17/11/03 15:23:00 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=3,c=false,a=COMPLETING,uri=//dev2:4040/jobs/} action COMPLETE
17/11/03 15:23:00 DEBUG GzipHttpOutputInterceptor: org.spark_project.jetty.server.handler.gzip.GzipHttpOutputInterceptor@bdc8ef compressing java.util.zip.Deflater@60570ba6
17/11/03 15:23:00 DEBUG HttpChannel: sendResponse info=null content=HeapByteBuffer@1597676e[p=0,l=2565,c=32768,r=2565]={<<<\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x00\xEd[\xEbs\xDb6\x12...H\xFf\x97\x89\xC9\x00\x92\x15\xE6\xFb\x911\x00\x00>>>   <strong>Total ...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} complete=true committing=true callback=GzipBufferCB@165528ac
17/11/03 15:23:00 DEBUG HttpChannel: Commit HTTP/1.1{s=200,h=6} to HttpChannelOverHttp@cb329ae{r=3,c=true,a=COMPLETING,uri=//dev2:4040/jobs/}
17/11/03 15:23:00 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=200,h=6},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@19555446] generate: NEED_HEADER (null,[p=0,l=2565,c=32768,r=2565],true)@START
17/11/03 15:23:00 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=200,h=6},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@19555446] generate: FLUSH ([p=0,l=288,c=8192,r=288],[p=0,l=2565,c=32768,r=2565],true)@COMPLETING
17/11/03 15:23:00 DEBUG WriteFlusher: write: WriteFlusher@33e516d4{IDLE} [HeapByteBuffer@5b77d36c[p=0,l=288,c=8192,r=288]={<<<HTTP/1.1 200 OK\r\n...z-SNAPSHOT)\r\n\r\n>>>oding: gzip, defl...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00},HeapByteBuffer@1597676e[p=0,l=2565,c=32768,r=2565]={<<<\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x00\xEd[\xEbs\xDb6\x12...H\xFf\x97\x89\xC9\x00\x92\x15\xE6\xFb\x911\x00\x00>>>   <strong>Total ...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}]
17/11/03 15:23:00 DEBUG WriteFlusher: update WriteFlusher@33e516d4{WRITING}:IDLE-->WRITING
17/11/03 15:23:00 DEBUG ChannelEndPoint: flushed 2853 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,W,18/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:23:00 DEBUG WriteFlusher: Flushed=true 288/288+1 WriteFlusher@33e516d4{WRITING}
17/11/03 15:23:00 DEBUG WriteFlusher: update WriteFlusher@33e516d4{IDLE}:WRITING-->IDLE
17/11/03 15:23:00 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=200,h=6},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@19555446] generate: DONE ([p=288,l=288,c=8192,r=0],[p=2565,l=2565,c=32768,r=0],true)@END
17/11/03 15:23:00 DEBUG HttpParser: reset HttpParser{s=END,0 of -1}
17/11/03 15:23:00 DEBUG HttpParser: END --> START
17/11/03 15:23:00 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null} handle exit, result COMPLETE
17/11/03 15:23:00 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:23:00 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null}] filled 0 HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:23:00 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null}] parsed false HttpParser{s=START,0 of -1}
17/11/03 15:23:00 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null}]
17/11/03 15:23:00 DEBUG AbstractConnection: fillInterested HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null}]
17/11/03 15:23:00 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:00 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:00 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}
17/11/03 15:23:00 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:23:00 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:23:00 DEBUG ManagedSelector: Running change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}:runUpdateKey
17/11/03 15:23:00 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}
17/11/03 15:23:00 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:00 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null}] onFillable exit HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}:runFillable
17/11/03 15:23:00 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:23:00 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:23:00 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00004-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, range: 0-911569, partition values: [empty row]
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #361
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #361
17/11/03 15:23:00 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #362
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #362
17/11/03 15:23:00 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:00 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=911569
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043370_302599; getBlockSize()=911569; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043370_302599; getBlockSize()=911569; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #363
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #363
17/11/03 15:23:00 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:00 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00004-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043370_302599): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:00 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:00 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00004-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:00 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:00 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, range: 0-941916, partition values: [empty row]
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #364
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #365
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #364
17/11/03 15:23:00 DEBUG ProtobufRpcEngine: Call: getFileInfo took 5ms
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #365
17/11/03 15:23:00 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 3ms
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #366
17/11/03 15:23:00 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=911569
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043370_302599; getBlockSize()=911569; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043370_302599; getBlockSize()=911569; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #366
17/11/03 15:23:00 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #367
17/11/03 15:23:00 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=941916
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043409_302638; getBlockSize()=941916; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043409_302638; getBlockSize()=941916; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #368
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #367
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #368
17/11/03 15:23:00 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:23:00 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00004-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043370_302599): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:00 DEBUG ProtobufRpcEngine: Call: getFileInfo took 2ms
17/11/03 15:23:00 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043409_302638): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:00 DEBUG BlockReaderFactory: Closed potentially stale remote peer NioInetPeer(Socket[addr=/172.30.1.218,port=50010,localport=46066])
java.io.EOFException: Premature EOF: no length prefix available
	at org.apache.hadoop.hdfs.protocolPB.PBHelper.vintPrefixed(PBHelper.java:2282)
	at org.apache.hadoop.hdfs.RemoteBlockReader2.newBlockReader(RemoteBlockReader2.java:423)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReader(BlockReaderFactory.java:818)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReaderFromTcp(BlockReaderFactory.java:697)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:673)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:882)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:934)
	at java.io.DataInputStream.readFully(DataInputStream.java:195)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.extractMetaInfoFromFooter(ReaderImpl.java:369)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.<init>(ReaderImpl.java:316)
	at org.apache.hadoop.hive.ql.io.orc.OrcFile.createReader(OrcFile.java:187)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$getFileReader$2.apply(OrcFileOperator.scala:68)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$getFileReader$2.apply(OrcFileOperator.scala:67)
	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409)
	at scala.collection.TraversableOnce$class.collectFirst(TraversableOnce.scala:145)
	at scala.collection.AbstractIterator.collectFirst(Iterator.scala:1336)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$.getFileReader(OrcFileOperator.scala:69)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$readSchema$1.apply(OrcFileOperator.scala:77)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$readSchema$1.apply(OrcFileOperator.scala:77)
	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
	at scala.collection.immutable.List.flatMap(List.scala:344)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$.readSchema(OrcFileOperator.scala:77)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:137)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:131)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(FileFormat.scala:136)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(FileFormat.scala:120)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.org$apache$spark$sql$execution$datasources$FileScanRDD$$anon$$readCurrentFile(FileScanRDD.scala:124)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.nextIterator(FileScanRDD.scala:174)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:105)
	at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIterator.processNext(generated.java:38)
	at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)
	at org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1.hasNext(WholeStageCodegenExec.scala:395)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:234)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:228)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:827)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:827)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87)
	at org.apache.spark.scheduler.Task.run(Task.scala:108)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:335)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
17/11/03 15:23:00 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:23:00 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00004-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 911569}
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #369
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #369
17/11/03 15:23:00 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:00 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=911569
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043370_302599; getBlockSize()=911569; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043370_302599; getBlockSize()=911569; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:00 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:23:00 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00004-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043370_302599): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:00 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:00 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:00 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #370
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #370
17/11/03 15:23:00 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:23:00 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=941916
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043409_302638; getBlockSize()=941916; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043409_302638; getBlockSize()=941916; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #371
17/11/03 15:23:00 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #371
17/11/03 15:23:00 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:23:00 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:23:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043409_302638): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:00 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:23:01 DEBUG RecordReaderImpl: chunks = [range start: 18721 end: 906977]
17/11/03 15:23:01 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:01 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00004-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043370_302599): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:01 DEBUG RecordReaderImpl: merge = [data range [18721, 906977), size: 888256 type: array-backed]
17/11/03 15:23:01 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:23:01 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 941916}
17/11/03 15:23:01 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #372
17/11/03 15:23:01 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #372
17/11/03 15:23:01 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:23:01 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=941916
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043409_302638; getBlockSize()=941916; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043409_302638; getBlockSize()=941916; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:01 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:23:01 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:23:01 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043409_302638): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:01 DEBUG RecordReaderImpl: chunks = [range start: 18745 end: 937270]
17/11/03 15:23:01 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:23:01 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043409_302638): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:01 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:23:01 DEBUG RecordReaderImpl: merge = [data range [18745, 937270), size: 918525 type: array-backed]
17/11/03 15:23:01 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:23:01 DEBUG ManagedSelector: Selector loop woken up from select, 1/1 selected
17/11/03 15:23:01 DEBUG SelectChannelEndPoint: onSelected 1->0 r=true w=false for SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1169/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:23:01 DEBUG SelectChannelEndPoint: task SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1170/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:01 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1170/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:01 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:23:01 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:23:01 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1170/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:01 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1170/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null}]}} fillable AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1170/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:01 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1170/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null}] onFillable enter HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:23:01 DEBUG ChannelEndPoint: filled 432 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1170/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:23:01 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null}] filled 432 HeapByteBuffer@5b77d36c[p=0,l=432,c=8192,r=432]={<<<GET /SQL/ HTTP/1.....8,en;q=0.6\r\n\r\n>>>.8,en;q=0.6\r\n\r\n\x00\x00...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:01 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=3,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=432,c=8192,r=432]={<<<GET /SQL/ HTTP/1.....8,en;q=0.6\r\n\r\n>>>.8,en;q=0.6\r\n\r\n\x00\x00...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:23:01 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=432,c=8192,r=432]={<<<GET /SQL/ HTTP/1.....8,en;q=0.6\r\n\r\n>>>.8,en;q=0.6\r\n\r\n\x00\x00...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:01 DEBUG HttpParser: START --> SPACE1
17/11/03 15:23:01 DEBUG HttpParser: SPACE1 --> URI
17/11/03 15:23:01 DEBUG HttpParser: URI --> SPACE2
17/11/03 15:23:01 DEBUG HttpParser: SPACE2 --> REQUEST_VERSION
17/11/03 15:23:01 DEBUG HttpParser: REQUEST_VERSION --> HEADER
17/11/03 15:23:01 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:01 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:01 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:01 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:01 DEBUG HttpParser: HEADER --> HEADER_IN_NAME
17/11/03 15:23:01 DEBUG HttpParser: HEADER_IN_NAME --> HEADER_VALUE
17/11/03 15:23:01 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:23:01 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:01 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:01 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:01 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:01 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:01 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:23:01 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:23:01 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:01 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:01 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:01 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:01 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:01 DEBUG HttpParser: HEADER --> END
17/11/03 15:23:01 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=//dev2:4040/SQL/} onRequestComplete
17/11/03 15:23:01 DEBUG HttpInput: HttpInputOverHTTP@16b9b8b2[c=0,q=1,[0]=EOF,s=STREAM] addContent EOF
17/11/03 15:23:01 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=//dev2:4040/SQL/}] parsed true HttpParser{s=END,0 of -1}
17/11/03 15:23:01 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=//dev2:4040/SQL/}]
17/11/03 15:23:01 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=//dev2:4040/SQL/} handle //dev2:4040/SQL/
17/11/03 15:23:01 DEBUG HttpChannelState: HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} handling IDLE
17/11/03 15:23:01 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=4,c=false,a=DISPATCHED,uri=//dev2:4040/SQL/} action DISPATCH
17/11/03 15:23:01 DEBUG Server: REQUEST on HttpChannelOverHttp@cb329ae{r=4,c=false,a=DISPATCHED,uri=//dev2:4040/SQL/}
GET /SQL/ HTTP/1.1
Host: dev2:4040
Connection: keep-alive
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Referer: http://dev2:4040/SQL/
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6


17/11/03 15:23:01 DEBUG ContextHandler: scope null||/SQL/ @ o.s.j.s.ServletContextHandler@3feebf9c{/SQL,null,AVAILABLE,@Spark}
17/11/03 15:23:01 DEBUG ContextHandler: context=/SQL||/ @ o.s.j.s.ServletContextHandler@3feebf9c{/SQL,null,AVAILABLE,@Spark}
17/11/03 15:23:01 DEBUG ServletHandler: servlet /SQL|/|null -> org.apache.spark.ui.JettyUtils$$anon$3-a4df251@4487270d==org.apache.spark.ui.JettyUtils$$anon$3,-1,true
17/11/03 15:23:01 DEBUG ServletHandler: chain=null
17/11/03 15:23:01 DEBUG SecurityManager: user=null aclsEnabled=false viewAcls=ec2-user viewAclsGroups=
17/11/03 15:23:01 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:23:01 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:23:01 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:23:01 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:23:01 DEBUG SelectChannelEndPoint: Key interests updated 1 -> 0 on SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,2/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:23:01 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:01 DEBUG Server: RESPONSE for /SQL/ h=true
200 null
Date: Fri, 03 Nov 2017 15:23:01 GMT
Content-Type: text/html;charset=utf-8
Cache-Control: no-cache, no-store, must-revalidate
X-Frame-Options: SAMEORIGIN


17/11/03 15:23:01 DEBUG HttpChannelState: HttpChannelState@15b6801{s=DISPATCHED a=NOT_ASYNC i=true r=!P!U w=false} unhandle DISPATCHED
17/11/03 15:23:01 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=4,c=false,a=COMPLETING,uri=//dev2:4040/SQL/} action COMPLETE
17/11/03 15:23:01 DEBUG HttpChannel: sendResponse info=null content=DirectByteBuffer@1d7a0772[p=0,l=6866,c=32768,r=6866]={<<<<!DOCTYPE html><h...dy>\n    </html>>>>c_customer_sk__cu...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} complete=true committing=true callback=Blocker@7cf2c4b7{null}
17/11/03 15:23:01 DEBUG HttpChannel: Commit HTTP/1.1{s=200,h=4} to HttpChannelOverHttp@cb329ae{r=4,c=true,a=COMPLETING,uri=//dev2:4040/SQL/}
17/11/03 15:23:01 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=200,h=4},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@6b90d664] generate: NEED_HEADER (null,[p=0,l=6866,c=32768,r=6866],true)@START
17/11/03 15:23:01 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=200,h=4},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@6b90d664] generate: FLUSH ([p=0,l=229,c=8192,r=229],[p=0,l=6866,c=32768,r=6866],true)@COMPLETING
17/11/03 15:23:01 DEBUG WriteFlusher: write: WriteFlusher@33e516d4{IDLE} [HeapByteBuffer@5b77d36c[p=0,l=229,c=8192,r=229]={<<<HTTP/1.1 200 OK\r\n...z-SNAPSHOT)\r\n\r\n>>>ept: text/html,ap...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00},DirectByteBuffer@1d7a0772[p=0,l=6866,c=32768,r=6866]={<<<<!DOCTYPE html><h...dy>\n    </html>>>>c_customer_sk__cu...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}]
17/11/03 15:23:01 DEBUG WriteFlusher: update WriteFlusher@33e516d4{WRITING}:IDLE-->WRITING
17/11/03 15:23:01 DEBUG ChannelEndPoint: flushed 7095 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,W,8/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:23:01 DEBUG WriteFlusher: Flushed=true 229/229+1 WriteFlusher@33e516d4{WRITING}
17/11/03 15:23:01 DEBUG WriteFlusher: update WriteFlusher@33e516d4{IDLE}:WRITING-->IDLE
17/11/03 15:23:01 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=200,h=4},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@6b90d664] generate: DONE ([p=229,l=229,c=8192,r=0],[p=6866,l=6866,c=32768,r=0],true)@END
17/11/03 15:23:01 DEBUG HttpParser: reset HttpParser{s=END,0 of -1}
17/11/03 15:23:01 DEBUG HttpParser: END --> START
17/11/03 15:23:01 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null} handle exit, result COMPLETE
17/11/03 15:23:01 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:23:01 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:23:01 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null}] filled 0 HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:01 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:23:01 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:01 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null}] parsed false HttpParser{s=START,0 of -1}
17/11/03 15:23:01 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null}]
17/11/03 15:23:01 DEBUG AbstractConnection: fillInterested HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null}]
17/11/03 15:23:01 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:01 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:01 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}
17/11/03 15:23:01 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:23:01 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:23:01 DEBUG ManagedSelector: Running change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}:runUpdateKey
17/11/03 15:23:01 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}
17/11/03 15:23:01 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:01 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null}] onFillable exit HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:23:01 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}:runFillable
17/11/03 15:23:01 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:23:01 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:23:02 DEBUG ManagedSelector: Selector loop woken up from select, 1/1 selected
17/11/03 15:23:02 DEBUG SelectChannelEndPoint: onSelected 1->0 r=true w=false for SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,428/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:23:02 DEBUG SelectChannelEndPoint: task SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,428/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,428/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:23:02 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,428/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:02 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,429/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null}]}} fillable AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,429/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,429/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null}] onFillable enter HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:23:02 DEBUG ChannelEndPoint: filled 363 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,429/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null}] filled 363 HeapByteBuffer@5b77d36c[p=0,l=363,c=8192,r=363]={<<<GET /favicon.ico ....8,en;q=0.6\r\n\r\n>>>oding: gzip, defl...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=4,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=363,c=8192,r=363]={<<<GET /favicon.ico ....8,en;q=0.6\r\n\r\n>>>oding: gzip, defl...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:23:02 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=363,c=8192,r=363]={<<<GET /favicon.ico ....8,en;q=0.6\r\n\r\n>>>oding: gzip, defl...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:02 DEBUG HttpParser: START --> SPACE1
17/11/03 15:23:02 DEBUG HttpParser: SPACE1 --> URI
17/11/03 15:23:02 DEBUG HttpParser: URI --> SPACE2
17/11/03 15:23:02 DEBUG HttpParser: SPACE2 --> REQUEST_VERSION
17/11/03 15:23:02 DEBUG HttpParser: REQUEST_VERSION --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> END
17/11/03 15:23:02 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=//dev2:4040/favicon.ico} onRequestComplete
17/11/03 15:23:02 DEBUG HttpInput: HttpInputOverHTTP@16b9b8b2[c=0,q=1,[0]=EOF,s=STREAM] addContent EOF
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=//dev2:4040/favicon.ico}] parsed true HttpParser{s=END,0 of -1}
17/11/03 15:23:02 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=//dev2:4040/favicon.ico}]
17/11/03 15:23:02 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=//dev2:4040/favicon.ico} handle //dev2:4040/favicon.ico
17/11/03 15:23:02 DEBUG HttpChannelState: HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} handling IDLE
17/11/03 15:23:02 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=5,c=false,a=DISPATCHED,uri=//dev2:4040/favicon.ico} action DISPATCH
17/11/03 15:23:02 DEBUG Server: REQUEST on HttpChannelOverHttp@cb329ae{r=5,c=false,a=DISPATCHED,uri=//dev2:4040/favicon.ico}
GET /favicon.ico HTTP/1.1
Host: dev2:4040
Connection: keep-alive
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36
Accept: image/webp,image/apng,image/*,*/*;q=0.8
Referer: http://dev2:4040/SQL/
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6


17/11/03 15:23:02 DEBUG GzipHandler: org.spark_project.jetty.server.handler.gzip.GzipHandler@7c8cea75 handle Request(GET //dev2:4040/favicon.ico)@3b28f11c in null
17/11/03 15:23:02 DEBUG ContextHandler: scope null||/favicon.ico @ o.s.j.s.ServletContextHandler@6f731759{/,null,AVAILABLE,@Spark}
17/11/03 15:23:02 DEBUG ContextHandler: context=||/favicon.ico @ o.s.j.s.ServletContextHandler@6f731759{/,null,AVAILABLE,@Spark}
17/11/03 15:23:02 DEBUG ServletHandler: servlet |/favicon.ico|null -> org.apache.spark.ui.JettyUtils$$anon$4-310a7859@9e7e45df==org.apache.spark.ui.JettyUtils$$anon$4,-1,true
17/11/03 15:23:02 DEBUG ServletHandler: chain=null
17/11/03 15:23:02 DEBUG GzipHttpOutputInterceptor: org.spark_project.jetty.server.handler.gzip.GzipHttpOutputInterceptor@36dda013 exclude by status 302
17/11/03 15:23:02 DEBUG HttpChannel: sendResponse info=null content=HeapByteBuffer@14eaec23[p=0,l=0,c=0,r=0]={<<<>>>} complete=true committing=true callback=Blocker@7cf2c4b7{null}
17/11/03 15:23:02 DEBUG HttpChannel: Commit HTTP/1.1{s=302,h=2} to HttpChannelOverHttp@cb329ae{r=5,c=true,a=DISPATCHED,uri=//dev2:4040/favicon.ico}
17/11/03 15:23:02 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=302,h=2},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@20371b3d] generate: NEED_HEADER (null,[p=0,l=0,c=0,r=0],true)@START
17/11/03 15:23:02 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=302,h=2},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@20371b3d] generate: FLUSH ([p=0,l=143,c=8192,r=143],[p=0,l=0,c=0,r=0],true)@COMPLETING
17/11/03 15:23:02 DEBUG WriteFlusher: write: WriteFlusher@33e516d4{IDLE} [HeapByteBuffer@5b77d36c[p=0,l=143,c=8192,r=143]={<<<HTTP/1.1 302 Foun...z-SNAPSHOT)\r\n\r\n>>>.36 (KHTML, like ...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}]
17/11/03 15:23:02 DEBUG WriteFlusher: update WriteFlusher@33e516d4{WRITING}:IDLE-->WRITING
17/11/03 15:23:02 DEBUG ChannelEndPoint: flushed 143 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,W,2/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:23:02 DEBUG WriteFlusher: Flushed=true 143/143+0 WriteFlusher@33e516d4{WRITING}
17/11/03 15:23:02 DEBUG WriteFlusher: update WriteFlusher@33e516d4{IDLE}:WRITING-->IDLE
17/11/03 15:23:02 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=302,h=2},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@20371b3d] generate: DONE ([p=143,l=143,c=8192,r=0],[p=0,l=0,c=0,r=0],true)@END
17/11/03 15:23:02 DEBUG Server: RESPONSE for /favicon.ico h=true
302 null
Date: Fri, 03 Nov 2017 15:23:02 GMT
Location: http://dev2:4040/jobs/


17/11/03 15:23:02 DEBUG HttpChannelState: HttpChannelState@15b6801{s=DISPATCHED a=NOT_ASYNC i=true r=!P!U w=false} unhandle DISPATCHED
17/11/03 15:23:02 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=5,c=true,a=COMPLETING,uri=//dev2:4040/favicon.ico} action COMPLETE
17/11/03 15:23:02 DEBUG HttpParser: reset HttpParser{s=END,0 of -1}
17/11/03 15:23:02 DEBUG HttpParser: END --> START
17/11/03 15:23:02 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null} handle exit, result COMPLETE
17/11/03 15:23:02 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:23:02 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null}] filled 0 HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 302 Foun...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 302 Foun...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:23:02 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 302 Foun...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null}] parsed false HttpParser{s=START,0 of -1}
17/11/03 15:23:02 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null}]
17/11/03 15:23:02 DEBUG AbstractConnection: fillInterested HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null}]
17/11/03 15:23:02 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:23:02 DEBUG SelectChannelEndPoint: Key interests updated 1 -> 0 on SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:23:02 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:02 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:02 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:02 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}
17/11/03 15:23:02 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:23:02 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:23:02 DEBUG ManagedSelector: Running change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}:runUpdateKey
17/11/03 15:23:02 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}
17/11/03 15:23:02 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null}] onFillable exit HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}:runFillable
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:23:02 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:23:02 DEBUG ManagedSelector: Selector loop woken up from select, 1/1 selected
17/11/03 15:23:02 DEBUG SelectChannelEndPoint: onSelected 1->0 r=true w=false for SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,313/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}
17/11/03 15:23:02 DEBUG SelectChannelEndPoint: task SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,313/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,313/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:23:02 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,313/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:02 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:23:02 DEBUG SelectChannelEndPoint: Key interests updated 1 -> 0 on SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,313/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:23:02 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:02 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,313/30000,HttpConnection@3d756134}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null}]}} fillable AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,313/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,313/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null}] onFillable enter HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:23:02 DEBUG ChannelEndPoint: filled 357 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,314/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null}] filled 357 HeapByteBuffer@5b77d36c[p=0,l=357,c=8192,r=357]={<<<GET /jobs/ HTTP/1....8,en;q=0.6\r\n\r\n>>>.6\r\n\r\noding: gzip...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=5,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=357,c=8192,r=357]={<<<GET /jobs/ HTTP/1....8,en;q=0.6\r\n\r\n>>>.6\r\n\r\noding: gzip...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:23:02 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=357,c=8192,r=357]={<<<GET /jobs/ HTTP/1....8,en;q=0.6\r\n\r\n>>>.6\r\n\r\noding: gzip...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:02 DEBUG HttpParser: START --> SPACE1
17/11/03 15:23:02 DEBUG HttpParser: SPACE1 --> URI
17/11/03 15:23:02 DEBUG HttpParser: URI --> SPACE2
17/11/03 15:23:02 DEBUG HttpParser: SPACE2 --> REQUEST_VERSION
17/11/03 15:23:02 DEBUG HttpParser: REQUEST_VERSION --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:23:02 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:23:02 DEBUG HttpParser: HEADER --> END
17/11/03 15:23:02 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=//dev2:4040/jobs/} onRequestComplete
17/11/03 15:23:02 DEBUG HttpInput: HttpInputOverHTTP@16b9b8b2[c=0,q=1,[0]=EOF,s=STREAM] addContent EOF
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=//dev2:4040/jobs/}] parsed true HttpParser{s=END,0 of -1}
17/11/03 15:23:02 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=//dev2:4040/jobs/}]
17/11/03 15:23:02 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=//dev2:4040/jobs/} handle //dev2:4040/jobs/
17/11/03 15:23:02 DEBUG HttpChannelState: HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} handling IDLE
17/11/03 15:23:02 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=6,c=false,a=DISPATCHED,uri=//dev2:4040/jobs/} action DISPATCH
17/11/03 15:23:02 DEBUG Server: REQUEST on HttpChannelOverHttp@cb329ae{r=6,c=false,a=DISPATCHED,uri=//dev2:4040/jobs/}
GET /jobs/ HTTP/1.1
Host: dev2:4040
Connection: keep-alive
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36
Accept: image/webp,image/apng,image/*,*/*;q=0.8
Referer: http://dev2:4040/SQL/
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6


17/11/03 15:23:02 DEBUG GzipHandler: org.spark_project.jetty.server.handler.gzip.GzipHandler@4173905f handle Request(GET //dev2:4040/jobs/)@3b28f11c in null
17/11/03 15:23:02 DEBUG ContextHandler: scope null||/jobs/ @ o.s.j.s.ServletContextHandler@1f10fec6{/jobs,null,AVAILABLE,@Spark}
17/11/03 15:23:02 DEBUG ContextHandler: context=/jobs||/ @ o.s.j.s.ServletContextHandler@1f10fec6{/jobs,null,AVAILABLE,@Spark}
17/11/03 15:23:02 DEBUG ServletHandler: servlet /jobs|/|null -> org.apache.spark.ui.JettyUtils$$anon$3-1283ca23@1a8bdbe7==org.apache.spark.ui.JettyUtils$$anon$3,-1,true
17/11/03 15:23:02 DEBUG ServletHandler: chain=null
17/11/03 15:23:02 DEBUG SecurityManager: user=null aclsEnabled=false viewAcls=ec2-user viewAclsGroups=
17/11/03 15:23:02 DEBUG Server: RESPONSE for /jobs/ h=true
200 null
Date: Fri, 03 Nov 2017 15:23:02 GMT
Content-Type: text/html;charset=utf-8
Cache-Control: no-cache, no-store, must-revalidate
X-Frame-Options: SAMEORIGIN


17/11/03 15:23:02 DEBUG HttpChannelState: HttpChannelState@15b6801{s=DISPATCHED a=NOT_ASYNC i=true r=!P!U w=false} unhandle DISPATCHED
17/11/03 15:23:02 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=6,c=false,a=COMPLETING,uri=//dev2:4040/jobs/} action COMPLETE
17/11/03 15:23:02 DEBUG GzipHttpOutputInterceptor: org.spark_project.jetty.server.handler.gzip.GzipHttpOutputInterceptor@6e522192 compressing java.util.zip.Deflater@fd25cba
17/11/03 15:23:02 DEBUG HttpChannel: sendResponse info=null content=HeapByteBuffer@8c9e07c[p=0,l=2564,c=32768,r=2564]={<<<\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x00\xEd[\xEbs\xDb6\x12...H\xFf\x97\x89\xC9\x00#A\xB8\x94\x911\x00\x00>>>    <strong>Total...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} complete=true committing=true callback=GzipBufferCB@6173f7f8
17/11/03 15:23:02 DEBUG HttpChannel: Commit HTTP/1.1{s=200,h=6} to HttpChannelOverHttp@cb329ae{r=6,c=true,a=COMPLETING,uri=//dev2:4040/jobs/}
17/11/03 15:23:02 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=200,h=6},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@af36f2a] generate: NEED_HEADER (null,[p=0,l=2564,c=32768,r=2564],true)@START
17/11/03 15:23:02 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=200,h=6},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@af36f2a] generate: FLUSH ([p=0,l=288,c=8192,r=288],[p=0,l=2564,c=32768,r=2564],true)@COMPLETING
17/11/03 15:23:02 DEBUG WriteFlusher: write: WriteFlusher@33e516d4{IDLE} [HeapByteBuffer@5b77d36c[p=0,l=288,c=8192,r=288]={<<<HTTP/1.1 200 OK\r\n...z-SNAPSHOT)\r\n\r\n>>>oding: gzip, defl...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00},HeapByteBuffer@8c9e07c[p=0,l=2564,c=32768,r=2564]={<<<\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x00\xEd[\xEbs\xDb6\x12...H\xFf\x97\x89\xC9\x00#A\xB8\x94\x911\x00\x00>>>    <strong>Total...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}]
17/11/03 15:23:02 DEBUG WriteFlusher: update WriteFlusher@33e516d4{WRITING}:IDLE-->WRITING
17/11/03 15:23:02 DEBUG ChannelEndPoint: flushed 2852 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,W,13/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:23:02 DEBUG WriteFlusher: Flushed=true 288/288+1 WriteFlusher@33e516d4{WRITING}
17/11/03 15:23:02 DEBUG WriteFlusher: update WriteFlusher@33e516d4{IDLE}:WRITING-->IDLE
17/11/03 15:23:02 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@5674512b[PROCESSING][i=HTTP/1.1{s=200,h=6},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@af36f2a] generate: DONE ([p=288,l=288,c=8192,r=0],[p=2564,l=2564,c=32768,r=0],true)@END
17/11/03 15:23:02 DEBUG HttpParser: reset HttpParser{s=END,0 of -1}
17/11/03 15:23:02 DEBUG HttpParser: END --> START
17/11/03 15:23:02 DEBUG HttpChannel: HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null} handle exit, result COMPLETE
17/11/03 15:23:02 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:23:02 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}] filled 0 HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:23:02 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}] parsed false HttpParser{s=START,0 of -1}
17/11/03 15:23:02 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}]
17/11/03 15:23:02 DEBUG AbstractConnection: fillInterested HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}]
17/11/03 15:23:02 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,0/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:02 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:02 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}
17/11/03 15:23:02 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:23:02 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:23:02 DEBUG HttpConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}] onFillable exit HttpChannelState@15b6801{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:23:02 DEBUG ManagedSelector: Running change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=0/1,kio=0,kro=1}:runUpdateKey
17/11/03 15:23:02 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}
17/11/03 15:23:02 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=0,kro=1}:runFillable
17/11/03 15:23:02 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:23:02 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:23:07 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00007-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, range: 0-904387, partition values: [empty row]
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #373
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #373
17/11/03 15:23:07 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #374
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #374
17/11/03 15:23:07 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:07 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=904387
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043404_302633; getBlockSize()=904387; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043404_302633; getBlockSize()=904387; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #375
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #375
17/11/03 15:23:07 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:07 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:07 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00007-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043404_302633): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:07 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:23:07 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, range: 0-2871813, partition values: [empty row]
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #376
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #376
17/11/03 15:23:07 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:07 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00007-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:07 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #377
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #377
17/11/03 15:23:07 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:07 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2871813
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646; getBlockSize()=2871813; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646; getBlockSize()=2871813; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #378
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #378
17/11/03 15:23:07 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:07 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:07 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:07 DEBUG BlockReaderFactory: Closed potentially stale remote peer NioInetPeer(Socket[addr=/172.30.1.218,port=50010,localport=46076])
java.io.EOFException: Premature EOF: no length prefix available
	at org.apache.hadoop.hdfs.protocolPB.PBHelper.vintPrefixed(PBHelper.java:2282)
	at org.apache.hadoop.hdfs.RemoteBlockReader2.newBlockReader(RemoteBlockReader2.java:423)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReader(BlockReaderFactory.java:818)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReaderFromTcp(BlockReaderFactory.java:697)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:673)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:882)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:934)
	at java.io.DataInputStream.readFully(DataInputStream.java:195)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.extractMetaInfoFromFooter(ReaderImpl.java:369)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.<init>(ReaderImpl.java:316)
	at org.apache.hadoop.hive.ql.io.orc.OrcFile.createReader(OrcFile.java:187)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$getFileReader$2.apply(OrcFileOperator.scala:68)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$getFileReader$2.apply(OrcFileOperator.scala:67)
	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409)
	at scala.collection.TraversableOnce$class.collectFirst(TraversableOnce.scala:145)
	at scala.collection.AbstractIterator.collectFirst(Iterator.scala:1336)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$.getFileReader(OrcFileOperator.scala:69)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$readSchema$1.apply(OrcFileOperator.scala:77)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$readSchema$1.apply(OrcFileOperator.scala:77)
	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
	at scala.collection.immutable.List.flatMap(List.scala:344)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$.readSchema(OrcFileOperator.scala:77)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:137)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:131)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(FileFormat.scala:136)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(FileFormat.scala:120)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.org$apache$spark$sql$execution$datasources$FileScanRDD$$anon$$readCurrentFile(FileScanRDD.scala:124)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.nextIterator(FileScanRDD.scala:174)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:105)
	at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIterator.processNext(generated.java:38)
	at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)
	at org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1.hasNext(WholeStageCodegenExec.scala:395)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:234)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:228)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:827)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:827)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87)
	at org.apache.spark.scheduler.Task.run(Task.scala:108)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:335)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #379
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #379
17/11/03 15:23:07 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:07 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:07 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=904387
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043404_302633; getBlockSize()=904387; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043404_302633; getBlockSize()=904387; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #380
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #380
17/11/03 15:23:07 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:23:07 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:07 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00007-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043404_302633): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:07 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:07 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:07 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:07 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:23:07 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00007-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 904387}
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #381
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #381
17/11/03 15:23:07 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 2ms
17/11/03 15:23:07 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=904387
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043404_302633; getBlockSize()=904387; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043404_302633; getBlockSize()=904387; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:07 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:23:07 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:23:07 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00007-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043404_302633): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #382
17/11/03 15:23:07 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #382
17/11/03 15:23:07 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:23:07 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2871813
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646; getBlockSize()=2871813; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646; getBlockSize()=2871813; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #383
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #383
17/11/03 15:23:07 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:07 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:07 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:07 DEBUG RecordReaderImpl: chunks = [range start: 18719 end: 899734]
17/11/03 15:23:07 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:23:07 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00007-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043404_302633): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:07 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:23:07 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 2871813}
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #384
17/11/03 15:23:07 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #384
17/11/03 15:23:07 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:07 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2871813
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646; getBlockSize()=2871813; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646; getBlockSize()=2871813; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:07 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:23:07 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:07 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:07 DEBUG RecordReaderImpl: merge = [data range [18719, 899734), size: 881015 type: array-backed]
17/11/03 15:23:07 DEBUG RecordReaderImpl: chunks = [range start: 20205 end: 986214]
17/11/03 15:23:07 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:07 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:07 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:23:07 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:23:07 DEBUG RecordReaderImpl: merge = [data range [20205, 986214), size: 966009 type: array-backed]
17/11/03 15:23:07 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:23:11 DEBUG ManagedSelector: Selector loop woken up from select, 1/1 selected
17/11/03 15:23:11 DEBUG SelectChannelEndPoint: onSelected 1->0 r=true w=false for SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,11207/30000,HttpConnection@1eb634b0}{io=1/0,kio=1,kro=1}
17/11/03 15:23:11 DEBUG SelectChannelEndPoint: task SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,11207/30000,HttpConnection@1eb634b0}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:11 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 produced SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,11207/30000,HttpConnection@1eb634b0}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:11 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 dispatch
17/11/03 15:23:11 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9
17/11/03 15:23:11 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 run SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,11207/30000,HttpConnection@1eb634b0}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:23:11 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9
17/11/03 15:23:11 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 run
17/11/03 15:23:11 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 produce enter
17/11/03 15:23:11 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 producing
17/11/03 15:23:11 DEBUG SelectChannelEndPoint: Key interests updated 1 -> 0 on SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,11207/30000,HttpConnection@1eb634b0}{io=0/0,kio=0,kro=1}
17/11/03 15:23:11 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:11 DEBUG FillInterest: FillInterest@66eacf45{true,AC.ReadCB@1eb634b0{HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,11207/30000,HttpConnection@1eb634b0}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}]}} fillable AC.ReadCB@1eb634b0{HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,FI,-,11207/30000,HttpConnection@1eb634b0}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:11 DEBUG HttpConnection: HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,-,-,11207/30000,HttpConnection@1eb634b0}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}] onFillable enter HttpChannelState@bc529c0{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:23:11 DEBUG ChannelEndPoint: filled -1 SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,-,-,11207/30000,HttpConnection@1eb634b0}{io=0/0,kio=0,kro=1}
17/11/03 15:23:11 DEBUG ChannelEndPoint: ishut SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,in,out,-,-,11207/30000,HttpConnection@1eb634b0}{io=0/0,kio=0,kro=1}
17/11/03 15:23:11 DEBUG HttpParser: atEOF HttpParser{s=START,0 of 0}
17/11/03 15:23:11 DEBUG HttpConnection: HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,ISHUT,out,-,-,11207/30000,HttpConnection@1eb634b0}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}] filled -1 HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:11 DEBUG HttpConnection: HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,Open,ISHUT,out,-,-,11207/30000,HttpConnection@1eb634b0}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:23:11 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:23:11 DEBUG HttpParser: START --> CLOSED
17/11/03 15:23:11 DEBUG WriteFlusher: ignored: WriteFlusher@4710ebc9{IDLE} {}
17/11/03 15:23:11 DEBUG ChannelEndPoint: close SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,CLOSED,ISHUT,out,-,-,11208/30000,HttpConnection@1eb634b0}{io=0/0,kio=0,kro=1}
17/11/03 15:23:11 DEBUG ManagedSelector: Queued change org.spark_project.jetty.io.ManagedSelector$2@7aabfbbc on org.spark_project.jetty.io.ManagedSelector@38335c12 id=1 keys=1 selected=0
17/11/03 15:23:11 DEBUG ManagedSelector: Selector loop woken up from select, 0/0 selected
17/11/03 15:23:11 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 produced org.spark_project.jetty.io.ManagedSelector$2@7aabfbbc
17/11/03 15:23:11 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 dispatch
17/11/03 15:23:11 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9
17/11/03 15:23:11 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 run org.spark_project.jetty.io.ManagedSelector$2@7aabfbbc
17/11/03 15:23:11 DEBUG ManagedSelector: Destroyed SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,CLOSED,ISHUT,OSHUT,-,-,11208/30000,HttpConnection@1eb634b0}{io=0/0,kio=-1,kro=-1}
17/11/03 15:23:11 DEBUG HttpConnection: HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,CLOSED,ISHUT,OSHUT,-,-,11208/30000,HttpConnection@1eb634b0}{io=0/0,kio=-1,kro=-1}][p=HttpParser{s=CLOSED,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}] parsed false HttpParser{s=CLOSED,0 of 0}
17/11/03 15:23:11 DEBUG AbstractConnection: onClose HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,CLOSED,ISHUT,OSHUT,-,-,11208/30000,HttpConnection@1eb634b0}{io=0/0,kio=-1,kro=-1}][p=HttpParser{s=CLOSED,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}]
17/11/03 15:23:11 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 ran org.spark_project.jetty.io.ManagedSelector$2@7aabfbbc
17/11/03 15:23:11 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,CLOSED,ISHUT,OSHUT,-,-,11208/30000,HttpConnection@1eb634b0}{io=0/0,kio=-1,kro=-1}][p=HttpParser{s=CLOSED,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}]
17/11/03 15:23:11 DEBUG QueuedThreadPool: run EPC Prod/Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9
17/11/03 15:23:11 DEBUG ExecuteProduceConsume: EPC Prod/Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 run
17/11/03 15:23:11 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9
17/11/03 15:23:11 DEBUG HttpConnection: HttpConnection@1eb634b0[SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,CLOSED,ISHUT,OSHUT,-,-,11208/30000,HttpConnection@1eb634b0}{io=0/0,kio=-1,kro=-1}][p=HttpParser{s=CLOSED,0 of 0},g=HttpGenerator@4361809e{s=START},c=HttpChannelOverHttp@256009ce{r=0,c=false,a=IDLE,uri=null}] onFillable exit HttpChannelState@bc529c0{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:23:11 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 ran SelectChannelEndPoint@59a09545{/122.178.219.222:58961<->4040,CLOSED,ISHUT,OSHUT,-,-,11209/30000,HttpConnection@1eb634b0}{io=0/0,kio=-1,kro=-1}:runFillable
17/11/03 15:23:11 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 produce exit
17/11/03 15:23:11 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9
17/11/03 15:23:11 DEBUG ExecuteProduceConsume: EPC Prod/Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 producing
17/11/03 15:23:11 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:12 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 15:23:12 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 2182453 flag: 0 flag: 0 flag: 0
17/11/03 15:23:13 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00008-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, range: 0-909296, partition values: [empty row]
17/11/03 15:23:13 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #385
17/11/03 15:23:13 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #385
17/11/03 15:23:13 DEBUG ProtobufRpcEngine: Call: getFileInfo took 2ms
17/11/03 15:23:13 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #386
17/11/03 15:23:13 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #386
17/11/03 15:23:13 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:13 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=909296
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043418_302647; getBlockSize()=909296; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043418_302647; getBlockSize()=909296; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:13 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #387
17/11/03 15:23:13 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #387
17/11/03 15:23:13 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:13 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:23:13 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00008-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043418_302647): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:13 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:23:13 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00008-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:13 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:13 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #388
17/11/03 15:23:13 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #388
17/11/03 15:23:13 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:13 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=909296
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043418_302647; getBlockSize()=909296; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043418_302647; getBlockSize()=909296; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:13 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #389
17/11/03 15:23:13 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #389
17/11/03 15:23:13 DEBUG ProtobufRpcEngine: Call: getFileInfo took 3ms
17/11/03 15:23:13 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:23:13 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00008-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043418_302647): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:13 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:23:13 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00008-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 909296}
17/11/03 15:23:13 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #390
17/11/03 15:23:13 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #390
17/11/03 15:23:13 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:13 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=909296
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043418_302647; getBlockSize()=909296; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043418_302647; getBlockSize()=909296; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:13 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:23:13 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:13 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00008-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043418_302647): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:13 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:23:13 DEBUG RecordReaderImpl: chunks = [range start: 18479 end: 904626]
17/11/03 15:23:13 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:13 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00008-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043418_302647): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:13 DEBUG RecordReaderImpl: merge = [data range [18479, 904626), size: 886147 type: array-backed]
17/11/03 15:23:13 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:23:13 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:13 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:13 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:23:13 DEBUG RecordReaderImpl: chunks = [range start: 12471 end: 538948]
17/11/03 15:23:13 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:13 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:13 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:23:13 DEBUG RecordReaderImpl: merge = [data range [12471, 538948), size: 526477 type: array-backed]
17/11/03 15:23:16 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:16 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:16 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:23:16 DEBUG RecordReaderImpl: chunks = [range start: 11868 end: 560104]
17/11/03 15:23:16 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:16 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:16 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:23:16 DEBUG RecordReaderImpl: merge = [data range [11868, 560104), size: 548236 type: array-backed]
17/11/03 15:23:19 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, range: 0-961150, partition values: [empty row]
17/11/03 15:23:19 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #391
17/11/03 15:23:19 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #391
17/11/03 15:23:19 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:23:19 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #392
17/11/03 15:23:19 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #392
17/11/03 15:23:19 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:19 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=961150
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043424_302653; getBlockSize()=961150; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043424_302653; getBlockSize()=961150; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:19 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #393
17/11/03 15:23:19 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #393
17/11/03 15:23:19 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:19 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:19 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043424_302653): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:19 DEBUG BlockReaderFactory: Closed potentially stale remote peer NioInetPeer(Socket[addr=/172.30.1.46,port=50010,localport=58916])
java.io.EOFException: Premature EOF: no length prefix available
	at org.apache.hadoop.hdfs.protocolPB.PBHelper.vintPrefixed(PBHelper.java:2282)
	at org.apache.hadoop.hdfs.RemoteBlockReader2.newBlockReader(RemoteBlockReader2.java:423)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReader(BlockReaderFactory.java:818)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReaderFromTcp(BlockReaderFactory.java:697)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:673)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:882)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:934)
	at java.io.DataInputStream.readFully(DataInputStream.java:195)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.extractMetaInfoFromFooter(ReaderImpl.java:369)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.<init>(ReaderImpl.java:316)
	at org.apache.hadoop.hive.ql.io.orc.OrcFile.createReader(OrcFile.java:187)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$getFileReader$2.apply(OrcFileOperator.scala:68)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$getFileReader$2.apply(OrcFileOperator.scala:67)
	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409)
	at scala.collection.TraversableOnce$class.collectFirst(TraversableOnce.scala:145)
	at scala.collection.AbstractIterator.collectFirst(Iterator.scala:1336)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$.getFileReader(OrcFileOperator.scala:69)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$readSchema$1.apply(OrcFileOperator.scala:77)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$readSchema$1.apply(OrcFileOperator.scala:77)
	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
	at scala.collection.immutable.List.flatMap(List.scala:344)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$.readSchema(OrcFileOperator.scala:77)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:137)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:131)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(FileFormat.scala:136)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(FileFormat.scala:120)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.org$apache$spark$sql$execution$datasources$FileScanRDD$$anon$$readCurrentFile(FileScanRDD.scala:124)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.nextIterator(FileScanRDD.scala:174)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:105)
	at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIterator.processNext(generated.java:38)
	at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)
	at org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1.hasNext(WholeStageCodegenExec.scala:395)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:234)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:228)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:827)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:827)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87)
	at org.apache.spark.scheduler.Task.run(Task.scala:108)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:335)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
17/11/03 15:23:19 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:23:19 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:19 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:19 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #394
17/11/03 15:23:19 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #394
17/11/03 15:23:19 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:23:19 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=961150
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043424_302653; getBlockSize()=961150; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043424_302653; getBlockSize()=961150; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:19 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #395
17/11/03 15:23:19 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #395
17/11/03 15:23:19 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:19 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:19 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043424_302653): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:19 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:19 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:23:19 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 961150}
17/11/03 15:23:19 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #396
17/11/03 15:23:19 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #396
17/11/03 15:23:19 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:23:19 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=961150
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043424_302653; getBlockSize()=961150; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043424_302653; getBlockSize()=961150; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:19 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:23:19 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:19 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043424_302653): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:19 DEBUG RecordReaderImpl: chunks = [range start: 19011 end: 956512]
17/11/03 15:23:19 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:19 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043424_302653): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:19 DEBUG RecordReaderImpl: merge = [data range [19011, 956512), size: 937501 type: array-backed]
17/11/03 15:23:19 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:23:20 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:20 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:20 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:23:20 DEBUG RecordReaderImpl: chunks = [range start: 11821 end: 539586]
17/11/03 15:23:20 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:20 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:20 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:23:20 DEBUG RecordReaderImpl: merge = [data range [11821, 539586), size: 527765 type: array-backed]
17/11/03 15:23:23 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #397
17/11/03 15:23:23 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #397
17/11/03 15:23:23 DEBUG ProtobufRpcEngine: Call: renewLease took 0ms
17/11/03 15:23:23 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-775905044_1
17/11/03 15:23:23 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-775905044_1] with renew id 1 executed
17/11/03 15:23:23 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:23 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:23 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:23:23 DEBUG RecordReaderImpl: chunks = [range start: 8332 end: 231793]
17/11/03 15:23:23 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:23 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00005-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043417_302646): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:23 DEBUG RecordReaderImpl: merge = [data range [8332, 231793), size: 223461 type: array-backed]
17/11/03 15:23:25 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00012-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, range: 0-951027, partition values: [empty row]
17/11/03 15:23:25 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #398
17/11/03 15:23:25 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #398
17/11/03 15:23:25 DEBUG ProtobufRpcEngine: Call: getFileInfo took 2ms
17/11/03 15:23:25 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #399
17/11/03 15:23:25 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #399
17/11/03 15:23:25 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:25 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=951027
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043420_302649; getBlockSize()=951027; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043420_302649; getBlockSize()=951027; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:25 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #400
17/11/03 15:23:25 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #400
17/11/03 15:23:25 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:23:25 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:23:25 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00012-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043420_302649): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:25 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:23:25 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00012-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:25 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:25 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #401
17/11/03 15:23:25 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #401
17/11/03 15:23:25 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 10ms
17/11/03 15:23:25 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=951027
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043420_302649; getBlockSize()=951027; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043420_302649; getBlockSize()=951027; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:25 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #402
17/11/03 15:23:25 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #402
17/11/03 15:23:25 DEBUG ProtobufRpcEngine: Call: getFileInfo took 3ms
17/11/03 15:23:25 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:23:25 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00012-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043420_302649): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:25 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:23:25 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00012-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 951027}
17/11/03 15:23:25 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #403
17/11/03 15:23:25 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #403
17/11/03 15:23:25 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:25 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=951027
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043420_302649; getBlockSize()=951027; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043420_302649; getBlockSize()=951027; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:25 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:23:25 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:23:25 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00012-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043420_302649): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:25 DEBUG RecordReaderImpl: chunks = [range start: 18093 end: 946476]
17/11/03 15:23:25 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:23:25 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00012-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043420_302649): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:25 DEBUG RecordReaderImpl: merge = [data range [18093, 946476), size: 928383 type: array-backed]
17/11/03 15:23:25 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:23:26 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, range: 0-945880, partition values: [empty row]
17/11/03 15:23:26 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #404
17/11/03 15:23:26 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #404
17/11/03 15:23:26 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:23:26 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #405
17/11/03 15:23:26 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #405
17/11/03 15:23:26 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:23:26 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=945880
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043415_302644; getBlockSize()=945880; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043415_302644; getBlockSize()=945880; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:26 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #406
17/11/03 15:23:26 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #406
17/11/03 15:23:26 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:26 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:23:26 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043415_302644): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:26 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:23:26 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:26 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:26 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #407
17/11/03 15:23:26 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #407
17/11/03 15:23:26 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:23:26 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=945880
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043415_302644; getBlockSize()=945880; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043415_302644; getBlockSize()=945880; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:26 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #408
17/11/03 15:23:26 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #408
17/11/03 15:23:26 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:26 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:26 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043415_302644): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:26 DEBUG BlockReaderFactory: Closed potentially stale remote peer NioInetPeer(Socket[addr=/172.30.1.46,port=50010,localport=58927])
java.io.EOFException: Premature EOF: no length prefix available
	at org.apache.hadoop.hdfs.protocolPB.PBHelper.vintPrefixed(PBHelper.java:2282)
	at org.apache.hadoop.hdfs.RemoteBlockReader2.newBlockReader(RemoteBlockReader2.java:423)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReader(BlockReaderFactory.java:818)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReaderFromTcp(BlockReaderFactory.java:697)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:673)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:882)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:934)
	at java.io.DataInputStream.readFully(DataInputStream.java:195)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.extractMetaInfoFromFooter(ReaderImpl.java:369)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.<init>(ReaderImpl.java:316)
	at org.apache.hadoop.hive.ql.io.orc.OrcFile.createReader(OrcFile.java:237)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:155)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:131)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(FileFormat.scala:136)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(FileFormat.scala:120)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.org$apache$spark$sql$execution$datasources$FileScanRDD$$anon$$readCurrentFile(FileScanRDD.scala:124)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.nextIterator(FileScanRDD.scala:174)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:105)
	at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIterator.processNext(generated.java:38)
	at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)
	at org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1.hasNext(WholeStageCodegenExec.scala:395)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:234)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:228)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:827)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:827)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87)
	at org.apache.spark.scheduler.Task.run(Task.scala:108)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:335)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
17/11/03 15:23:26 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:23:26 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 945880}
17/11/03 15:23:26 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #409
17/11/03 15:23:26 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #409
17/11/03 15:23:26 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:23:26 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=945880
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043415_302644; getBlockSize()=945880; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043415_302644; getBlockSize()=945880; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:26 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:23:26 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:26 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043415_302644): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:26 DEBUG RecordReaderImpl: chunks = [range start: 18667 end: 941291]
17/11/03 15:23:26 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:23:26 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00006-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043415_302644): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:26 DEBUG RecordReaderImpl: merge = [data range [18667, 941291), size: 922624 type: array-backed]
17/11/03 15:23:26 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:23:29 DEBUG IdleTimeout: SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,27104/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1} idle timeout check, elapsed: 27104 ms, remaining: 2896 ms
17/11/03 15:23:32 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, range: 0-996713, partition values: [empty row]
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #410
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #410
17/11/03 15:23:32 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #411
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #411
17/11/03 15:23:32 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:32 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=996713
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043428_302657; getBlockSize()=996713; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043428_302657; getBlockSize()=996713; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #412
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #412
17/11/03 15:23:32 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:32 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:23:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043428_302657): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:32 DEBUG BlockReaderFactory: Closed potentially stale remote peer NioInetPeer(Socket[addr=/172.30.1.239,port=50010,localport=54529])
java.io.EOFException: Premature EOF: no length prefix available
	at org.apache.hadoop.hdfs.protocolPB.PBHelper.vintPrefixed(PBHelper.java:2282)
	at org.apache.hadoop.hdfs.RemoteBlockReader2.newBlockReader(RemoteBlockReader2.java:423)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReader(BlockReaderFactory.java:818)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReaderFromTcp(BlockReaderFactory.java:697)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:673)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:882)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:934)
	at java.io.DataInputStream.readFully(DataInputStream.java:195)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.extractMetaInfoFromFooter(ReaderImpl.java:369)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.<init>(ReaderImpl.java:316)
	at org.apache.hadoop.hive.ql.io.orc.OrcFile.createReader(OrcFile.java:187)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$getFileReader$2.apply(OrcFileOperator.scala:68)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$getFileReader$2.apply(OrcFileOperator.scala:67)
	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409)
	at scala.collection.TraversableOnce$class.collectFirst(TraversableOnce.scala:145)
	at scala.collection.AbstractIterator.collectFirst(Iterator.scala:1336)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$.getFileReader(OrcFileOperator.scala:69)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$readSchema$1.apply(OrcFileOperator.scala:77)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$readSchema$1.apply(OrcFileOperator.scala:77)
	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
	at scala.collection.immutable.List.flatMap(List.scala:344)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$.readSchema(OrcFileOperator.scala:77)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:137)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:131)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(FileFormat.scala:136)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(FileFormat.scala:120)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.org$apache$spark$sql$execution$datasources$FileScanRDD$$anon$$readCurrentFile(FileScanRDD.scala:124)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.nextIterator(FileScanRDD.scala:174)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:105)
	at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIterator.processNext(generated.java:38)
	at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)
	at org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1.hasNext(WholeStageCodegenExec.scala:395)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:234)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:228)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:827)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:827)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87)
	at org.apache.spark.scheduler.Task.run(Task.scala:108)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:335)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
17/11/03 15:23:32 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:23:32 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:32 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #413
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #413
17/11/03 15:23:32 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:32 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=996713
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043428_302657; getBlockSize()=996713; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043428_302657; getBlockSize()=996713; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #414
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #414
17/11/03 15:23:32 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:32 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:23:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043428_302657): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:32 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:23:32 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 996713}
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #415
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #415
17/11/03 15:23:32 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:23:32 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=996713
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043428_302657; getBlockSize()=996713; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043428_302657; getBlockSize()=996713; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:32 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:23:32 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:23:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043428_302657): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:32 DEBUG RecordReaderImpl: chunks = [range start: 19145 end: 992110]
17/11/03 15:23:32 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:23:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00001.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043428_302657): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:32 DEBUG RecordReaderImpl: merge = [data range [19145, 992110), size: 972965 type: array-backed]
17/11/03 15:23:32 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:23:32 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, range: 0-1835887, partition values: [empty row]
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #416
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #416
17/11/03 15:23:32 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #417
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #417
17/11/03 15:23:32 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:32 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1835887
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043425_302654; getBlockSize()=1835887; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043425_302654; getBlockSize()=1835887; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #418
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #418
17/11/03 15:23:32 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:32 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043425_302654): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:32 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:32 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:32 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #419
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #419
17/11/03 15:23:32 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:23:32 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1835887
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043425_302654; getBlockSize()=1835887; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043425_302654; getBlockSize()=1835887; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #420
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #420
17/11/03 15:23:32 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:32 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043425_302654): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:32 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:23:32 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 1835887}
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #421
17/11/03 15:23:32 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #421
17/11/03 15:23:32 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:32 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1835887
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043425_302654; getBlockSize()=1835887; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043425_302654; getBlockSize()=1835887; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:32 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:23:32 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043425_302654): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:32 DEBUG RecordReaderImpl: chunks = [range start: 20122 end: 987169]
17/11/03 15:23:32 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043425_302654): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:32 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:32 DEBUG RecordReaderImpl: merge = [data range [20122, 987169), size: 967047 type: array-backed]
17/11/03 15:23:32 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:23:32 DEBUG IdleTimeout: SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,30101/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1} idle timeout check, elapsed: 30101 ms, remaining: -101 ms
17/11/03 15:23:32 DEBUG IdleTimeout: SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,FI,-,30101/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1} idle timeout expired
17/11/03 15:23:32 DEBUG HttpParser: close HttpParser{s=START,0 of -1}
17/11/03 15:23:32 DEBUG HttpParser: START --> CLOSE
17/11/03 15:23:32 DEBUG AbstractConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,30101/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}][p=HttpParser{s=CLOSE,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}] onFillInterestedFailed {}
17/11/03 15:23:32 DEBUG ChannelEndPoint: oshut SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,out,-,-,30101/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}
17/11/03 15:23:32 DEBUG AbstractConnection: fillInterested HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,OSHUT,-,-,30101/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}][p=HttpParser{s=CLOSE,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}]
17/11/03 15:23:32 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,OSHUT,FI,-,0/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}][p=HttpParser{s=CLOSE,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,OSHUT,FI,-,0/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}][p=HttpParser{s=CLOSE,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:32 DEBUG FillInterest: FillInterest@6c9cd6e1{true,AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,OSHUT,FI,-,0/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}][p=HttpParser{s=CLOSE,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@3d756134{HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,OSHUT,FI,-,0/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}][p=HttpParser{s=CLOSE,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}]}
17/11/03 15:23:32 DEBUG SelectChannelEndPoint: changeInterests p=false 1->1 for SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,OSHUT,FI,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}
17/11/03 15:23:32 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,OSHUT,FI,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:23:32 DEBUG WriteFlusher: ignored: WriteFlusher@33e516d4{IDLE} {}
17/11/03 15:23:32 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:23:32 DEBUG AbstractEndPoint: Ignored idle endpoint SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,OSHUT,FI,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}
17/11/03 15:23:32 DEBUG ManagedSelector: Running change SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,OSHUT,FI,-,0/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}:runUpdateKey
17/11/03 15:23:32 DEBUG SelectChannelEndPoint: Key interests updated 1 -> 1 on SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,OSHUT,FI,-,0/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}
17/11/03 15:23:32 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:23:38 INFO Executor: Finished task 0.0 in stage 3.0 (TID 4). 1284 bytes result sent to driver
17/11/03 15:23:38 DEBUG TaskSchedulerImpl: parentName: , name: TaskSet_3.0, runningTasks: 1
17/11/03 15:23:38 INFO TaskSetManager: Finished task 0.0 in stage 3.0 (TID 4) in 56193 ms on localhost (executor driver) (1/2)
[Stage 3:=============================>                             (1 + 1) / 2]17/11/03 15:23:39 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:39 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043425_302654): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:39 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:39 DEBUG RecordReaderImpl: chunks = [range start: 11567 end: 482729]
17/11/03 15:23:39 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:39 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043425_302654): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:39 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:39 DEBUG RecordReaderImpl: merge = [data range [11567, 482729), size: 471162 type: array-backed]
17/11/03 15:23:42 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 15:23:42 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 895172 flag: 0 flag: 0 flag: 0
17/11/03 15:23:42 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:42 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043425_302654): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:42 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:42 DEBUG RecordReaderImpl: chunks = [range start: 11103 end: 355732]
17/11/03 15:23:42 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:42 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00010-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043425_302654): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:42 DEBUG RecordReaderImpl: merge = [data range [11103, 355732), size: 344629 type: array-backed]
17/11/03 15:23:44 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, range: 0-2791468, partition values: [empty row]
17/11/03 15:23:44 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #422
17/11/03 15:23:44 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #422
17/11/03 15:23:44 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:23:44 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #423
17/11/03 15:23:44 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #423
17/11/03 15:23:44 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:44 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2791468
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656; getBlockSize()=2791468; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656; getBlockSize()=2791468; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:44 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #424
17/11/03 15:23:44 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #424
17/11/03 15:23:44 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:44 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:44 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:44 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:44 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:23:44 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #425
17/11/03 15:23:44 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #425
17/11/03 15:23:44 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:44 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2791468
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656; getBlockSize()=2791468; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656; getBlockSize()=2791468; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:44 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #426
17/11/03 15:23:44 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #426
17/11/03 15:23:44 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:23:44 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:23:44 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:44 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:23:44 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:23:44 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 2791468}
17/11/03 15:23:44 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #427
17/11/03 15:23:44 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #427
17/11/03 15:23:44 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:23:44 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2791468
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656; getBlockSize()=2791468; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656; getBlockSize()=2791468; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:23:44 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:23:44 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:44 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:44 DEBUG RecordReaderImpl: chunks = [range start: 20762 end: 968725]
17/11/03 15:23:44 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:44 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:44 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:44 DEBUG RecordReaderImpl: merge = [data range [20762, 968725), size: 947963 type: array-backed]
17/11/03 15:23:44 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:23:50 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:50 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:50 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:50 DEBUG RecordReaderImpl: chunks = [range start: 11990 end: 503369]
17/11/03 15:23:50 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:50 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:50 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:50 DEBUG RecordReaderImpl: merge = [data range [11990, 503369), size: 491379 type: array-backed]
17/11/03 15:23:53 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #428
17/11/03 15:23:53 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #428
17/11/03 15:23:53 DEBUG ProtobufRpcEngine: Call: renewLease took 1ms
17/11/03 15:23:53 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-775905044_1
17/11/03 15:23:53 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-775905044_1] with renew id 1 executed
17/11/03 15:23:53 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:53 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:53 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:53 DEBUG RecordReaderImpl: chunks = [range start: 11674 end: 485755]
17/11/03 15:23:53 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:53 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:53 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:53 DEBUG RecordReaderImpl: merge = [data range [11674, 485755), size: 474081 type: array-backed]
17/11/03 15:23:57 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:57 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:57 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:57 DEBUG RecordReaderImpl: chunks = [range start: 12495 end: 505723]
17/11/03 15:23:57 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:23:57 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:23:57 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:23:57 DEBUG RecordReaderImpl: merge = [data range [12495, 505723), size: 493228 type: array-backed]
17/11/03 15:24:00 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:24:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:00 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:24:00 DEBUG RecordReaderImpl: chunks = [range start: 9997 end: 312348]
17/11/03 15:24:00 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:24:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00011-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043427_302656): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:00 DEBUG RecordReaderImpl: merge = [data range [9997, 312348), size: 302351 type: array-backed]
17/11/03 15:24:02 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00013-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, range: 0-2886880, partition values: [empty row]
17/11/03 15:24:02 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #429
17/11/03 15:24:02 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #429
17/11/03 15:24:02 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:24:02 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #430
17/11/03 15:24:02 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #430
17/11/03 15:24:02 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:24:02 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2886880
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651; getBlockSize()=2886880; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651; getBlockSize()=2886880; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:24:02 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #431
17/11/03 15:24:02 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #431
17/11/03 15:24:02 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:24:02 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 15:24:02 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00013-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:02 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 15:24:02 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00013-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:24:02 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:24:02 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #432
17/11/03 15:24:02 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #432
17/11/03 15:24:02 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 15:24:02 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2886880
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651; getBlockSize()=2886880; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651; getBlockSize()=2886880; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:24:02 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #433
17/11/03 15:24:02 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #433
17/11/03 15:24:02 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:24:02 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 15:24:02 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00013-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:02 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 15:24:02 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:24:02 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00013-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 2886880}
17/11/03 15:24:02 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #434
17/11/03 15:24:02 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #434
17/11/03 15:24:02 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:24:02 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2886880
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651; getBlockSize()=2886880; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651; getBlockSize()=2886880; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:24:02 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:24:02 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:24:02 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00013-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:02 DEBUG RecordReaderImpl: chunks = [range start: 20020 end: 991933]
17/11/03 15:24:02 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:24:02 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00013-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:02 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:24:02 DEBUG RecordReaderImpl: merge = [data range [20020, 991933), size: 971913 type: array-backed]
17/11/03 15:24:02 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:24:02 DEBUG IdleTimeout: SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,OSHUT,FI,-,30000/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1} idle timeout check, elapsed: 30000 ms, remaining: 0 ms
17/11/03 15:24:02 DEBUG IdleTimeout: SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,OSHUT,FI,-,30000/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1} idle timeout expired
17/11/03 15:24:02 DEBUG HttpParser: close HttpParser{s=CLOSE,0 of -1}
17/11/03 15:24:02 DEBUG HttpParser: CLOSE --> CLOSE
17/11/03 15:24:02 DEBUG AbstractConnection: HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,Open,in,OSHUT,-,-,30000/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}][p=HttpParser{s=CLOSE,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}] onFillInterestedFailed {}
17/11/03 15:24:02 DEBUG WriteFlusher: ignored: WriteFlusher@33e516d4{IDLE} {}
17/11/03 15:24:02 DEBUG ChannelEndPoint: close SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,CLOSED,in,OSHUT,-,-,30000/30000,HttpConnection@3d756134}{io=1/1,kio=1,kro=1}
17/11/03 15:24:02 DEBUG ManagedSelector: Queued change org.spark_project.jetty.io.ManagedSelector$2@7d0afd2b on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:24:02 DEBUG WriteFlusher: ignored: WriteFlusher@33e516d4{IDLE} {}
17/11/03 15:24:02 DEBUG AbstractEndPoint: Ignored idle endpoint SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,CLOSED,ISHUT,OSHUT,-,-,30000/30000,HttpConnection@3d756134}{io=1/1,kio=-1,kro=-1}
17/11/03 15:24:02 DEBUG ManagedSelector: Selector loop woken up from select, 0/0 selected
17/11/03 15:24:02 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced org.spark_project.jetty.io.ManagedSelector$2@7d0afd2b
17/11/03 15:24:02 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:24:02 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:02 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run org.spark_project.jetty.io.ManagedSelector$2@7d0afd2b
17/11/03 15:24:02 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:02 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:24:02 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:24:02 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:24:02 DEBUG ManagedSelector: Destroyed SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,CLOSED,ISHUT,OSHUT,-,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=-1,kro=-1}
17/11/03 15:24:02 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:02 DEBUG AbstractConnection: onClose HttpConnection@3d756134[SelectChannelEndPoint@49b1befc{/122.178.219.222:58960<->4040,CLOSED,ISHUT,OSHUT,-,-,1/30000,HttpConnection@3d756134}{io=1/1,kio=-1,kro=-1}][p=HttpParser{s=CLOSE,0 of -1},g=HttpGenerator@79777e38{s=START},c=HttpChannelOverHttp@cb329ae{r=6,c=false,a=IDLE,uri=null}]
17/11/03 15:24:02 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran org.spark_project.jetty.io.ManagedSelector$2@7d0afd2b
17/11/03 15:24:02 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:24:02 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:08 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:24:08 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00013-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:08 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:24:08 DEBUG RecordReaderImpl: chunks = [range start: 12086 end: 517375]
17/11/03 15:24:08 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:24:08 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00013-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:08 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:24:08 DEBUG RecordReaderImpl: merge = [data range [12086, 517375), size: 505289 type: array-backed]
17/11/03 15:24:11 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:24:11 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00013-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:11 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:24:11 DEBUG RecordReaderImpl: chunks = [range start: 11709 end: 502495]
17/11/03 15:24:11 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:24:11 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00013-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:11 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:24:11 DEBUG RecordReaderImpl: merge = [data range [11709, 502495), size: 490786 type: array-backed]
17/11/03 15:24:12 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 15:24:12 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 757315 flag: 0 flag: 0 flag: 0
17/11/03 15:24:14 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:24:14 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00013-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:14 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:24:14 DEBUG RecordReaderImpl: chunks = [range start: 12391 end: 524815]
17/11/03 15:24:14 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:24:14 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00013-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:14 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:24:14 DEBUG RecordReaderImpl: merge = [data range [12391, 524815), size: 512424 type: array-backed]
17/11/03 15:24:18 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:24:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00013-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:18 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 15:24:18 DEBUG RecordReaderImpl: chunks = [range start: 9982 end: 334683]
17/11/03 15:24:18 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:24:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00013-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043422_302651): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:18 DEBUG RecordReaderImpl: merge = [data range [9982, 334683), size: 324701 type: array-backed]
17/11/03 15:24:20 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, range: 0-2817058, partition values: [empty row]
17/11/03 15:24:20 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #435
17/11/03 15:24:20 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #435
17/11/03 15:24:20 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:24:20 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #436
17/11/03 15:24:20 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #436
17/11/03 15:24:20 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:24:20 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2817058
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658; getBlockSize()=2817058; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658; getBlockSize()=2817058; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:24:20 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #437
17/11/03 15:24:20 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #437
17/11/03 15:24:20 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 15:24:20 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:24:20 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:20 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:24:20 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:24:20 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 15:24:20 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #438
17/11/03 15:24:20 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #438
17/11/03 15:24:20 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:24:20 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2817058
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658; getBlockSize()=2817058; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658; getBlockSize()=2817058; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:24:20 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #439
17/11/03 15:24:20 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #439
17/11/03 15:24:20 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 15:24:20 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 15:24:20 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:20 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 15:24:20 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 2817058}
17/11/03 15:24:20 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #440
17/11/03 15:24:20 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #440
17/11/03 15:24:20 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 15:24:20 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2817058
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658; getBlockSize()=2817058; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658; getBlockSize()=2817058; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 15:24:20 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 15:24:20 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:24:20 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:20 DEBUG RecordReaderImpl: chunks = [range start: 20369 end: 977152]
17/11/03 15:24:20 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:24:20 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:20 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:24:20 DEBUG RecordReaderImpl: merge = [data range [20369, 977152), size: 956783 type: array-backed]
17/11/03 15:24:20 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   public SpecificUnsafeProjection(Object[] references) {
/* 013 */     this.references = references;
/* 014 */     result = new UnsafeRow(76);
/* 015 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 016 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 017 */
/* 018 */   }
/* 019 */
/* 020 */   public void initialize(int partitionIndex) {
/* 021 */
/* 022 */   }
/* 023 */
/* 024 */
/* 025 */   private void apply_16(InternalRow i) {
/* 026 */
/* 027 */
/* 028 */     boolean isNull64 = i.isNullAt(64);
/* 029 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 030 */     if (isNull64) {
/* 031 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 032 */     } else {
/* 033 */       rowWriter.write(64, value64, 38, 0);
/* 034 */     }
/* 035 */
/* 036 */
/* 037 */     boolean isNull65 = i.isNullAt(65);
/* 038 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 039 */     if (isNull65) {
/* 040 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 041 */     } else {
/* 042 */       rowWriter.write(65, value65, 38, 0);
/* 043 */     }
/* 044 */
/* 045 */
/* 046 */     boolean isNull66 = i.isNullAt(66);
/* 047 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 048 */     if (isNull66) {
/* 049 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 050 */     } else {
/* 051 */       rowWriter.write(66, value66, 38, 0);
/* 052 */     }
/* 053 */
/* 054 */
/* 055 */     boolean isNull67 = i.isNullAt(67);
/* 056 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 057 */     if (isNull67) {
/* 058 */       rowWriter.setNullAt(67);
/* 059 */     } else {
/* 060 */       rowWriter.write(67, value67);
/* 061 */     }
/* 062 */
/* 063 */   }
/* 064 */
/* 065 */
/* 066 */   private void apply_4(InternalRow i) {
/* 067 */
/* 068 */
/* 069 */     boolean isNull16 = i.isNullAt(16);
/* 070 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 071 */     if (isNull16) {
/* 072 */       rowWriter.setNullAt(16);
/* 073 */     } else {
/* 074 */       rowWriter.write(16, value16);
/* 075 */     }
/* 076 */
/* 077 */
/* 078 */     boolean isNull17 = i.isNullAt(17);
/* 079 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 080 */     if (isNull17) {
/* 081 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 082 */     } else {
/* 083 */       rowWriter.write(17, value17, 38, 0);
/* 084 */     }
/* 085 */
/* 086 */
/* 087 */     boolean isNull18 = i.isNullAt(18);
/* 088 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 089 */     if (isNull18) {
/* 090 */       rowWriter.setNullAt(18);
/* 091 */     } else {
/* 092 */       rowWriter.write(18, value18);
/* 093 */     }
/* 094 */
/* 095 */
/* 096 */     boolean isNull19 = i.isNullAt(19);
/* 097 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 098 */     if (isNull19) {
/* 099 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 100 */     } else {
/* 101 */       rowWriter.write(19, value19, 38, 0);
/* 102 */     }
/* 103 */
/* 104 */   }
/* 105 */
/* 106 */
/* 107 */   private void apply_7(InternalRow i) {
/* 108 */
/* 109 */
/* 110 */     boolean isNull28 = i.isNullAt(28);
/* 111 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 112 */     if (isNull28) {
/* 113 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 114 */     } else {
/* 115 */       rowWriter.write(28, value28, 38, 0);
/* 116 */     }
/* 117 */
/* 118 */
/* 119 */     boolean isNull29 = i.isNullAt(29);
/* 120 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 121 */     if (isNull29) {
/* 122 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 123 */     } else {
/* 124 */       rowWriter.write(29, value29, 38, 0);
/* 125 */     }
/* 126 */
/* 127 */
/* 128 */     boolean isNull30 = i.isNullAt(30);
/* 129 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 130 */     if (isNull30) {
/* 131 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 132 */     } else {
/* 133 */       rowWriter.write(30, value30, 38, 0);
/* 134 */     }
/* 135 */
/* 136 */
/* 137 */     boolean isNull31 = i.isNullAt(31);
/* 138 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 139 */     if (isNull31) {
/* 140 */       rowWriter.setNullAt(31);
/* 141 */     } else {
/* 142 */       rowWriter.write(31, value31);
/* 143 */     }
/* 144 */
/* 145 */   }
/* 146 */
/* 147 */
/* 148 */   private void apply_1(InternalRow i) {
/* 149 */
/* 150 */
/* 151 */     boolean isNull4 = i.isNullAt(4);
/* 152 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 153 */     if (isNull4) {
/* 154 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 155 */     } else {
/* 156 */       rowWriter.write(4, value4, 38, 0);
/* 157 */     }
/* 158 */
/* 159 */
/* 160 */     boolean isNull5 = i.isNullAt(5);
/* 161 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 162 */     if (isNull5) {
/* 163 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 164 */     } else {
/* 165 */       rowWriter.write(5, value5, 38, 0);
/* 166 */     }
/* 167 */
/* 168 */
/* 169 */     boolean isNull6 = i.isNullAt(6);
/* 170 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 171 */     if (isNull6) {
/* 172 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 173 */     } else {
/* 174 */       rowWriter.write(6, value6, 38, 0);
/* 175 */     }
/* 176 */
/* 177 */
/* 178 */     boolean isNull7 = i.isNullAt(7);
/* 179 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 180 */     if (isNull7) {
/* 181 */       rowWriter.setNullAt(7);
/* 182 */     } else {
/* 183 */       rowWriter.write(7, value7);
/* 184 */     }
/* 185 */
/* 186 */   }
/* 187 */
/* 188 */
/* 189 */   private void apply_18(InternalRow i) {
/* 190 */
/* 191 */
/* 192 */     boolean isNull72 = i.isNullAt(72);
/* 193 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 194 */     if (isNull72) {
/* 195 */       rowWriter.setNullAt(72);
/* 196 */     } else {
/* 197 */       rowWriter.write(72, value72);
/* 198 */     }
/* 199 */
/* 200 */
/* 201 */     boolean isNull73 = i.isNullAt(73);
/* 202 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 203 */     if (isNull73) {
/* 204 */       rowWriter.setNullAt(73);
/* 205 */     } else {
/* 206 */       rowWriter.write(73, value73);
/* 207 */     }
/* 208 */
/* 209 */
/* 210 */     boolean isNull74 = i.isNullAt(74);
/* 211 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 212 */     if (isNull74) {
/* 213 */       rowWriter.setNullAt(74);
/* 214 */     } else {
/* 215 */       rowWriter.write(74, value74);
/* 216 */     }
/* 217 */
/* 218 */
/* 219 */     boolean isNull75 = i.isNullAt(75);
/* 220 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 221 */     if (isNull75) {
/* 222 */       rowWriter.setNullAt(75);
/* 223 */     } else {
/* 224 */       rowWriter.write(75, value75);
/* 225 */     }
/* 226 */
/* 227 */   }
/* 228 */
/* 229 */
/* 230 */   private void apply_12(InternalRow i) {
/* 231 */
/* 232 */
/* 233 */     boolean isNull48 = i.isNullAt(48);
/* 234 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 235 */     if (isNull48) {
/* 236 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 237 */     } else {
/* 238 */       rowWriter.write(48, value48, 38, 0);
/* 239 */     }
/* 240 */
/* 241 */
/* 242 */     boolean isNull49 = i.isNullAt(49);
/* 243 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 244 */     if (isNull49) {
/* 245 */       rowWriter.setNullAt(49);
/* 246 */     } else {
/* 247 */       rowWriter.write(49, value49);
/* 248 */     }
/* 249 */
/* 250 */
/* 251 */     boolean isNull50 = i.isNullAt(50);
/* 252 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 253 */     if (isNull50) {
/* 254 */       rowWriter.setNullAt(50);
/* 255 */     } else {
/* 256 */       rowWriter.write(50, value50);
/* 257 */     }
/* 258 */
/* 259 */
/* 260 */     boolean isNull51 = i.isNullAt(51);
/* 261 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 262 */     if (isNull51) {
/* 263 */       rowWriter.setNullAt(51);
/* 264 */     } else {
/* 265 */       rowWriter.write(51, value51);
/* 266 */     }
/* 267 */
/* 268 */   }
/* 269 */
/* 270 */
/* 271 */   private void apply_15(InternalRow i) {
/* 272 */
/* 273 */
/* 274 */     boolean isNull60 = i.isNullAt(60);
/* 275 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 276 */     if (isNull60) {
/* 277 */       rowWriter.setNullAt(60);
/* 278 */     } else {
/* 279 */       rowWriter.write(60, value60);
/* 280 */     }
/* 281 */
/* 282 */
/* 283 */     boolean isNull61 = i.isNullAt(61);
/* 284 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 285 */     if (isNull61) {
/* 286 */       rowWriter.setNullAt(61);
/* 287 */     } else {
/* 288 */       rowWriter.write(61, value61);
/* 289 */     }
/* 290 */
/* 291 */
/* 292 */     boolean isNull62 = i.isNullAt(62);
/* 293 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 294 */     if (isNull62) {
/* 295 */       rowWriter.setNullAt(62);
/* 296 */     } else {
/* 297 */       rowWriter.write(62, value62);
/* 298 */     }
/* 299 */
/* 300 */
/* 301 */     boolean isNull63 = i.isNullAt(63);
/* 302 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 303 */     if (isNull63) {
/* 304 */       rowWriter.setNullAt(63);
/* 305 */     } else {
/* 306 */       rowWriter.write(63, value63);
/* 307 */     }
/* 308 */
/* 309 */   }
/* 310 */
/* 311 */
/* 312 */   private void apply_9(InternalRow i) {
/* 313 */
/* 314 */
/* 315 */     boolean isNull36 = i.isNullAt(36);
/* 316 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 317 */     if (isNull36) {
/* 318 */       rowWriter.setNullAt(36);
/* 319 */     } else {
/* 320 */       rowWriter.write(36, value36);
/* 321 */     }
/* 322 */
/* 323 */
/* 324 */     boolean isNull37 = i.isNullAt(37);
/* 325 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 326 */     if (isNull37) {
/* 327 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 328 */     } else {
/* 329 */       rowWriter.write(37, value37, 38, 0);
/* 330 */     }
/* 331 */
/* 332 */
/* 333 */     boolean isNull38 = i.isNullAt(38);
/* 334 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 335 */     if (isNull38) {
/* 336 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 337 */     } else {
/* 338 */       rowWriter.write(38, value38, 38, 0);
/* 339 */     }
/* 340 */
/* 341 */
/* 342 */     boolean isNull39 = i.isNullAt(39);
/* 343 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 344 */     if (isNull39) {
/* 345 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 346 */     } else {
/* 347 */       rowWriter.write(39, value39, 38, 0);
/* 348 */     }
/* 349 */
/* 350 */   }
/* 351 */
/* 352 */
/* 353 */   private void apply_3(InternalRow i) {
/* 354 */
/* 355 */
/* 356 */     boolean isNull12 = i.isNullAt(12);
/* 357 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 358 */     if (isNull12) {
/* 359 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 360 */     } else {
/* 361 */       rowWriter.write(12, value12, 38, 0);
/* 362 */     }
/* 363 */
/* 364 */
/* 365 */     boolean isNull13 = i.isNullAt(13);
/* 366 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 367 */     if (isNull13) {
/* 368 */       rowWriter.setNullAt(13);
/* 369 */     } else {
/* 370 */       rowWriter.write(13, value13);
/* 371 */     }
/* 372 */
/* 373 */
/* 374 */     boolean isNull14 = i.isNullAt(14);
/* 375 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 376 */     if (isNull14) {
/* 377 */       rowWriter.setNullAt(14);
/* 378 */     } else {
/* 379 */       rowWriter.write(14, value14);
/* 380 */     }
/* 381 */
/* 382 */
/* 383 */     boolean isNull15 = i.isNullAt(15);
/* 384 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 385 */     if (isNull15) {
/* 386 */       rowWriter.setNullAt(15);
/* 387 */     } else {
/* 388 */       rowWriter.write(15, value15);
/* 389 */     }
/* 390 */
/* 391 */   }
/* 392 */
/* 393 */
/* 394 */   private void apply_6(InternalRow i) {
/* 395 */
/* 396 */
/* 397 */     boolean isNull24 = i.isNullAt(24);
/* 398 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 399 */     if (isNull24) {
/* 400 */       rowWriter.setNullAt(24);
/* 401 */     } else {
/* 402 */       rowWriter.write(24, value24);
/* 403 */     }
/* 404 */
/* 405 */
/* 406 */     boolean isNull25 = i.isNullAt(25);
/* 407 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 408 */     if (isNull25) {
/* 409 */       rowWriter.setNullAt(25);
/* 410 */     } else {
/* 411 */       rowWriter.write(25, value25);
/* 412 */     }
/* 413 */
/* 414 */
/* 415 */     boolean isNull26 = i.isNullAt(26);
/* 416 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 417 */     if (isNull26) {
/* 418 */       rowWriter.setNullAt(26);
/* 419 */     } else {
/* 420 */       rowWriter.write(26, value26);
/* 421 */     }
/* 422 */
/* 423 */
/* 424 */     boolean isNull27 = i.isNullAt(27);
/* 425 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 426 */     if (isNull27) {
/* 427 */       rowWriter.setNullAt(27);
/* 428 */     } else {
/* 429 */       rowWriter.write(27, value27);
/* 430 */     }
/* 431 */
/* 432 */   }
/* 433 */
/* 434 */
/* 435 */   private void apply_14(InternalRow i) {
/* 436 */
/* 437 */
/* 438 */     boolean isNull56 = i.isNullAt(56);
/* 439 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 440 */     if (isNull56) {
/* 441 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 442 */     } else {
/* 443 */       rowWriter.write(56, value56, 38, 0);
/* 444 */     }
/* 445 */
/* 446 */
/* 447 */     boolean isNull57 = i.isNullAt(57);
/* 448 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 449 */     if (isNull57) {
/* 450 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 451 */     } else {
/* 452 */       rowWriter.write(57, value57, 38, 0);
/* 453 */     }
/* 454 */
/* 455 */
/* 456 */     boolean isNull58 = i.isNullAt(58);
/* 457 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 458 */     if (isNull58) {
/* 459 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 460 */     } else {
/* 461 */       rowWriter.write(58, value58, 38, 0);
/* 462 */     }
/* 463 */
/* 464 */
/* 465 */     boolean isNull59 = i.isNullAt(59);
/* 466 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 467 */     if (isNull59) {
/* 468 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 469 */     } else {
/* 470 */       rowWriter.write(59, value59, 38, 0);
/* 471 */     }
/* 472 */
/* 473 */   }
/* 474 */
/* 475 */
/* 476 */   private void apply_0(InternalRow i) {
/* 477 */
/* 478 */
/* 479 */     boolean isNull = i.isNullAt(0);
/* 480 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 481 */     if (isNull) {
/* 482 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 483 */     } else {
/* 484 */       rowWriter.write(0, value, 38, 0);
/* 485 */     }
/* 486 */
/* 487 */
/* 488 */     boolean isNull1 = i.isNullAt(1);
/* 489 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 490 */     if (isNull1) {
/* 491 */       rowWriter.setNullAt(1);
/* 492 */     } else {
/* 493 */       rowWriter.write(1, value1);
/* 494 */     }
/* 495 */
/* 496 */
/* 497 */     boolean isNull2 = i.isNullAt(2);
/* 498 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 499 */     if (isNull2) {
/* 500 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 501 */     } else {
/* 502 */       rowWriter.write(2, value2, 38, 0);
/* 503 */     }
/* 504 */
/* 505 */
/* 506 */     boolean isNull3 = i.isNullAt(3);
/* 507 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 508 */     if (isNull3) {
/* 509 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 510 */     } else {
/* 511 */       rowWriter.write(3, value3, 38, 0);
/* 512 */     }
/* 513 */
/* 514 */   }
/* 515 */
/* 516 */
/* 517 */   private void apply_17(InternalRow i) {
/* 518 */
/* 519 */
/* 520 */     boolean isNull68 = i.isNullAt(68);
/* 521 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 522 */     if (isNull68) {
/* 523 */       rowWriter.setNullAt(68);
/* 524 */     } else {
/* 525 */       rowWriter.write(68, value68);
/* 526 */     }
/* 527 */
/* 528 */
/* 529 */     boolean isNull69 = i.isNullAt(69);
/* 530 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 531 */     if (isNull69) {
/* 532 */       rowWriter.setNullAt(69);
/* 533 */     } else {
/* 534 */       rowWriter.write(69, value69);
/* 535 */     }
/* 536 */
/* 537 */
/* 538 */     boolean isNull70 = i.isNullAt(70);
/* 539 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 540 */     if (isNull70) {
/* 541 */       rowWriter.setNullAt(70);
/* 542 */     } else {
/* 543 */       rowWriter.write(70, value70);
/* 544 */     }
/* 545 */
/* 546 */
/* 547 */     boolean isNull71 = i.isNullAt(71);
/* 548 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 549 */     if (isNull71) {
/* 550 */       rowWriter.setNullAt(71);
/* 551 */     } else {
/* 552 */       rowWriter.write(71, value71);
/* 553 */     }
/* 554 */
/* 555 */   }
/* 556 */
/* 557 */
/* 558 */   private void apply_11(InternalRow i) {
/* 559 */
/* 560 */
/* 561 */     boolean isNull44 = i.isNullAt(44);
/* 562 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 563 */     if (isNull44) {
/* 564 */       rowWriter.setNullAt(44);
/* 565 */     } else {
/* 566 */       rowWriter.write(44, value44);
/* 567 */     }
/* 568 */
/* 569 */
/* 570 */     boolean isNull45 = i.isNullAt(45);
/* 571 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 572 */     if (isNull45) {
/* 573 */       rowWriter.setNullAt(45);
/* 574 */     } else {
/* 575 */       rowWriter.write(45, value45);
/* 576 */     }
/* 577 */
/* 578 */
/* 579 */     boolean isNull46 = i.isNullAt(46);
/* 580 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 581 */     if (isNull46) {
/* 582 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 583 */     } else {
/* 584 */       rowWriter.write(46, value46, 38, 0);
/* 585 */     }
/* 586 */
/* 587 */
/* 588 */     boolean isNull47 = i.isNullAt(47);
/* 589 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 590 */     if (isNull47) {
/* 591 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 592 */     } else {
/* 593 */       rowWriter.write(47, value47, 38, 0);
/* 594 */     }
/* 595 */
/* 596 */   }
/* 597 */
/* 598 */
/* 599 */   private void apply_8(InternalRow i) {
/* 600 */
/* 601 */
/* 602 */     boolean isNull32 = i.isNullAt(32);
/* 603 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 604 */     if (isNull32) {
/* 605 */       rowWriter.setNullAt(32);
/* 606 */     } else {
/* 607 */       rowWriter.write(32, value32);
/* 608 */     }
/* 609 */
/* 610 */
/* 611 */     boolean isNull33 = i.isNullAt(33);
/* 612 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 613 */     if (isNull33) {
/* 614 */       rowWriter.setNullAt(33);
/* 615 */     } else {
/* 616 */       rowWriter.write(33, value33);
/* 617 */     }
/* 618 */
/* 619 */
/* 620 */     boolean isNull34 = i.isNullAt(34);
/* 621 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 622 */     if (isNull34) {
/* 623 */       rowWriter.setNullAt(34);
/* 624 */     } else {
/* 625 */       rowWriter.write(34, value34);
/* 626 */     }
/* 627 */
/* 628 */
/* 629 */     boolean isNull35 = i.isNullAt(35);
/* 630 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 631 */     if (isNull35) {
/* 632 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 633 */     } else {
/* 634 */       rowWriter.write(35, value35, 38, 0);
/* 635 */     }
/* 636 */
/* 637 */   }
/* 638 */
/* 639 */
/* 640 */   private void apply_2(InternalRow i) {
/* 641 */
/* 642 */
/* 643 */     boolean isNull8 = i.isNullAt(8);
/* 644 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 645 */     if (isNull8) {
/* 646 */       rowWriter.setNullAt(8);
/* 647 */     } else {
/* 648 */       rowWriter.write(8, value8);
/* 649 */     }
/* 650 */
/* 651 */
/* 652 */     boolean isNull9 = i.isNullAt(9);
/* 653 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 654 */     if (isNull9) {
/* 655 */       rowWriter.setNullAt(9);
/* 656 */     } else {
/* 657 */       rowWriter.write(9, value9);
/* 658 */     }
/* 659 */
/* 660 */
/* 661 */     boolean isNull10 = i.isNullAt(10);
/* 662 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 663 */     if (isNull10) {
/* 664 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 665 */     } else {
/* 666 */       rowWriter.write(10, value10, 38, 0);
/* 667 */     }
/* 668 */
/* 669 */
/* 670 */     boolean isNull11 = i.isNullAt(11);
/* 671 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 672 */     if (isNull11) {
/* 673 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 674 */     } else {
/* 675 */       rowWriter.write(11, value11, 38, 0);
/* 676 */     }
/* 677 */
/* 678 */   }
/* 679 */
/* 680 */
/* 681 */   private void apply_5(InternalRow i) {
/* 682 */
/* 683 */
/* 684 */     boolean isNull20 = i.isNullAt(20);
/* 685 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 686 */     if (isNull20) {
/* 687 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 688 */     } else {
/* 689 */       rowWriter.write(20, value20, 38, 0);
/* 690 */     }
/* 691 */
/* 692 */
/* 693 */     boolean isNull21 = i.isNullAt(21);
/* 694 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 695 */     if (isNull21) {
/* 696 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 697 */     } else {
/* 698 */       rowWriter.write(21, value21, 38, 0);
/* 699 */     }
/* 700 */
/* 701 */
/* 702 */     boolean isNull22 = i.isNullAt(22);
/* 703 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 704 */     if (isNull22) {
/* 705 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 706 */     } else {
/* 707 */       rowWriter.write(22, value22, 38, 0);
/* 708 */     }
/* 709 */
/* 710 */
/* 711 */     boolean isNull23 = i.isNullAt(23);
/* 712 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 713 */     if (isNull23) {
/* 714 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 715 */     } else {
/* 716 */       rowWriter.write(23, value23, 38, 0);
/* 717 */     }
/* 718 */
/* 719 */   }
/* 720 */
/* 721 */
/* 722 */   private void apply_10(InternalRow i) {
/* 723 */
/* 724 */
/* 725 */     boolean isNull40 = i.isNullAt(40);
/* 726 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 727 */     if (isNull40) {
/* 728 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 729 */     } else {
/* 730 */       rowWriter.write(40, value40, 38, 0);
/* 731 */     }
/* 732 */
/* 733 */
/* 734 */     boolean isNull41 = i.isNullAt(41);
/* 735 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 736 */     if (isNull41) {
/* 737 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 738 */     } else {
/* 739 */       rowWriter.write(41, value41, 38, 0);
/* 740 */     }
/* 741 */
/* 742 */
/* 743 */     boolean isNull42 = i.isNullAt(42);
/* 744 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 745 */     if (isNull42) {
/* 746 */       rowWriter.setNullAt(42);
/* 747 */     } else {
/* 748 */       rowWriter.write(42, value42);
/* 749 */     }
/* 750 */
/* 751 */
/* 752 */     boolean isNull43 = i.isNullAt(43);
/* 753 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 754 */     if (isNull43) {
/* 755 */       rowWriter.setNullAt(43);
/* 756 */     } else {
/* 757 */       rowWriter.write(43, value43);
/* 758 */     }
/* 759 */
/* 760 */   }
/* 761 */
/* 762 */
/* 763 */   private void apply_13(InternalRow i) {
/* 764 */
/* 765 */
/* 766 */     boolean isNull52 = i.isNullAt(52);
/* 767 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 768 */     if (isNull52) {
/* 769 */       rowWriter.setNullAt(52);
/* 770 */     } else {
/* 771 */       rowWriter.write(52, value52);
/* 772 */     }
/* 773 */
/* 774 */
/* 775 */     boolean isNull53 = i.isNullAt(53);
/* 776 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 777 */     if (isNull53) {
/* 778 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 779 */     } else {
/* 780 */       rowWriter.write(53, value53, 38, 0);
/* 781 */     }
/* 782 */
/* 783 */
/* 784 */     boolean isNull54 = i.isNullAt(54);
/* 785 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 786 */     if (isNull54) {
/* 787 */       rowWriter.setNullAt(54);
/* 788 */     } else {
/* 789 */       rowWriter.write(54, value54);
/* 790 */     }
/* 791 */
/* 792 */
/* 793 */     boolean isNull55 = i.isNullAt(55);
/* 794 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 795 */     if (isNull55) {
/* 796 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 797 */     } else {
/* 798 */       rowWriter.write(55, value55, 38, 0);
/* 799 */     }
/* 800 */
/* 801 */   }
/* 802 */
/* 803 */
/* 804 */   // Scala.Function1 need this
/* 805 */   public java.lang.Object apply(java.lang.Object row) {
/* 806 */     return apply((InternalRow) row);
/* 807 */   }
/* 808 */
/* 809 */   public UnsafeRow apply(InternalRow i) {
/* 810 */     holder.reset();
/* 811 */
/* 812 */     rowWriter.zeroOutNullBytes();
/* 813 */     apply_0(i);
/* 814 */     apply_1(i);
/* 815 */     apply_2(i);
/* 816 */     apply_3(i);
/* 817 */     apply_4(i);
/* 818 */     apply_5(i);
/* 819 */     apply_6(i);
/* 820 */     apply_7(i);
/* 821 */     apply_8(i);
/* 822 */     apply_9(i);
/* 823 */     apply_10(i);
/* 824 */     apply_11(i);
/* 825 */     apply_12(i);
/* 826 */     apply_13(i);
/* 827 */     apply_14(i);
/* 828 */     apply_15(i);
/* 829 */     apply_16(i);
/* 830 */     apply_17(i);
/* 831 */     apply_18(i);
/* 832 */     result.setTotalSize(holder.totalSize());
/* 833 */     return result;
/* 834 */   }
/* 835 */ }

17/11/03 15:24:23 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #441
17/11/03 15:24:23 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #441
17/11/03 15:24:23 DEBUG ProtobufRpcEngine: Call: renewLease took 1ms
17/11/03 15:24:23 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-775905044_1
17/11/03 15:24:23 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-775905044_1] with renew id 1 executed
17/11/03 15:24:26 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:24:26 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:26 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:24:26 DEBUG RecordReaderImpl: chunks = [range start: 11874 end: 508880]
17/11/03 15:24:26 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:24:26 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:26 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:24:26 DEBUG RecordReaderImpl: merge = [data range [11874, 508880), size: 497006 type: array-backed]
17/11/03 15:24:29 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:24:29 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:29 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:24:29 DEBUG RecordReaderImpl: chunks = [range start: 12236 end: 497435]
17/11/03 15:24:29 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:24:29 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:29 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:24:29 DEBUG RecordReaderImpl: merge = [data range [12236, 497435), size: 485199 type: array-backed]
17/11/03 15:24:32 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:24:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:32 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:24:32 DEBUG RecordReaderImpl: chunks = [range start: 11865 end: 489349]
17/11/03 15:24:32 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:24:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:32 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:24:33 DEBUG RecordReaderImpl: merge = [data range [11865, 489349), size: 477484 type: array-backed]
17/11/03 15:24:36 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:24:36 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:36 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 15:24:36 DEBUG RecordReaderImpl: chunks = [range start: 10166 end: 328688]
17/11/03 15:24:36 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 15:24:36 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbck/part-00014-a674e38d-bdb4-49eb-8b9c-3ffc6357667f_00002.c000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074043429_302658): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 15:24:36 DEBUG RecordReaderImpl: merge = [data range [10166, 328688), size: 318522 type: array-backed]
17/11/03 15:24:38 INFO Executor: Finished task 1.0 in stage 3.0 (TID 5). 1284 bytes result sent to driver
17/11/03 15:24:38 DEBUG TaskSchedulerImpl: parentName: , name: TaskSet_3.0, runningTasks: 0
17/11/03 15:24:38 INFO TaskSetManager: Finished task 1.0 in stage 3.0 (TID 5) in 116125 ms on localhost (executor driver) (2/2)
17/11/03 15:24:38 INFO TaskSchedulerImpl: Removed TaskSet 3.0, whose tasks have all completed, from pool
17/11/03 15:24:38 INFO DAGScheduler: ResultStage 3 (take at <console>:26) finished in 116.127 s
17/11/03 15:24:38 DEBUG DAGScheduler: After removal of stage 3, remaining stages = 0
17/11/03 15:24:38 INFO DAGScheduler: Job 3 finished: take at <console>:26, took 116.136488 s
res2: Array[org.apache.spark.sql.Row] = Array()

scala> 17/11/03 15:24:38 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=17, src=/spark2-history/local-1509722002203.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=89088
17/11/03 15:24:38 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=100435 lastFlushOffset=89339 createNewBlock=false
17/11/03 15:24:38 DEBUG DFSClient: Queued packet 17
17/11/03 15:24:38 DEBUG DFSClient: Waiting for ack for: 17
17/11/03 15:24:38 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: 17 offsetInBlock: 89088 lastPacketInBlock: false lastByteOffsetInBlock: 100435
17/11/03 15:24:38 DEBUG DFSClient: DFSClient seqno: 17 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 1015076 flag: 0 flag: 0 flag: 0
17/11/03 15:24:38 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=18, src=/spark2-history/local-1509722002203.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=100352
17/11/03 15:24:38 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=100549 lastFlushOffset=100435 createNewBlock=false
17/11/03 15:24:38 DEBUG DFSClient: Queued packet 18
17/11/03 15:24:38 DEBUG DFSClient: Waiting for ack for: 18
17/11/03 15:24:38 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: 18 offsetInBlock: 100352 lastPacketInBlock: false lastByteOffsetInBlock: 100549
17/11/03 15:24:38 DEBUG DFSClient: DFSClient seqno: 18 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 496853 flag: 0 flag: 0 flag: 0
17/11/03 15:24:38 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=19, src=/spark2-history/local-1509722002203.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=100352
17/11/03 15:24:38 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=100661 lastFlushOffset=100549 createNewBlock=false
17/11/03 15:24:38 DEBUG DFSClient: Queued packet 19
17/11/03 15:24:38 DEBUG DFSClient: Waiting for ack for: 19
17/11/03 15:24:38 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: 19 offsetInBlock: 100352 lastPacketInBlock: false lastByteOffsetInBlock: 100661
17/11/03 15:24:38 DEBUG DFSClient: DFSClient seqno: 19 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 458679 flag: 0 flag: 0 flag: 0
17/11/03 15:24:50 DEBUG ManagedSelector: Queued change org.spark_project.jetty.io.ManagedSelector$Accept@756ab345 on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=0 selected=0
17/11/03 15:24:50 DEBUG ManagedSelector: Selector loop woken up from select, 0/0 selected
17/11/03 15:24:50 DEBUG ManagedSelector: Running change org.spark_project.jetty.io.ManagedSelector$Accept@756ab345
17/11/03 15:24:50 DEBUG ManagedSelector: Queued change org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@112dd84c on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@112dd84c
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:24:50 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@112dd84c
17/11/03 15:24:50 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:24:50 DEBUG AbstractEndPoint: onOpen SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0}
17/11/03 15:24:50 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:50 DEBUG IdleTimeout: SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0} idle timeout check, elapsed: 0 ms, remaining: 30000 ms
17/11/03 15:24:50 DEBUG HttpChannel: new HttpChannelOverHttp@1d46146f{r=0,c=false,a=IDLE,uri=null} -> SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0},null,HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false}
17/11/03 15:24:50 DEBUG HttpConnection: New HTTP Connection HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=0,c=false,a=IDLE,uri=null}]
17/11/03 15:24:50 DEBUG AbstractConnection: onOpen HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=0,c=false,a=IDLE,uri=null}]
17/11/03 15:24:50 DEBUG AbstractConnection: fillInterested HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=0,c=false,a=IDLE,uri=null}]
17/11/03 15:24:50 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=0,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=0,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:50 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=0,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=0,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:50 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=0}
17/11/03 15:24:50 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=0}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:24:50 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:24:50 DEBUG ManagedSelector: Created SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=0}
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@112dd84c
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:24:50 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:50 DEBUG ManagedSelector: Running change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=0}:runUpdateKey
17/11/03 15:24:50 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/1,kio=1,kro=0}
17/11/03 15:24:50 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:50 DEBUG ManagedSelector: Selector loop woken up from select, 1/1 selected
17/11/03 15:24:50 DEBUG SelectChannelEndPoint: onSelected 1->0 r=true w=false for SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}
17/11/03 15:24:50 DEBUG SelectChannelEndPoint: task SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:24:50 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:50 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:24:50 DEBUG SelectChannelEndPoint: Key interests updated 1 -> 0 on SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:50 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:50 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=0,c=false,a=IDLE,uri=null}]}} fillable AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=0,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:50 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=0,c=false,a=IDLE,uri=null}] onFillable enter HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:24:50 DEBUG ChannelEndPoint: filled 426 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:50 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=0,c=false,a=IDLE,uri=null}] filled 426 HeapByteBuffer@5b77d36c[p=0,l=426,c=8192,r=426]={<<<GET /SQL/ HTTP/1.....8,en;q=0.6\r\n\r\n>>>.6\r\n\r\n.8,en;q=0.6...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:50 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=0,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=426,c=8192,r=426]={<<<GET /SQL/ HTTP/1.....8,en;q=0.6\r\n\r\n>>>.6\r\n\r\n.8,en;q=0.6...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:24:50 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=426,c=8192,r=426]={<<<GET /SQL/ HTTP/1.....8,en;q=0.6\r\n\r\n>>>.6\r\n\r\n.8,en;q=0.6...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:50 DEBUG HttpParser: START --> SPACE1
17/11/03 15:24:50 DEBUG HttpParser: SPACE1 --> URI
17/11/03 15:24:50 DEBUG HttpParser: URI --> SPACE2
17/11/03 15:24:50 DEBUG HttpParser: SPACE2 --> REQUEST_VERSION
17/11/03 15:24:50 DEBUG HttpParser: REQUEST_VERSION --> HEADER
17/11/03 15:24:50 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:24:50 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:24:50 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:50 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:50 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:50 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:24:50 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:24:50 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:50 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:24:50 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:24:50 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:50 DEBUG HttpParser: HEADER --> HEADER_IN_NAME
17/11/03 15:24:50 DEBUG HttpParser: HEADER_IN_NAME --> HEADER_VALUE
17/11/03 15:24:50 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:24:50 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:50 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:24:50 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:24:50 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:50 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:50 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:50 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:50 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:50 DEBUG HttpParser: HEADER --> END
17/11/03 15:24:50 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=//dev2:4040/SQL/} onRequestComplete
17/11/03 15:24:50 DEBUG HttpInput: HttpInputOverHTTP@4dd720b1[c=0,q=1,[0]=EOF,s=STREAM] addContent EOF
17/11/03 15:24:50 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of 0},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=//dev2:4040/SQL/}] parsed true HttpParser{s=END,0 of 0}
17/11/03 15:24:50 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of 0},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=//dev2:4040/SQL/}]
17/11/03 15:24:50 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=//dev2:4040/SQL/} handle //dev2:4040/SQL/
17/11/03 15:24:50 DEBUG HttpChannelState: HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} handling IDLE
17/11/03 15:24:50 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=1,c=false,a=DISPATCHED,uri=//dev2:4040/SQL/} action DISPATCH
17/11/03 15:24:50 DEBUG Server: REQUEST on HttpChannelOverHttp@1d46146f{r=1,c=false,a=DISPATCHED,uri=//dev2:4040/SQL/}
GET /SQL/ HTTP/1.1
Host: dev2:4040
Connection: keep-alive
Cache-Control: max-age=0
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36
Upgrade-Insecure-Requests: 1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6


17/11/03 15:24:50 DEBUG ContextHandler: scope null||/SQL/ @ o.s.j.s.ServletContextHandler@3feebf9c{/SQL,null,AVAILABLE,@Spark}
17/11/03 15:24:50 DEBUG ContextHandler: context=/SQL||/ @ o.s.j.s.ServletContextHandler@3feebf9c{/SQL,null,AVAILABLE,@Spark}
17/11/03 15:24:50 DEBUG ServletHandler: servlet /SQL|/|null -> org.apache.spark.ui.JettyUtils$$anon$3-a4df251@4487270d==org.apache.spark.ui.JettyUtils$$anon$3,-1,true
17/11/03 15:24:50 DEBUG ServletHandler: chain=null
17/11/03 15:24:50 DEBUG SecurityManager: user=null aclsEnabled=false viewAcls=ec2-user viewAclsGroups=
17/11/03 15:24:50 DEBUG Server: RESPONSE for /SQL/ h=true
200 null
Date: Fri, 03 Nov 2017 15:24:50 GMT
Content-Type: text/html;charset=utf-8
Cache-Control: no-cache, no-store, must-revalidate
X-Frame-Options: SAMEORIGIN


17/11/03 15:24:50 DEBUG HttpChannelState: HttpChannelState@2e237c1e{s=DISPATCHED a=NOT_ASYNC i=true r=!P!U w=false} unhandle DISPATCHED
17/11/03 15:24:50 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=1,c=false,a=COMPLETING,uri=//dev2:4040/SQL/} action COMPLETE
17/11/03 15:24:50 DEBUG HttpChannel: sendResponse info=null content=DirectByteBuffer@1d7a0772[p=0,l=6321,c=32768,r=6321]={<<<<!DOCTYPE html><h...dy>\n    </html>>>>iv>\n      </td>\n ...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} complete=true committing=true callback=Blocker@4b2e23f8{null}
17/11/03 15:24:50 DEBUG HttpChannel: Commit HTTP/1.1{s=200,h=4} to HttpChannelOverHttp@1d46146f{r=1,c=true,a=COMPLETING,uri=//dev2:4040/SQL/}
17/11/03 15:24:50 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=200,h=4},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@799e9f45] generate: NEED_HEADER (null,[p=0,l=6321,c=32768,r=6321],true)@START
17/11/03 15:24:50 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=200,h=4},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@799e9f45] generate: FLUSH ([p=0,l=229,c=8192,r=229],[p=0,l=6321,c=32768,r=6321],true)@COMPLETING
17/11/03 15:24:50 DEBUG WriteFlusher: write: WriteFlusher@d38fa6f{IDLE} [HeapByteBuffer@5b77d36c[p=0,l=229,c=8192,r=229]={<<<HTTP/1.1 200 OK\r\n...z-SNAPSHOT)\r\n\r\n>>>-Insecure-Request...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00},DirectByteBuffer@1d7a0772[p=0,l=6321,c=32768,r=6321]={<<<<!DOCTYPE html><h...dy>\n    </html>>>>iv>\n      </td>\n ...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}]
17/11/03 15:24:50 DEBUG WriteFlusher: update WriteFlusher@d38fa6f{WRITING}:IDLE-->WRITING
17/11/03 15:24:50 DEBUG ChannelEndPoint: flushed 6550 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,W,5/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:50 DEBUG WriteFlusher: Flushed=true 229/229+1 WriteFlusher@d38fa6f{WRITING}
17/11/03 15:24:50 DEBUG WriteFlusher: update WriteFlusher@d38fa6f{IDLE}:WRITING-->IDLE
17/11/03 15:24:50 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=200,h=4},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@799e9f45] generate: DONE ([p=229,l=229,c=8192,r=0],[p=6321,l=6321,c=32768,r=0],true)@END
17/11/03 15:24:50 DEBUG HttpParser: reset HttpParser{s=END,0 of 0}
17/11/03 15:24:50 DEBUG HttpParser: END --> START
17/11/03 15:24:50 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null} handle exit, result COMPLETE
17/11/03 15:24:50 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:50 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:50 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null}] filled 0 HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:50 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:24:50 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:50 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null}] parsed false HttpParser{s=START,0 of -1}
17/11/03 15:24:50 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null}]
17/11/03 15:24:50 DEBUG AbstractConnection: fillInterested HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null}]
17/11/03 15:24:50 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:50 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:50 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}
17/11/03 15:24:50 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:24:50 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:24:50 DEBUG ManagedSelector: Running change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}:runUpdateKey
17/11/03 15:24:50 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/1,kio=1,kro=1}
17/11/03 15:24:50 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:50 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/1,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null}] onFillable exit HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/1,kio=1,kro=1}:runFillable
17/11/03 15:24:50 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:24:50 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:51 DEBUG ManagedSelector: Queued change org.spark_project.jetty.io.ManagedSelector$Accept@22ff12cb on org.spark_project.jetty.io.ManagedSelector@38335c12 id=1 keys=0 selected=0
17/11/03 15:24:51 DEBUG ManagedSelector: Selector loop woken up from select, 0/0 selected
17/11/03 15:24:51 DEBUG ManagedSelector: Running change org.spark_project.jetty.io.ManagedSelector$Accept@22ff12cb
17/11/03 15:24:51 DEBUG ManagedSelector: Queued change org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@437d8603 on org.spark_project.jetty.io.ManagedSelector@38335c12 id=1 keys=1 selected=0
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 produced org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@437d8603
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 dispatch
17/11/03 15:24:51 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 run org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@437d8603
17/11/03 15:24:51 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 run
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 produce enter
17/11/03 15:24:51 DEBUG AbstractEndPoint: onOpen SelectChannelEndPoint@50024f25{/122.178.219.222:58970<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0}
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 producing
17/11/03 15:24:51 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:51 DEBUG IdleTimeout: SelectChannelEndPoint@50024f25{/122.178.219.222:58970<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0} idle timeout check, elapsed: 0 ms, remaining: 30000 ms
17/11/03 15:24:51 DEBUG HttpChannel: new HttpChannelOverHttp@1d6e901b{r=0,c=false,a=IDLE,uri=null} -> SelectChannelEndPoint@50024f25{/122.178.219.222:58970<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0},null,HttpChannelState@2b7ec5bc{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false}
17/11/03 15:24:51 DEBUG HttpConnection: New HTTP Connection HttpConnection@41c034e[SelectChannelEndPoint@50024f25{/122.178.219.222:58970<->4040,Open,in,out,-,-,0/30000,null@0}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@46250f8f{s=START},c=HttpChannelOverHttp@1d6e901b{r=0,c=false,a=IDLE,uri=null}]
17/11/03 15:24:51 DEBUG AbstractConnection: onOpen HttpConnection@41c034e[SelectChannelEndPoint@50024f25{/122.178.219.222:58970<->4040,Open,in,out,-,-,0/30000,HttpConnection@41c034e}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@46250f8f{s=START},c=HttpChannelOverHttp@1d6e901b{r=0,c=false,a=IDLE,uri=null}]
17/11/03 15:24:51 DEBUG AbstractConnection: fillInterested HttpConnection@41c034e[SelectChannelEndPoint@50024f25{/122.178.219.222:58970<->4040,Open,in,out,-,-,0/30000,HttpConnection@41c034e}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@46250f8f{s=START},c=HttpChannelOverHttp@1d6e901b{r=0,c=false,a=IDLE,uri=null}]
17/11/03 15:24:51 DEBUG FillInterest: FillInterest@2fa2b118{true,AC.ReadCB@41c034e{HttpConnection@41c034e[SelectChannelEndPoint@50024f25{/122.178.219.222:58970<->4040,Open,in,out,FI,-,0/30000,HttpConnection@41c034e}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@46250f8f{s=START},c=HttpChannelOverHttp@1d6e901b{r=0,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@41c034e{HttpConnection@41c034e[SelectChannelEndPoint@50024f25{/122.178.219.222:58970<->4040,Open,in,out,FI,-,0/30000,HttpConnection@41c034e}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@46250f8f{s=START},c=HttpChannelOverHttp@1d6e901b{r=0,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:51 DEBUG FillInterest: FillInterest@2fa2b118{true,AC.ReadCB@41c034e{HttpConnection@41c034e[SelectChannelEndPoint@50024f25{/122.178.219.222:58970<->4040,Open,in,out,FI,-,1/30000,HttpConnection@41c034e}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@46250f8f{s=START},c=HttpChannelOverHttp@1d6e901b{r=0,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@41c034e{HttpConnection@41c034e[SelectChannelEndPoint@50024f25{/122.178.219.222:58970<->4040,Open,in,out,FI,-,1/30000,HttpConnection@41c034e}{io=0/0,kio=0,kro=0}][p=HttpParser{s=START,0 of 0},g=HttpGenerator@46250f8f{s=START},c=HttpChannelOverHttp@1d6e901b{r=0,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:51 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@50024f25{/122.178.219.222:58970<->4040,Open,in,out,FI,-,1/30000,HttpConnection@41c034e}{io=0/1,kio=0,kro=0}
17/11/03 15:24:51 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@50024f25{/122.178.219.222:58970<->4040,Open,in,out,FI,-,1/30000,HttpConnection@41c034e}{io=0/1,kio=0,kro=0}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@38335c12 id=1 keys=1 selected=0
17/11/03 15:24:51 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:24:51 DEBUG ManagedSelector: Created SelectChannelEndPoint@50024f25{/122.178.219.222:58970<->4040,Open,in,out,FI,-,1/30000,HttpConnection@41c034e}{io=0/1,kio=0,kro=0}
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 ran org.spark_project.jetty.io.ManagedSelector$CreateEndPoint@437d8603
17/11/03 15:24:51 DEBUG ManagedSelector: Running change SelectChannelEndPoint@50024f25{/122.178.219.222:58970<->4040,Open,in,out,FI,-,1/30000,HttpConnection@41c034e}{io=0/1,kio=0,kro=0}:runUpdateKey
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9 produce exit
17/11/03 15:24:51 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@141ee5b9
17/11/03 15:24:51 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@50024f25{/122.178.219.222:58970<->4040,Open,in,out,FI,-,1/30000,HttpConnection@41c034e}{io=1/1,kio=1,kro=0}
17/11/03 15:24:51 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:51 DEBUG ManagedSelector: Selector loop woken up from select, 1/1 selected
17/11/03 15:24:51 DEBUG SelectChannelEndPoint: onSelected 1->0 r=true w=false for SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,519/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}
17/11/03 15:24:51 DEBUG SelectChannelEndPoint: task SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,519/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,519/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:24:51 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,519/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:51 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:24:51 DEBUG SelectChannelEndPoint: Key interests updated 1 -> 0 on SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,519/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:51 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:51 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,519/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null}]}} fillable AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,519/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,519/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null}] onFillable enter HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:24:51 DEBUG ChannelEndPoint: filled 363 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,520/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null}] filled 363 HeapByteBuffer@5b77d36c[p=0,l=363,c=8192,r=363]={<<<GET /favicon.ico ....8,en;q=0.6\r\n\r\n>>> gzip, deflate\r\nA...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=1,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=363,c=8192,r=363]={<<<GET /favicon.ico ....8,en;q=0.6\r\n\r\n>>> gzip, deflate\r\nA...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:24:51 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=363,c=8192,r=363]={<<<GET /favicon.ico ....8,en;q=0.6\r\n\r\n>>> gzip, deflate\r\nA...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:51 DEBUG HttpParser: START --> SPACE1
17/11/03 15:24:51 DEBUG HttpParser: SPACE1 --> URI
17/11/03 15:24:51 DEBUG HttpParser: URI --> SPACE2
17/11/03 15:24:51 DEBUG HttpParser: SPACE2 --> REQUEST_VERSION
17/11/03 15:24:51 DEBUG HttpParser: REQUEST_VERSION --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> END
17/11/03 15:24:51 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=//dev2:4040/favicon.ico} onRequestComplete
17/11/03 15:24:51 DEBUG HttpInput: HttpInputOverHTTP@4dd720b1[c=0,q=1,[0]=EOF,s=STREAM] addContent EOF
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=//dev2:4040/favicon.ico}] parsed true HttpParser{s=END,0 of -1}
17/11/03 15:24:51 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=//dev2:4040/favicon.ico}]
17/11/03 15:24:51 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=//dev2:4040/favicon.ico} handle //dev2:4040/favicon.ico
17/11/03 15:24:51 DEBUG HttpChannelState: HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} handling IDLE
17/11/03 15:24:51 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=2,c=false,a=DISPATCHED,uri=//dev2:4040/favicon.ico} action DISPATCH
17/11/03 15:24:51 DEBUG Server: REQUEST on HttpChannelOverHttp@1d46146f{r=2,c=false,a=DISPATCHED,uri=//dev2:4040/favicon.ico}
GET /favicon.ico HTTP/1.1
Host: dev2:4040
Connection: keep-alive
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36
Accept: image/webp,image/apng,image/*,*/*;q=0.8
Referer: http://dev2:4040/SQL/
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6


17/11/03 15:24:51 DEBUG GzipHandler: org.spark_project.jetty.server.handler.gzip.GzipHandler@7c8cea75 handle Request(GET //dev2:4040/favicon.ico)@627337bd in null
17/11/03 15:24:51 DEBUG ContextHandler: scope null||/favicon.ico @ o.s.j.s.ServletContextHandler@6f731759{/,null,AVAILABLE,@Spark}
17/11/03 15:24:51 DEBUG ContextHandler: context=||/favicon.ico @ o.s.j.s.ServletContextHandler@6f731759{/,null,AVAILABLE,@Spark}
17/11/03 15:24:51 DEBUG ServletHandler: servlet |/favicon.ico|null -> org.apache.spark.ui.JettyUtils$$anon$4-310a7859@9e7e45df==org.apache.spark.ui.JettyUtils$$anon$4,-1,true
17/11/03 15:24:51 DEBUG ServletHandler: chain=null
17/11/03 15:24:51 DEBUG GzipHttpOutputInterceptor: org.spark_project.jetty.server.handler.gzip.GzipHttpOutputInterceptor@68d2cecc exclude by status 302
17/11/03 15:24:51 DEBUG HttpChannel: sendResponse info=null content=HeapByteBuffer@14eaec23[p=0,l=0,c=0,r=0]={<<<>>>} complete=true committing=true callback=Blocker@4b2e23f8{null}
17/11/03 15:24:51 DEBUG HttpChannel: Commit HTTP/1.1{s=302,h=2} to HttpChannelOverHttp@1d46146f{r=2,c=true,a=DISPATCHED,uri=//dev2:4040/favicon.ico}
17/11/03 15:24:51 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=302,h=2},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@33d436fd] generate: NEED_HEADER (null,[p=0,l=0,c=0,r=0],true)@START
17/11/03 15:24:51 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=302,h=2},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@33d436fd] generate: FLUSH ([p=0,l=143,c=8192,r=143],[p=0,l=0,c=0,r=0],true)@COMPLETING
17/11/03 15:24:51 DEBUG WriteFlusher: write: WriteFlusher@d38fa6f{IDLE} [HeapByteBuffer@5b77d36c[p=0,l=143,c=8192,r=143]={<<<HTTP/1.1 302 Foun...z-SNAPSHOT)\r\n\r\n>>>.36 (KHTML, like ...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}]
17/11/03 15:24:51 DEBUG WriteFlusher: update WriteFlusher@d38fa6f{WRITING}:IDLE-->WRITING
17/11/03 15:24:51 DEBUG ChannelEndPoint: flushed 143 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,W,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:51 DEBUG WriteFlusher: Flushed=true 143/143+0 WriteFlusher@d38fa6f{WRITING}
17/11/03 15:24:51 DEBUG WriteFlusher: update WriteFlusher@d38fa6f{IDLE}:WRITING-->IDLE
17/11/03 15:24:51 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=302,h=2},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@33d436fd] generate: DONE ([p=143,l=143,c=8192,r=0],[p=0,l=0,c=0,r=0],true)@END
17/11/03 15:24:51 DEBUG Server: RESPONSE for /favicon.ico h=true
302 null
Date: Fri, 03 Nov 2017 15:24:51 GMT
Location: http://dev2:4040/jobs/


17/11/03 15:24:51 DEBUG HttpChannelState: HttpChannelState@2e237c1e{s=DISPATCHED a=NOT_ASYNC i=true r=!P!U w=false} unhandle DISPATCHED
17/11/03 15:24:51 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=2,c=true,a=COMPLETING,uri=//dev2:4040/favicon.ico} action COMPLETE
17/11/03 15:24:51 DEBUG HttpParser: reset HttpParser{s=END,0 of -1}
17/11/03 15:24:51 DEBUG HttpParser: END --> START
17/11/03 15:24:51 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null} handle exit, result COMPLETE
17/11/03 15:24:51 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:51 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null}] filled 0 HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 302 Foun...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 302 Foun...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:24:51 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 302 Foun...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null}] parsed false HttpParser{s=START,0 of -1}
17/11/03 15:24:51 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null}]
17/11/03 15:24:51 DEBUG AbstractConnection: fillInterested HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null}]
17/11/03 15:24:51 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:51 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:51 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}
17/11/03 15:24:51 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:24:51 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null}] onFillable exit HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:24:51 DEBUG ManagedSelector: Running change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}:runUpdateKey
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=1/1,kio=0,kro=1}:runFillable
17/11/03 15:24:51 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=1/1,kio=1,kro=1}
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:24:51 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:51 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:51 DEBUG ManagedSelector: Selector loop woken up from select, 1/1 selected
17/11/03 15:24:51 DEBUG SelectChannelEndPoint: onSelected 1->0 r=true w=false for SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,372/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}
17/11/03 15:24:51 DEBUG SelectChannelEndPoint: task SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,372/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,372/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:24:51 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,372/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:51 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:24:51 DEBUG SelectChannelEndPoint: Key interests updated 1 -> 0 on SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,372/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:51 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:51 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,372/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null}]}} fillable AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,372/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,372/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null}] onFillable enter HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:24:51 DEBUG ChannelEndPoint: filled 357 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,372/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null}] filled 357 HeapByteBuffer@5b77d36c[p=0,l=357,c=8192,r=357]={<<<GET /jobs/ HTTP/1....8,en;q=0.6\r\n\r\n>>>.6\r\n\r\n gzip, defl...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=2,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=357,c=8192,r=357]={<<<GET /jobs/ HTTP/1....8,en;q=0.6\r\n\r\n>>>.6\r\n\r\n gzip, defl...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:24:51 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=357,c=8192,r=357]={<<<GET /jobs/ HTTP/1....8,en;q=0.6\r\n\r\n>>>.6\r\n\r\n gzip, defl...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:51 DEBUG HttpParser: START --> SPACE1
17/11/03 15:24:51 DEBUG HttpParser: SPACE1 --> URI
17/11/03 15:24:51 DEBUG HttpParser: URI --> SPACE2
17/11/03 15:24:51 DEBUG HttpParser: SPACE2 --> REQUEST_VERSION
17/11/03 15:24:51 DEBUG HttpParser: REQUEST_VERSION --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:51 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:51 DEBUG HttpParser: HEADER --> END
17/11/03 15:24:51 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=//dev2:4040/jobs/} onRequestComplete
17/11/03 15:24:51 DEBUG HttpInput: HttpInputOverHTTP@4dd720b1[c=0,q=1,[0]=EOF,s=STREAM] addContent EOF
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=//dev2:4040/jobs/}] parsed true HttpParser{s=END,0 of -1}
17/11/03 15:24:51 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=//dev2:4040/jobs/}]
17/11/03 15:24:51 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=//dev2:4040/jobs/} handle //dev2:4040/jobs/
17/11/03 15:24:51 DEBUG HttpChannelState: HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} handling IDLE
17/11/03 15:24:51 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=3,c=false,a=DISPATCHED,uri=//dev2:4040/jobs/} action DISPATCH
17/11/03 15:24:51 DEBUG Server: REQUEST on HttpChannelOverHttp@1d46146f{r=3,c=false,a=DISPATCHED,uri=//dev2:4040/jobs/}
GET /jobs/ HTTP/1.1
Host: dev2:4040
Connection: keep-alive
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36
Accept: image/webp,image/apng,image/*,*/*;q=0.8
Referer: http://dev2:4040/SQL/
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6


17/11/03 15:24:51 DEBUG GzipHandler: org.spark_project.jetty.server.handler.gzip.GzipHandler@4173905f handle Request(GET //dev2:4040/jobs/)@627337bd in null
17/11/03 15:24:51 DEBUG ContextHandler: scope null||/jobs/ @ o.s.j.s.ServletContextHandler@1f10fec6{/jobs,null,AVAILABLE,@Spark}
17/11/03 15:24:51 DEBUG ContextHandler: context=/jobs||/ @ o.s.j.s.ServletContextHandler@1f10fec6{/jobs,null,AVAILABLE,@Spark}
17/11/03 15:24:51 DEBUG ServletHandler: servlet /jobs|/|null -> org.apache.spark.ui.JettyUtils$$anon$3-1283ca23@1a8bdbe7==org.apache.spark.ui.JettyUtils$$anon$3,-1,true
17/11/03 15:24:51 DEBUG ServletHandler: chain=null
17/11/03 15:24:51 DEBUG SecurityManager: user=null aclsEnabled=false viewAcls=ec2-user viewAclsGroups=
17/11/03 15:24:51 DEBUG Server: RESPONSE for /jobs/ h=true
200 null
Date: Fri, 03 Nov 2017 15:24:51 GMT
Content-Type: text/html;charset=utf-8
Cache-Control: no-cache, no-store, must-revalidate
X-Frame-Options: SAMEORIGIN


17/11/03 15:24:51 DEBUG HttpChannelState: HttpChannelState@2e237c1e{s=DISPATCHED a=NOT_ASYNC i=true r=!P!U w=false} unhandle DISPATCHED
17/11/03 15:24:51 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=3,c=false,a=COMPLETING,uri=//dev2:4040/jobs/} action COMPLETE
17/11/03 15:24:51 DEBUG GzipHttpOutputInterceptor: org.spark_project.jetty.server.handler.gzip.GzipHttpOutputInterceptor@1a46ab00 compressing java.util.zip.Deflater@4274e72b
17/11/03 15:24:51 DEBUG HttpChannel: sendResponse info=null content=HeapByteBuffer@1597676e[p=0,l=2333,c=32768,r=2333]={<<<\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x00\xEdZmS#7\x12...\x8e\xF4\xCfq'\x00\xD5L1\r\xEd+\x00\x00>>>sup>\n            ...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} complete=true committing=true callback=GzipBufferCB@7fd7f538
17/11/03 15:24:51 DEBUG HttpChannel: Commit HTTP/1.1{s=200,h=6} to HttpChannelOverHttp@1d46146f{r=3,c=true,a=COMPLETING,uri=//dev2:4040/jobs/}
17/11/03 15:24:51 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=200,h=6},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@2d05a72] generate: NEED_HEADER (null,[p=0,l=2333,c=32768,r=2333],true)@START
17/11/03 15:24:51 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=200,h=6},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@2d05a72] generate: FLUSH ([p=0,l=288,c=8192,r=288],[p=0,l=2333,c=32768,r=2333],true)@COMPLETING
17/11/03 15:24:51 DEBUG WriteFlusher: write: WriteFlusher@d38fa6f{IDLE} [HeapByteBuffer@5b77d36c[p=0,l=288,c=8192,r=288]={<<<HTTP/1.1 200 OK\r\n...z-SNAPSHOT)\r\n\r\n>>>oding: gzip, defl...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00},HeapByteBuffer@1597676e[p=0,l=2333,c=32768,r=2333]={<<<\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x00\xEdZmS#7\x12...\x8e\xF4\xCfq'\x00\xD5L1\r\xEd+\x00\x00>>>sup>\n            ...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}]
17/11/03 15:24:51 DEBUG WriteFlusher: update WriteFlusher@d38fa6f{WRITING}:IDLE-->WRITING
17/11/03 15:24:51 DEBUG ChannelEndPoint: flushed 2621 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,W,11/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:51 DEBUG WriteFlusher: Flushed=true 288/288+1 WriteFlusher@d38fa6f{WRITING}
17/11/03 15:24:51 DEBUG WriteFlusher: update WriteFlusher@d38fa6f{IDLE}:WRITING-->IDLE
17/11/03 15:24:51 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=200,h=6},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@2d05a72] generate: DONE ([p=288,l=288,c=8192,r=0],[p=2333,l=2333,c=32768,r=0],true)@END
17/11/03 15:24:51 DEBUG HttpParser: reset HttpParser{s=END,0 of -1}
17/11/03 15:24:51 DEBUG HttpParser: END --> START
17/11/03 15:24:51 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null} handle exit, result COMPLETE
17/11/03 15:24:51 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:51 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null}] filled 0 HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:24:51 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null}] parsed false HttpParser{s=START,0 of -1}
17/11/03 15:24:51 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null}]
17/11/03 15:24:51 DEBUG AbstractConnection: fillInterested HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null}]
17/11/03 15:24:51 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:51 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:51 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}
17/11/03 15:24:51 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:24:51 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:24:51 DEBUG ManagedSelector: Running change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}:runUpdateKey
17/11/03 15:24:51 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/1,kio=1,kro=1}
17/11/03 15:24:51 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:51 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/1,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null}] onFillable exit HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/1,kio=1,kro=1}:runFillable
17/11/03 15:24:51 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:24:51 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:53 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user: closed
17/11/03 15:24:53 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user: stopped, remaining connections 0
17/11/03 15:24:53 DEBUG Client: The ping interval is 60000 ms.
17/11/03 15:24:53 DEBUG Client: Connecting to ip-172-30-1-247.ec2.internal/172.30.1.247:8020
17/11/03 15:24:53 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user: starting, having connections 1
17/11/03 15:24:53 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #442
17/11/03 15:24:53 DEBUG Client: IPC Client (1821330375) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #442
17/11/03 15:24:53 DEBUG ProtobufRpcEngine: Call: renewLease took 1ms
17/11/03 15:24:53 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-775905044_1
17/11/03 15:24:53 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-775905044_1] with renew id 1 executed
17/11/03 15:24:53 DEBUG ManagedSelector: Selector loop woken up from select, 1/1 selected
17/11/03 15:24:53 DEBUG SelectChannelEndPoint: onSelected 1->0 r=true w=false for SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1956/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}
17/11/03 15:24:53 DEBUG SelectChannelEndPoint: task SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1956/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1956/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:24:53 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1956/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:53 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:24:53 DEBUG SelectChannelEndPoint: Key interests updated 1 -> 0 on SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1956/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:53 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:53 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1956/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null}]}} fillable AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1956/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1956/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null}] onFillable enter HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:24:53 DEBUG ChannelEndPoint: filled 446 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1956/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null}] filled 446 HeapByteBuffer@5b77d36c[p=0,l=446,c=8192,r=446]={<<<GET /SQL/executio....8,en;q=0.6\r\n\r\n>>>\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=3,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=446,c=8192,r=446]={<<<GET /SQL/executio....8,en;q=0.6\r\n\r\n>>>\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:24:53 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=446,c=8192,r=446]={<<<GET /SQL/executio....8,en;q=0.6\r\n\r\n>>>\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:53 DEBUG HttpParser: START --> SPACE1
17/11/03 15:24:53 DEBUG HttpParser: SPACE1 --> URI
17/11/03 15:24:53 DEBUG HttpParser: URI --> SPACE2
17/11/03 15:24:53 DEBUG HttpParser: SPACE2 --> REQUEST_VERSION
17/11/03 15:24:53 DEBUG HttpParser: REQUEST_VERSION --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_IN_NAME
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_NAME --> HEADER_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> END
17/11/03 15:24:53 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=//dev2:4040/SQL/execution?id=1} onRequestComplete
17/11/03 15:24:53 DEBUG HttpInput: HttpInputOverHTTP@4dd720b1[c=0,q=1,[0]=EOF,s=STREAM] addContent EOF
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=//dev2:4040/SQL/execution?id=1}] parsed true HttpParser{s=END,0 of -1}
17/11/03 15:24:53 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=//dev2:4040/SQL/execution?id=1}]
17/11/03 15:24:53 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=//dev2:4040/SQL/execution?id=1} handle //dev2:4040/SQL/execution?id=1
17/11/03 15:24:53 DEBUG HttpChannelState: HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} handling IDLE
17/11/03 15:24:53 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=4,c=false,a=DISPATCHED,uri=//dev2:4040/SQL/execution?id=1} action DISPATCH
17/11/03 15:24:53 DEBUG Server: REQUEST on HttpChannelOverHttp@1d46146f{r=4,c=false,a=DISPATCHED,uri=//dev2:4040/SQL/execution?id=1}
GET /SQL/execution HTTP/1.1
Host: dev2:4040
Connection: keep-alive
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Referer: http://dev2:4040/SQL/
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6


17/11/03 15:24:53 DEBUG ContextHandler: scope null||/SQL/execution @ o.s.j.s.ServletContextHandler@4ae49387{/SQL/execution,null,AVAILABLE,@Spark}
17/11/03 15:24:53 DEBUG HttpChannel: sendResponse info=null content=HeapByteBuffer@14eaec23[p=0,l=0,c=0,r=0]={<<<>>>} complete=true committing=true callback=Blocker@4b2e23f8{null}
17/11/03 15:24:53 DEBUG HttpChannel: Commit HTTP/1.1{s=302,h=2} to HttpChannelOverHttp@1d46146f{r=4,c=true,a=DISPATCHED,uri=//dev2:4040/SQL/execution?id=1}
17/11/03 15:24:53 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=302,h=2},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@5c16ca7f] generate: NEED_HEADER (null,[p=0,l=0,c=0,r=0],true)@START
17/11/03 15:24:53 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=302,h=2},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@5c16ca7f] generate: FLUSH ([p=0,l=157,c=8192,r=157],[p=0,l=0,c=0,r=0],true)@COMPLETING
17/11/03 15:24:53 DEBUG WriteFlusher: write: WriteFlusher@d38fa6f{IDLE} [HeapByteBuffer@5b77d36c[p=0,l=157,c=8192,r=157]={<<<HTTP/1.1 302 Foun...z-SNAPSHOT)\r\n\r\n>>>0_12_6) AppleWebK...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}]
17/11/03 15:24:53 DEBUG WriteFlusher: update WriteFlusher@d38fa6f{WRITING}:IDLE-->WRITING
17/11/03 15:24:53 DEBUG ChannelEndPoint: flushed 157 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,W,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:53 DEBUG WriteFlusher: Flushed=true 157/157+0 WriteFlusher@d38fa6f{WRITING}
17/11/03 15:24:53 DEBUG WriteFlusher: update WriteFlusher@d38fa6f{IDLE}:WRITING-->IDLE
17/11/03 15:24:53 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=302,h=2},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@5c16ca7f] generate: DONE ([p=157,l=157,c=8192,r=0],[p=0,l=0,c=0,r=0],true)@END
17/11/03 15:24:53 DEBUG Server: RESPONSE for /SQL/execution h=true
302 null
Date: Fri, 03 Nov 2017 15:24:53 GMT
Location: http://dev2:4040/SQL/execution/?id=1


17/11/03 15:24:53 DEBUG HttpChannelState: HttpChannelState@2e237c1e{s=DISPATCHED a=NOT_ASYNC i=true r=!P!U w=false} unhandle DISPATCHED
17/11/03 15:24:53 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=4,c=true,a=COMPLETING,uri=//dev2:4040/SQL/execution?id=1} action COMPLETE
17/11/03 15:24:53 DEBUG HttpParser: reset HttpParser{s=END,0 of -1}
17/11/03 15:24:53 DEBUG HttpParser: END --> START
17/11/03 15:24:53 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null} handle exit, result COMPLETE
17/11/03 15:24:53 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:53 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null}] filled 0 HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 302 Foun...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 302 Foun...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:24:53 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 302 Foun...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null}] parsed false HttpParser{s=START,0 of -1}
17/11/03 15:24:53 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null}]
17/11/03 15:24:53 DEBUG AbstractConnection: fillInterested HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null}]
17/11/03 15:24:53 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:53 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:53 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}
17/11/03 15:24:53 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:24:53 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null}] onFillable exit HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:24:53 DEBUG ManagedSelector: Running change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}:runUpdateKey
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}:runFillable
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:24:53 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:53 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=1/1,kio=1,kro=1}
17/11/03 15:24:53 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:53 DEBUG ManagedSelector: Selector loop woken up from select, 1/1 selected
17/11/03 15:24:53 DEBUG SelectChannelEndPoint: onSelected 1->0 r=true w=false for SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,291/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}
17/11/03 15:24:53 DEBUG SelectChannelEndPoint: task SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,291/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,291/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:24:53 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,292/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:53 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:24:53 DEBUG SelectChannelEndPoint: Key interests updated 1 -> 0 on SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,292/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:53 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:53 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,292/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null}]}} fillable AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,292/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,292/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null}] onFillable enter HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:24:53 DEBUG ChannelEndPoint: filled 447 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,292/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null}] filled 447 HeapByteBuffer@5b77d36c[p=0,l=447,c=8192,r=447]={<<<GET /SQL/executio....8,en;q=0.6\r\n\r\n>>>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=4,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=447,c=8192,r=447]={<<<GET /SQL/executio....8,en;q=0.6\r\n\r\n>>>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:24:53 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=447,c=8192,r=447]={<<<GET /SQL/executio....8,en;q=0.6\r\n\r\n>>>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:53 DEBUG HttpParser: START --> SPACE1
17/11/03 15:24:53 DEBUG HttpParser: SPACE1 --> URI
17/11/03 15:24:53 DEBUG HttpParser: URI --> SPACE2
17/11/03 15:24:53 DEBUG HttpParser: SPACE2 --> REQUEST_VERSION
17/11/03 15:24:53 DEBUG HttpParser: REQUEST_VERSION --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_IN_NAME
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_NAME --> HEADER_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:53 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:53 DEBUG HttpParser: HEADER --> END
17/11/03 15:24:53 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=//dev2:4040/SQL/execution/?id=1} onRequestComplete
17/11/03 15:24:53 DEBUG HttpInput: HttpInputOverHTTP@4dd720b1[c=0,q=1,[0]=EOF,s=STREAM] addContent EOF
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=//dev2:4040/SQL/execution/?id=1}] parsed true HttpParser{s=END,0 of -1}
17/11/03 15:24:53 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=//dev2:4040/SQL/execution/?id=1}]
17/11/03 15:24:53 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=//dev2:4040/SQL/execution/?id=1} handle //dev2:4040/SQL/execution/?id=1
17/11/03 15:24:53 DEBUG HttpChannelState: HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} handling IDLE
17/11/03 15:24:53 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=5,c=false,a=DISPATCHED,uri=//dev2:4040/SQL/execution/?id=1} action DISPATCH
17/11/03 15:24:53 DEBUG Server: REQUEST on HttpChannelOverHttp@1d46146f{r=5,c=false,a=DISPATCHED,uri=//dev2:4040/SQL/execution/?id=1}
GET /SQL/execution/ HTTP/1.1
Host: dev2:4040
Connection: keep-alive
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Referer: http://dev2:4040/SQL/
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6


17/11/03 15:24:53 DEBUG ContextHandler: scope null||/SQL/execution/ @ o.s.j.s.ServletContextHandler@4ae49387{/SQL/execution,null,AVAILABLE,@Spark}
17/11/03 15:24:53 DEBUG ContextHandler: context=/SQL/execution||/ @ o.s.j.s.ServletContextHandler@4ae49387{/SQL/execution,null,AVAILABLE,@Spark}
17/11/03 15:24:53 DEBUG ServletHandler: servlet /SQL/execution|/|null -> org.apache.spark.ui.JettyUtils$$anon$3-16391278@e5d9b079==org.apache.spark.ui.JettyUtils$$anon$3,-1,true
17/11/03 15:24:53 DEBUG ServletHandler: chain=null
17/11/03 15:24:53 DEBUG SecurityManager: user=null aclsEnabled=false viewAcls=ec2-user viewAclsGroups=
17/11/03 15:24:53 DEBUG Server: RESPONSE for /SQL/execution/ h=true
200 null
Date: Fri, 03 Nov 2017 15:24:53 GMT
Content-Type: text/html;charset=utf-8
Cache-Control: no-cache, no-store, must-revalidate
X-Frame-Options: SAMEORIGIN


17/11/03 15:24:53 DEBUG HttpChannelState: HttpChannelState@2e237c1e{s=DISPATCHED a=NOT_ASYNC i=true r=!P!U w=false} unhandle DISPATCHED
17/11/03 15:24:53 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=5,c=false,a=COMPLETING,uri=//dev2:4040/SQL/execution/?id=1} action COMPLETE
17/11/03 15:24:53 DEBUG HttpChannel: sendResponse info=null content=DirectByteBuffer@1d7a0772[p=0,l=12312,c=32768,r=12312]={<<<<!DOCTYPE html><h...dy>\n    </html>>>>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} complete=true committing=true callback=Blocker@4b2e23f8{null}
17/11/03 15:24:53 DEBUG HttpChannel: Commit HTTP/1.1{s=200,h=4} to HttpChannelOverHttp@1d46146f{r=5,c=true,a=COMPLETING,uri=//dev2:4040/SQL/execution/?id=1}
17/11/03 15:24:53 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=200,h=4},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@73a10b47] generate: NEED_HEADER (null,[p=0,l=12312,c=32768,r=12312],true)@START
17/11/03 15:24:53 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=200,h=4},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@73a10b47] generate: FLUSH ([p=0,l=230,c=8192,r=230],[p=0,l=12312,c=32768,r=12312],true)@COMPLETING
17/11/03 15:24:53 DEBUG WriteFlusher: write: WriteFlusher@d38fa6f{IDLE} [HeapByteBuffer@5b77d36c[p=0,l=230,c=8192,r=230]={<<<HTTP/1.1 200 OK\r\n...z-SNAPSHOT)\r\n\r\n>>>ri/537.36\r\nAccept...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00},DirectByteBuffer@1d7a0772[p=0,l=12312,c=32768,r=12312]={<<<<!DOCTYPE html><h...dy>\n    </html>>>>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}]
17/11/03 15:24:53 DEBUG WriteFlusher: update WriteFlusher@d38fa6f{WRITING}:IDLE-->WRITING
17/11/03 15:24:53 DEBUG ChannelEndPoint: flushed 12542 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,W,5/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:53 DEBUG WriteFlusher: Flushed=true 230/230+1 WriteFlusher@d38fa6f{WRITING}
17/11/03 15:24:53 DEBUG WriteFlusher: update WriteFlusher@d38fa6f{IDLE}:WRITING-->IDLE
17/11/03 15:24:53 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=200,h=4},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@73a10b47] generate: DONE ([p=230,l=230,c=8192,r=0],[p=12312,l=12312,c=32768,r=0],true)@END
17/11/03 15:24:53 DEBUG HttpParser: reset HttpParser{s=END,0 of -1}
17/11/03 15:24:53 DEBUG HttpParser: END --> START
17/11/03 15:24:53 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null} handle exit, result COMPLETE
17/11/03 15:24:53 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:53 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null}] filled 0 HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:24:53 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null}] parsed false HttpParser{s=START,0 of -1}
17/11/03 15:24:53 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null}]
17/11/03 15:24:53 DEBUG AbstractConnection: fillInterested HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null}]
17/11/03 15:24:53 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:53 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:53 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}
17/11/03 15:24:53 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:24:53 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:24:53 DEBUG ManagedSelector: Running change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}:runUpdateKey
17/11/03 15:24:53 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/1,kio=1,kro=1}
17/11/03 15:24:53 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:53 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/1,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null}] onFillable exit HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/1,kio=1,kro=1}:runFillable
17/11/03 15:24:53 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:24:53 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:54 DEBUG ManagedSelector: Selector loop woken up from select, 1/1 selected
17/11/03 15:24:54 DEBUG SelectChannelEndPoint: onSelected 1->0 r=true w=false for SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,493/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}
17/11/03 15:24:54 DEBUG SelectChannelEndPoint: task SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,493/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,493/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:24:54 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,493/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:54 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:24:54 DEBUG SelectChannelEndPoint: Key interests updated 1 -> 0 on SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,493/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:54 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:54 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,493/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null}]}} fillable AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,493/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,493/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null}] onFillable enter HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:24:54 DEBUG ChannelEndPoint: filled 378 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,493/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null}] filled 378 HeapByteBuffer@5b77d36c[p=0,l=378,c=8192,r=378]={<<<GET /favicon.ico ....8,en;q=0.6\r\n\r\n>>>oding: gzip, defl...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=5,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=378,c=8192,r=378]={<<<GET /favicon.ico ....8,en;q=0.6\r\n\r\n>>>oding: gzip, defl...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:24:54 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=378,c=8192,r=378]={<<<GET /favicon.ico ....8,en;q=0.6\r\n\r\n>>>oding: gzip, defl...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:54 DEBUG HttpParser: START --> SPACE1
17/11/03 15:24:54 DEBUG HttpParser: SPACE1 --> URI
17/11/03 15:24:54 DEBUG HttpParser: URI --> SPACE2
17/11/03 15:24:54 DEBUG HttpParser: SPACE2 --> REQUEST_VERSION
17/11/03 15:24:54 DEBUG HttpParser: REQUEST_VERSION --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> END
17/11/03 15:24:54 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=//dev2:4040/favicon.ico} onRequestComplete
17/11/03 15:24:54 DEBUG HttpInput: HttpInputOverHTTP@4dd720b1[c=0,q=1,[0]=EOF,s=STREAM] addContent EOF
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=//dev2:4040/favicon.ico}] parsed true HttpParser{s=END,0 of -1}
17/11/03 15:24:54 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=//dev2:4040/favicon.ico}]
17/11/03 15:24:54 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=//dev2:4040/favicon.ico} handle //dev2:4040/favicon.ico
17/11/03 15:24:54 DEBUG HttpChannelState: HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} handling IDLE
17/11/03 15:24:54 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=6,c=false,a=DISPATCHED,uri=//dev2:4040/favicon.ico} action DISPATCH
17/11/03 15:24:54 DEBUG Server: REQUEST on HttpChannelOverHttp@1d46146f{r=6,c=false,a=DISPATCHED,uri=//dev2:4040/favicon.ico}
GET /favicon.ico HTTP/1.1
Host: dev2:4040
Connection: keep-alive
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36
Accept: image/webp,image/apng,image/*,*/*;q=0.8
Referer: http://dev2:4040/SQL/execution/?id=1
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6


17/11/03 15:24:54 DEBUG GzipHandler: org.spark_project.jetty.server.handler.gzip.GzipHandler@7c8cea75 handle Request(GET //dev2:4040/favicon.ico)@627337bd in null
17/11/03 15:24:54 DEBUG ContextHandler: scope null||/favicon.ico @ o.s.j.s.ServletContextHandler@6f731759{/,null,AVAILABLE,@Spark}
17/11/03 15:24:54 DEBUG ContextHandler: context=||/favicon.ico @ o.s.j.s.ServletContextHandler@6f731759{/,null,AVAILABLE,@Spark}
17/11/03 15:24:54 DEBUG ServletHandler: servlet |/favicon.ico|null -> org.apache.spark.ui.JettyUtils$$anon$4-310a7859@9e7e45df==org.apache.spark.ui.JettyUtils$$anon$4,-1,true
17/11/03 15:24:54 DEBUG ServletHandler: chain=null
17/11/03 15:24:54 DEBUG GzipHttpOutputInterceptor: org.spark_project.jetty.server.handler.gzip.GzipHttpOutputInterceptor@373339d3 exclude by status 302
17/11/03 15:24:54 DEBUG HttpChannel: sendResponse info=null content=HeapByteBuffer@14eaec23[p=0,l=0,c=0,r=0]={<<<>>>} complete=true committing=true callback=Blocker@4b2e23f8{null}
17/11/03 15:24:54 DEBUG HttpChannel: Commit HTTP/1.1{s=302,h=2} to HttpChannelOverHttp@1d46146f{r=6,c=true,a=DISPATCHED,uri=//dev2:4040/favicon.ico}
17/11/03 15:24:54 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=302,h=2},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@21370d48] generate: NEED_HEADER (null,[p=0,l=0,c=0,r=0],true)@START
17/11/03 15:24:54 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=302,h=2},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@21370d48] generate: FLUSH ([p=0,l=143,c=8192,r=143],[p=0,l=0,c=0,r=0],true)@COMPLETING
17/11/03 15:24:54 DEBUG WriteFlusher: write: WriteFlusher@d38fa6f{IDLE} [HeapByteBuffer@5b77d36c[p=0,l=143,c=8192,r=143]={<<<HTTP/1.1 302 Foun...z-SNAPSHOT)\r\n\r\n>>>.36 (KHTML, like ...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}]
17/11/03 15:24:54 DEBUG WriteFlusher: update WriteFlusher@d38fa6f{WRITING}:IDLE-->WRITING
17/11/03 15:24:54 DEBUG ChannelEndPoint: flushed 143 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,W,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:54 DEBUG WriteFlusher: Flushed=true 143/143+0 WriteFlusher@d38fa6f{WRITING}
17/11/03 15:24:54 DEBUG WriteFlusher: update WriteFlusher@d38fa6f{IDLE}:WRITING-->IDLE
17/11/03 15:24:54 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=302,h=2},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@21370d48] generate: DONE ([p=143,l=143,c=8192,r=0],[p=0,l=0,c=0,r=0],true)@END
17/11/03 15:24:54 DEBUG Server: RESPONSE for /favicon.ico h=true
302 null
Date: Fri, 03 Nov 2017 15:24:54 GMT
Location: http://dev2:4040/jobs/


17/11/03 15:24:54 DEBUG HttpChannelState: HttpChannelState@2e237c1e{s=DISPATCHED a=NOT_ASYNC i=true r=!P!U w=false} unhandle DISPATCHED
17/11/03 15:24:54 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=6,c=true,a=COMPLETING,uri=//dev2:4040/favicon.ico} action COMPLETE
17/11/03 15:24:54 DEBUG HttpParser: reset HttpParser{s=END,0 of -1}
17/11/03 15:24:54 DEBUG HttpParser: END --> START
17/11/03 15:24:54 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null} handle exit, result COMPLETE
17/11/03 15:24:54 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:54 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null}] filled 0 HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 302 Foun...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 302 Foun...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:24:54 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 302 Foun...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null}] parsed false HttpParser{s=START,0 of -1}
17/11/03 15:24:54 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,2/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null}]
17/11/03 15:24:54 DEBUG AbstractConnection: fillInterested HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,2/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null}]
17/11/03 15:24:54 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:54 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:54 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}
17/11/03 15:24:54 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:24:54 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null}] onFillable exit HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:24:54 DEBUG ManagedSelector: Running change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}:runUpdateKey
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=1/1,kio=0,kro=1}:runFillable
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:24:54 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:54 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=1/1,kio=1,kro=1}
17/11/03 15:24:54 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:54 DEBUG ManagedSelector: Selector loop woken up from select, 1/1 selected
17/11/03 15:24:54 DEBUG SelectChannelEndPoint: onSelected 1->0 r=true w=false for SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,309/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}
17/11/03 15:24:54 DEBUG SelectChannelEndPoint: task SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,309/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produced SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,309/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 dispatch
17/11/03 15:24:54 DEBUG QueuedThreadPool: queue EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,309/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}:runFillable
17/11/03 15:24:54 DEBUG QueuedThreadPool: run EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Pend/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 run
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce enter
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 producing
17/11/03 15:24:54 DEBUG SelectChannelEndPoint: Key interests updated 1 -> 0 on SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,309/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:54 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:54 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,309/30000,HttpConnection@51b33e2e}{io=1/0,kio=1,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null}]}} fillable AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,309/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,309/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null}] onFillable enter HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:24:54 DEBUG ChannelEndPoint: filled 372 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,309/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null}] filled 372 HeapByteBuffer@5b77d36c[p=0,l=372,c=8192,r=372]={<<<GET /jobs/ HTTP/1....8,en;q=0.6\r\n\r\n>>>.6\r\n\r\noding: gzip...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=6,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=372,c=8192,r=372]={<<<GET /jobs/ HTTP/1....8,en;q=0.6\r\n\r\n>>>.6\r\n\r\noding: gzip...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:24:54 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=372,c=8192,r=372]={<<<GET /jobs/ HTTP/1....8,en;q=0.6\r\n\r\n>>>.6\r\n\r\noding: gzip...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:54 DEBUG HttpParser: START --> SPACE1
17/11/03 15:24:54 DEBUG HttpParser: SPACE1 --> URI
17/11/03 15:24:54 DEBUG HttpParser: URI --> SPACE2
17/11/03 15:24:54 DEBUG HttpParser: SPACE2 --> REQUEST_VERSION
17/11/03 15:24:54 DEBUG HttpParser: REQUEST_VERSION --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> HEADER_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_VALUE --> HEADER_IN_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> HEADER_IN_VALUE
17/11/03 15:24:54 DEBUG HttpParser: HEADER_IN_VALUE --> HEADER
17/11/03 15:24:54 DEBUG HttpParser: HEADER --> END
17/11/03 15:24:54 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=7,c=false,a=IDLE,uri=//dev2:4040/jobs/} onRequestComplete
17/11/03 15:24:54 DEBUG HttpInput: HttpInputOverHTTP@4dd720b1[c=0,q=1,[0]=EOF,s=STREAM] addContent EOF
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=7,c=false,a=IDLE,uri=//dev2:4040/jobs/}] parsed true HttpParser{s=END,0 of -1}
17/11/03 15:24:54 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,1/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=END,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=7,c=false,a=IDLE,uri=//dev2:4040/jobs/}]
17/11/03 15:24:54 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=7,c=false,a=IDLE,uri=//dev2:4040/jobs/} handle //dev2:4040/jobs/
17/11/03 15:24:54 DEBUG HttpChannelState: HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} handling IDLE
17/11/03 15:24:54 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=7,c=false,a=DISPATCHED,uri=//dev2:4040/jobs/} action DISPATCH
17/11/03 15:24:54 DEBUG Server: REQUEST on HttpChannelOverHttp@1d46146f{r=7,c=false,a=DISPATCHED,uri=//dev2:4040/jobs/}
GET /jobs/ HTTP/1.1
Host: dev2:4040
Connection: keep-alive
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36
Accept: image/webp,image/apng,image/*,*/*;q=0.8
Referer: http://dev2:4040/SQL/execution/?id=1
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6


17/11/03 15:24:54 DEBUG GzipHandler: org.spark_project.jetty.server.handler.gzip.GzipHandler@4173905f handle Request(GET //dev2:4040/jobs/)@627337bd in null
17/11/03 15:24:54 DEBUG ContextHandler: scope null||/jobs/ @ o.s.j.s.ServletContextHandler@1f10fec6{/jobs,null,AVAILABLE,@Spark}
17/11/03 15:24:54 DEBUG ContextHandler: context=/jobs||/ @ o.s.j.s.ServletContextHandler@1f10fec6{/jobs,null,AVAILABLE,@Spark}
17/11/03 15:24:54 DEBUG ServletHandler: servlet /jobs|/|null -> org.apache.spark.ui.JettyUtils$$anon$3-1283ca23@1a8bdbe7==org.apache.spark.ui.JettyUtils$$anon$3,-1,true
17/11/03 15:24:54 DEBUG ServletHandler: chain=null
17/11/03 15:24:54 DEBUG SecurityManager: user=null aclsEnabled=false viewAcls=ec2-user viewAclsGroups=
17/11/03 15:24:54 DEBUG Server: RESPONSE for /jobs/ h=true
200 null
Date: Fri, 03 Nov 2017 15:24:54 GMT
Content-Type: text/html;charset=utf-8
Cache-Control: no-cache, no-store, must-revalidate
X-Frame-Options: SAMEORIGIN


17/11/03 15:24:54 DEBUG HttpChannelState: HttpChannelState@2e237c1e{s=DISPATCHED a=NOT_ASYNC i=true r=!P!U w=false} unhandle DISPATCHED
17/11/03 15:24:54 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=7,c=false,a=COMPLETING,uri=//dev2:4040/jobs/} action COMPLETE
17/11/03 15:24:54 DEBUG GzipHttpOutputInterceptor: org.spark_project.jetty.server.handler.gzip.GzipHttpOutputInterceptor@5aa2ceb1 compressing java.util.zip.Deflater@3367e9f7
17/11/03 15:24:54 DEBUG HttpChannel: sendResponse info=null content=HeapByteBuffer@8c9e07c[p=0,l=2333,c=32768,r=2333]={<<<\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x00\xEdZmS#7\x12...\x8e\xF4\xCfq'\x00\xD5L1\r\xEd+\x00\x00>>>sup>\n            ...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} complete=true committing=true callback=GzipBufferCB@1f7c3f8f
17/11/03 15:24:54 DEBUG HttpChannel: Commit HTTP/1.1{s=200,h=6} to HttpChannelOverHttp@1d46146f{r=7,c=true,a=COMPLETING,uri=//dev2:4040/jobs/}
17/11/03 15:24:54 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=200,h=6},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@3c56e113] generate: NEED_HEADER (null,[p=0,l=2333,c=32768,r=2333],true)@START
17/11/03 15:24:54 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=200,h=6},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@3c56e113] generate: FLUSH ([p=0,l=288,c=8192,r=288],[p=0,l=2333,c=32768,r=2333],true)@COMPLETING
17/11/03 15:24:54 DEBUG WriteFlusher: write: WriteFlusher@d38fa6f{IDLE} [HeapByteBuffer@5b77d36c[p=0,l=288,c=8192,r=288]={<<<HTTP/1.1 200 OK\r\n...z-SNAPSHOT)\r\n\r\n>>>d=1\r\nAccept-Encod...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00},HeapByteBuffer@8c9e07c[p=0,l=2333,c=32768,r=2333]={<<<\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x00\xEdZmS#7\x12...\x8e\xF4\xCfq'\x00\xD5L1\r\xEd+\x00\x00>>>sup>\n            ...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}]
17/11/03 15:24:54 DEBUG WriteFlusher: update WriteFlusher@d38fa6f{WRITING}:IDLE-->WRITING
17/11/03 15:24:54 DEBUG ChannelEndPoint: flushed 2621 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,W,10/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:54 DEBUG WriteFlusher: Flushed=true 288/288+1 WriteFlusher@d38fa6f{WRITING}
17/11/03 15:24:54 DEBUG WriteFlusher: update WriteFlusher@d38fa6f{IDLE}:WRITING-->IDLE
17/11/03 15:24:54 DEBUG HttpConnection: org.spark_project.jetty.server.HttpConnection$SendCallback@14d0584d[PROCESSING][i=HTTP/1.1{s=200,h=6},cb=org.spark_project.jetty.server.HttpChannel$CommitCallback@3c56e113] generate: DONE ([p=288,l=288,c=8192,r=0],[p=2333,l=2333,c=32768,r=0],true)@END
17/11/03 15:24:54 DEBUG HttpParser: reset HttpParser{s=END,0 of -1}
17/11/03 15:24:54 DEBUG HttpParser: END --> START
17/11/03 15:24:54 DEBUG HttpChannel: HttpChannelOverHttp@1d46146f{r=7,c=false,a=IDLE,uri=null} handle exit, result COMPLETE
17/11/03 15:24:54 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:54 DEBUG ChannelEndPoint: filled 0 SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=7,c=false,a=IDLE,uri=null}] filled 0 HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=7,c=false,a=IDLE,uri=null}] parse HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} {}
17/11/03 15:24:54 DEBUG HttpParser: parseNext s=START HeapByteBuffer@5b77d36c[p=0,l=0,c=8192,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=7,c=false,a=IDLE,uri=null}] parsed false HttpParser{s=START,0 of -1}
17/11/03 15:24:54 DEBUG HttpConnection: releaseRequestBuffer HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=7,c=false,a=IDLE,uri=null}]
17/11/03 15:24:54 DEBUG AbstractConnection: fillInterested HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,-,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=7,c=false,a=IDLE,uri=null}]
17/11/03 15:24:54 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=7,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=7,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:54 DEBUG FillInterest: FillInterest@46d74c0f{true,AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=7,c=false,a=IDLE,uri=null}]}} register AC.ReadCB@51b33e2e{HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/0,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=7,c=false,a=IDLE,uri=null}]}
17/11/03 15:24:54 DEBUG SelectChannelEndPoint: changeInterests p=false 0->1 for SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}
17/11/03 15:24:54 DEBUG ManagedSelector: Queued change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,0/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}:runUpdateKey on org.spark_project.jetty.io.ManagedSelector@3c7d84ce id=0 keys=1 selected=0
17/11/03 15:24:54 DEBUG ManagedSelector: Selector loop woken up from select, 0/1 selected
17/11/03 15:24:54 DEBUG HttpConnection: HttpConnection@51b33e2e[SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}][p=HttpParser{s=START,0 of -1},g=HttpGenerator@6b9fd87f{s=START},c=HttpChannelOverHttp@1d46146f{r=7,c=false,a=IDLE,uri=null}] onFillable exit HttpChannelState@2e237c1e{s=IDLE a=NOT_ASYNC i=true r=!P!U w=false} null
17/11/03 15:24:54 DEBUG ManagedSelector: Running change SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=0/1,kio=0,kro=1}:runUpdateKey
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 ran SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/1,kio=0,kro=1}:runFillable
17/11/03 15:24:54 DEBUG SelectChannelEndPoint: Key interests updated 0 -> 1 on SelectChannelEndPoint@2e02828d{/122.178.219.222:58969<->4040,Open,in,out,FI,-,1/30000,HttpConnection@51b33e2e}{io=1/1,kio=1,kro=1}
17/11/03 15:24:54 DEBUG ExecuteProduceConsume: EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5 produce exit
17/11/03 15:24:54 DEBUG ManagedSelector: Selector loop waiting on select
17/11/03 15:24:54 DEBUG QueuedThreadPool: ran EPC Prod/org.spark_project.jetty.io.ManagedSelector$SelectorProducer@2835fef5
17/11/03 15:25:08 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074043539_302768 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 15:25:08 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 926097 flag: 0 flag: 0 flag: 0
